;; I've included identifiers from some SRFIs that are in "withdrawn" status.
;; Those can be filtered out using the status in "srfi-data.scm", if desired, so
;; I'm going to leave them in the database.  However, to save effort, I'm not
;; going to add any more withdrawn SRFIs.

((signature (cond-expand cond-expand-clause-0
			 cond-expand-clause ...))
 (signature (cond-expand cond-expand-clause ...
			 (else command-or-definition ...)))
 (literals else)
 (source (srfi 0))
 (kind syntax))
((signature (cons a d)
	    (returns pair))
 (fragment "cons")
 (source (srfi 1))
 (kind procedure))
((signature (list object ...)
	    (returns list))
 (fragment "list")
 (source (srfi 1))
 (kind procedure))
((signature (xcons d a)
	    (returns pair))
 (fragment "xcons")
 (source (srfi 1))
 (kind procedure))
((signature (cons* elt1 elt2 ...)
	    (returns object))
 (fragment "cons*")
 (source (srfi 1))
 (kind procedure))
((signature (make-list n)
	    (returns list))
 (signature (make-list n fill)
	    (returns list))
 (fragment "make-list")
 (source (srfi 1))
 (kind procedure))
((signature (list-tabulate n init-proc)
	    (returns list))
 (fragment "list-tabulate")
 (source (srfi 1))
 (kind procedure))
((signature (list-copy flist)
	    (returns flist))
 (fragment "list-copy")
 (source (srfi 1))
 (kind procedure))
((signature (circular-list elt1 elt2 ...)
	    (returns list))
 (fragment "circular-list")
 (source (srfi 1))
 (kind procedure))
((signature (iota count)
	    (returns list))
 (signature (iota count start)
	    (returns list))
 (signature (iota count start step)
	    (returns list))
 (fragment "iota")
 (source (srfi 1))
 (kind procedure))
((signature (circular-list? x)
	    (returns boolean))
 (fragment "circular-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (dotted-list? x)
	    (returns boolean))
 (fragment "dotted-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (pair? object)
	    (returns boolean))
 (fragment "pair-p")
 (source (srfi 1))
 (kind procedure))
((signature (null? object)
	    (returns boolean))
 (fragment "null-p")
 (source (srfi 1))
 (kind procedure))
((signature (null-list? list)
	    (returns boolean))
 (fragment "null-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (not-pair? x)
	    (returns boolean))
 (fragment "not-pair-p")
 (source (srfi 1))
 (kind procedure))
((signature (list= elt= list1 ...)
	    (returns boolean))
 (fragment "list=")
 (source (srfi 1))
 (kind procedure))
((signature (car pair)
	    (returns value))
 (fragment "cdr")
 (source (srfi 1))
 (kind procedure))
((signature (cdr pair)
	    (returns value))
 (fragment "cdr")
 (source (srfi 1))
 (kind procedure))
((signature (caar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (list-ref clist i)
	    (returns value))
 (fragment "list-ref")
 (source (srfi 1))
 (kind procedure))
((signature (first pair)
	    (returns object))
 (fragment "first")
 (source (srfi 1))
 (kind procedure))
((signature (third pair)
	    (returns object))
 (fragment "third")
 (source (srfi 1))
 (kind procedure))
((signature (fourth pair)
	    (returns object))
 (fragment "fourth")
 (source (srfi 1))
 (kind procedure))
((signature (fifth pair)
	    (returns object))
 (fragment "fifth")
 (source (srfi 1))
 (kind procedure))
((signature (sixth pair)
	    (returns object))
 (fragment "sixth")
 (source (srfi 1))
 (kind procedure))
((signature (seventh pair)
	    (returns object))
 (fragment "seventh")
 (source (srfi 1))
 (kind procedure))
((signature (eighth pair)
	    (returns object))
 (fragment "eighth")
 (source (srfi 1))
 (kind procedure))
((signature (ninth pair)
	    (returns object))
 (fragment "ninth")
 (source (srfi 1))
 (kind procedure))
((signature (tenth pair)
	    (returns object))
 (fragment "tenth")
 (source (srfi 1))
 (kind procedure))
((signature (car+cdr pair)
	    (returns x y))
 (fragment "car+cdr")
 (source (srfi 1))
 (kind procedure))
((signature (drop x i)
	    (returns object))
 (fragment "drop")
 (source (srfi 1))
 (kind procedure))
((signature (take-right flist i)
	    (returns object))
 (fragment "take-right")
 (source (srfi 1))
 (kind procedure))
((signature (drop-right flist i)
	    (returns list))
 (fragment "drop-right")
 (source (srfi 1))
 (kind procedure))
((signature (take! x i)
	    (returns list))
 (fragment "take!")
 (source (srfi 1))
 (kind procedure))
((signature (drop-right! flist i)
	    (returns list))
 (fragment "drop-right!")
 (source (srfi 1))
 (kind procedure))
((signature (split-at x i)
	    (returns list object))
 (fragment "split-at")
 (source (srfi 1))
 (kind procedure))
((signature (split-at! x i)
	    (returns list object))
 (fragment "split-at!")
 (source (srfi 1))
 (kind procedure))
((signature (last pair)
	    (returns object))
 (fragment "last")
 (source (srfi 1))
 (kind procedure))
((signature (last-pair pair)
	    (returns pair))
 (fragment "last-pair")
 (source (srfi 1))
 (kind procedure))
((signature (length list)
	    (returns integer))
 (fragment "length")
 (source (srfi 1))
 (kind procedure))
((signature (length+ clist)
	    (returns (or integer #f)))
 (fragment "length+")
 (source (srfi 1))
 (kind procedure))
((signature (append list1 ...)
	    (returns list))
 (fragment "append")
 (source (srfi 1))
 (kind procedure))
((signature (append! list1 ...)
	    (returns list))
 (fragment "append!")
 (source (srfi 1))
 (kind procedure))
((signature (concatenate list-of-lists)
	    (returns value))
 (fragment "concatenate")
 (source (srfi 1))
 (kind procedure))
((signature (concatenate! list-of-lists)
	    (returns value))
 (fragment "concatenate!")
 (source (srfi 1))
 (kind procedure))
((signature (reverse list)
	    (returns list))
 (fragment "reverse")
 (source (srfi 1))
 (kind procedure))
((signature (reverse! list)
	    (returns list))
 (fragment "reverse!")
 (source (srfi 1))
 (kind procedure))
((signature (append-reverse rev-head tail)
	    (returns list))
 (fragment "append-reverse")
 (source (srfi 1))
 (kind procedure))
((signature (append-reverse! rev-head tail)
	    (returns list))
 (fragment "append-reverse")
 (source (srfi 1))
 (kind procedure))
((signature (zip clist1 clist2 ...)
	    (returns list))
 (fragment "zip")
 (source (srfi 1))
 (kind procedure))
((signature (unzip1 list)
	    (returns list))
 (fragment "unzip1")
 (source (srfi 1))
 (kind procedure))
((signature (unzip3 list)
	    (returns list list list))
 (fragment "unzip3")
 (source (srfi 1))
 (kind procedure))
((signature (unzip5 list)
	    (returns list list list list list))
 (fragment "unzip5")
 (source (srfi 1))
 (kind procedure))
((signature (count pred clist1 clist2)
	    (returns integer))
 (fragment "count")
 (source (srfi 1))
 (kind procedure))
((signature (fold kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "fold")
 (source (srfi 1))
 (kind procedure))
((signature (fold-right kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "fold-right")
 (source (srfi 1))
 (kind procedure))
((signature (pair-fold kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "pair-fold")
 (source (srfi 1))
 (kind procedure))
((signature (pair-fold-right kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "pair-fold-right")
 (source (srfi 1))
 (kind procedure))
((signature (reduce f ridentity list)
	    (returns value))
 (fragment "reduce")
 (source (srfi 1))
 (kind procedure))
((signature (reduce-right f ridentity list)
	    (returns value))
 (fragment "reduce-right")
 (source (srfi 1))
 (kind procedure))
((signature (unfold p f g seed)
	    (returns list))
 (signature (unfold p f g seed tail-gen)
	    (returns list))
 (fragment "unfold")
 (source (srfi 1))
 (kind procedure))
((signature (unfold-right p f g seed)
	    (returns list))
 (signature (unfold-right p f g seed tail)
	    (returns list))
 (fragment "unfold-right")
 (source (srfi 1))
 (kind procedure))
((signature (map proc clist1 clist2 ...)
	    (returns list))
 (fragment "map")
 (source (srfi 1))
 (kind procedure))
((signature (for-each proc clist1 clist2 ...)
	    (returns unspecified))
 (fragment "for-each")
 (source (srfi 1))
 (kind procedure))
((signature (append-map f clist1 clist2 ...)
	    (returns value))
 (fragment "append-map")
 (source (srfi 1))
 (kind procedure))
((signature (append-map! f clist1 clist2 ...)
	    (returns value))
 (fragment "append-map")
 (source (srfi 1))
 (kind procedure))
((signature (map! f list1 clist2 ...)
	    (returns list))
 (fragment "map!")
 (source (srfi 1))
 (kind procedure))
((signature (map-in-order f clist1 clist2 ...)
	    (returns list))
 (fragment "map-in-order")
 (source (srfi 1))
 (kind procedure))
((signature (pair-for-each f clist1 clist2 ...)
	    (returns unspecific))
 (fragment "pair-for-each")
 (source (srfi 1))
 (kind procedure))
((signature (filter-map f clist1 clist2 ...)
	    (returns list))
 (fragment "filter-map")
 (source (srfi 1))
 (kind procedure))
((signature (filter pred list)
	    (returns list))
 (fragment "filter")
 (source (srfi 1))
 (kind procedure))
((signature (partition pred list)
	    (returns list list))
 (fragment "partition")
 (source (srfi 1))
 (kind procedure))
((signature (remove pred list)
	    (returns list))
 (fragment "remove")
 (source (srfi 1))
 (kind procedure))
((signature (filter! pred list)
	    (returns list))
 (fragment "filter!")
 (source (srfi 1))
 (kind procedure))
((signature (partition! pred list)
	    (returns list list))
 (fragment "partition!")
 (source (srfi 1))
 (kind procedure))
((signature (remove! pred list)
	    (returns list))
 (fragment "remove!")
 (source (srfi 1))
 (kind procedure))
((signature (find pred clist)
	    (returns value))
 (fragment "find")
 (source (srfi 1))
 (kind procedure))
((signature (find-tail pred clist)
	    (returns (or pair #f)))
 (fragment "find-tail")
 (source (srfi 1))
 (kind procedure))
((signature (take-while pred clist)
	    (returns list))
 (fragment "take-while")
 (source (srfi 1))
 (kind procedure))
((signature (take-while! pred clist)
	    (returns list))
 (fragment "take-while")
 (source (srfi 1))
 (kind procedure))
((signature (drop-while pred clist)
	    (returns list))
 (fragment "drop-while")
 (source (srfi 1))
 (kind procedure))
((signature (span pred clist)
	    (returns list clist))
 (fragment "span")
 (source (srfi 1))
 (kind procedure))
((signature (span! pred list)
	    (returns list list))
 (fragment "span!")
 (source (srfi 1))
 (kind procedure))
((signature (break pred clist)
	    (returns list clist))
 (fragment "break")
 (source (srfi 1))
 (kind procedure))
((signature (break! pred list)
	    (returns list list))
 (fragment "break!")
 (source (srfi 1))
 (kind procedure))
((signature (any pred clist1 clist2 ...)
	    (returns value))
 (fragment "any")
 (source (srfi 1))
 (kind procedure))
((signature (every pred clist1 clist2 ...)
	    (returns value))
 (fragment "every")
 (source (srfi 1))
 (kind procedure))
((signature (list-index pred clist1 clist2 ...)
	    (returns (or integer #f)))
 (fragment "list-index")
 (source (srfi 1))
 (kind procedure))
((signature (member x list)
	    (returns list))
 (signature (member x list =)
	    (returns list))
 (fragment "member")
 (source (srfi 1))
 (kind procedure))
((signature (memq x list)
	    (returns list))
 (fragment "memq")
 (source (srfi 1))
 (kind procedure))
((signature (memv x list)
	    (returns list))
 (fragment "memv")
 (source (srfi 1))
 (kind procedure))
((signature (delete x list)
	    (returns list))
 (signature (delete x list =)
	    (returns list))
 (fragment "delete")
 (source (srfi 1))
 (kind procedure))
((signature (delete! x list)
	    (returns list))
 (signature (delete! x list =)
	    (returns list))
 (fragment "delete!")
 (source (srfi 1))
 (kind procedure))
((signature (delete-duplicates list)
	    (returns list))
 (signature (delete-duplicates list =)
	    (returns list))
 (fragment "delete-duplicates")
 (source (srfi 1))
 (kind procedure))
((signature (delete-duplicates! list)
	    (returns list))
 (signature (delete-duplicates! list =)
	    (returns list))
 (fragment "delete-duplicates")
 (source (srfi 1))
 (kind procedure))
((signature (assoc key alist)
	    (returns (or pair #f)))
 (signature (assoc key alist =)
	    (returns (or pair #f)))
 (fragment "assoc")
 (source (srfi 1))
 (kind procedure))
((signature (assq key alist)
	    (returns (or pair #f)))
 (fragment "assq")
 (source (srfi 1))
 (kind procedure))
((signature (assv key alist)
	    (returns (or pair #f)))
 (fragment "assv")
 (source (srfi 1))
 (kind procedure))
((signature (alist-cons key datum alist)
	    (returns alist))
 (fragment "alist-cons")
 (source (srfi 1))
 (kind procedure))
((signature (alist-copy alist)
	    (returns alist))
 (fragment "alist-copy")
 (source (srfi 1))
 (kind procedure))
((signature (alist-delete key alist)
	    (returns alist))
 (signature (alist-delete key alist =)
	    (returns alist))
 (fragment "alist-delete")
 (source (srfi 1))
 (kind procedure))
((signature (alist-delete! key alist)
	    (returns alist))
 (signature (alist-delete! key alist =)
	    (returns alist))
 (fragment "alist-delete")
 (source (srfi 1))
 (kind procedure))
((signature (lset<= = list1 ...)
	    (returns boolean))
 (fragment "lset<=")
 (source (srfi 1))
 (kind procedure))
((signature (lset= = list1 list2 ...)
	    (returns boolean))
 (fragment "lset=")
 (source (srfi 1))
 (kind procedure))
((signature (lset-adjoin = list elt1 ...)
	    (returns list))
 (fragment "lset-adjoin")
 (source (srfi 1))
 (kind procedure))
((signature (lset-union = list1 ...)
	    (returns list))
 (fragment "lset-union")
 (source (srfi 1))
 (kind procedure))
((signature (lset-intersection = list1 list2 ...)
	    (returns list))
 (fragment "lset-intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-difference = list1 list2 ...)
	    (returns list))
 (fragment "lset-difference")
 (source (srfi 1))
 (kind procedure))
((signature (lset-xor = list1 ...)
	    (returns list))
 (fragment "lset-xor")
 (source (srfi 1))
 (kind procedure))
((signature (lset-diff+intersection = list1 list2 ...)
	    (returns list list))
 (fragment "lset-diff+intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-union! = list1 ...)
	    (returns list))
 (fragment "lset-union")
 (source (srfi 1))
 (kind procedure))
((signature (lset-intersection! = list1 list2 ...)
	    (returns list))
 (fragment "lset-intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-difference! = list1 list2 ...)
	    (returns list))
 (fragment "lset-difference")
 (source (srfi 1))
 (kind procedure))
((signature (lset-xor! = list1 ...)
	    (returns list))
 (fragment "lset-xor")
 (source (srfi 1))
 (kind procedure))
((signature (lset-diff+intersection! = list1 list2 ...)
	    (returns list list))
 (fragment "lset-diff+intersection")
 (source (srfi 1))
 (kind procedure))
((signature (set-car! pair object)
	    (returns unspecified))
 (fragment "set-car")
 (source (srfi 1))
 (kind procedure))
((signature (set-cdr! pair object)
	    (returns unspecified))
 (fragment "set-cdr")
 (source (srfi 1))
 (kind procedure))
((signature (and-let* (claws) body))
 (source (srfi 2))
 (kind syntax))
((signature (lset<= = list1 list2 ...)
	    (returns boolean))
 (source (srfi 3))
 (kind procedure))
((signature (lset= = list1 list2 ...)
	    (returns boolean))
 (source (srfi 3))
 (kind procedure))
((signature (lset-adjoin = list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-union = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-intersection = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-difference = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-xor = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-diff+intersection = list1 list2 ...)
	    (returns list list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-union! = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-intersection! = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-difference! = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-xor! = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-diff+intersection! = list1 list2 ...)
	    (returns list list))
 (source (srfi 3))
 (kind procedure))
((signature (union list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionq list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionv list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (union! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionq! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionv! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersection list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionv list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersection! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionv! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xor list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorq list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorv list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xor! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorq! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorv! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoin list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoinq list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoinv list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-difference list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differenceq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differencev list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-difference! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differenceq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differencev! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersection list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionv list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersection! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionv! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (s8vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s8vector n)
	    (returns s8vect))
 (signature (make-s8vector n s8value)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector s8value...)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-length s8vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-ref s8vect i)
	    (returns s8value))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-set! s8vect i s8value))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector->list s8vect)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s8vector s8list)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u8vector n)
	    (returns u8vect))
 (signature (make-u8vector n u8value)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector u8value...)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-length u8vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-ref u8vect i)
	    (returns u8value))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-set! u8vect i u8value))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector->list u8vect)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u8vector u8list)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s16vector n)
	    (returns s16vect))
 (signature (make-s16vector n s16value)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector s16value...)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-length s16vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-ref s16vect i)
	    (returns s16value))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-set! s16vect i s16value))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector->list s16vect)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s16vector s16list)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u16vector n)
	    (returns u16vect))
 (signature (make-u16vector n u16value)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector u16value...)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-length u16vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-ref u16vect i)
	    (returns u16value))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-set! u16vect i u16value))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector->list u16vect)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u16vector u16list)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s32vector n)
	    (returns s32vect))
 (signature (make-s32vector n s32value)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector s32value...)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-length s32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-ref s32vect i)
	    (returns s32value))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-set! s32vect i s32value))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector->list s32vect)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s32vector s32list)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u32vector n)
	    (returns u32vect))
 (signature (make-u32vector n u32value)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector u32value...)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-length u32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-ref u32vect i)
	    (returns u32value))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-set! u32vect i u32value))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector->list u32vect)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u32vector u32list)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s64vector n)
	    (returns s64vect))
 (signature (make-s64vector n s64value)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector s64value...)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-length s64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-ref s64vect i)
	    (returns s64value))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-set! s64vect i s64value))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector->list s64vect)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s64vector s64list)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u64vector n)
	    (returns u64vect))
 (signature (make-u64vector n u64value)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector u64value...)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-length u64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-ref u64vect i)
	    (returns u64value))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-set! u64vect i u64value))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector->list u64vect)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u64vector u64list)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-f32vector n)
	    (returns f32vect))
 (signature (make-f32vector n f32value)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector f32value...)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-length f32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-ref f32vect i)
	    (returns f32value))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-set! f32vect i f32value))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector->list f32vect)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->f32vector f32list)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-f64vector n)
	    (returns f64vect))
 (signature (make-f64vector n f64value)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector f64value...)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-length f64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-ref f64vect i)
	    (returns f64value))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-set! f64vect i f64value))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector->list f64vect)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->f64vector f64list)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (let ((parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let name ((parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let (name (parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let name ((parameter argument) ...
		       . (rest-parameter rest-argument ...))
	      body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let (name (parameter argument) ...
		       . (rest-parameter rest-argument ...))
	      body ...))
 (source (srfi 5))
 (kind syntax))
((signature (open-input-string string) (returns input-port))
 (source (srfi 6))
 (kind procedure))
((signature (open-output-string string) (returns output-port))
 (source (srfi 6))
 (kind procedure))
((signature (get-output-string output-port) (returns string))
 (source (srfi 6))
 (kind procedure))
((signature (program program-clause-0 program-clause ...))
 (source (srfi 7))
 (kind syntax))
((signature (receive formals expression body))
 (source (srfi 8))
 (kind syntax))
((signature (define-record-type type-name
		(constructor-name field-tag ...)
		predicate-name
	      field-spec ...))
 (source (srfi 9))
 (kind syntax))
((signature (let-values ((formals expression) ...) body))
 (source (srfi 11))
 (kind syntax))
((signature (let*-values ((formals expression) ...) body))
 (source (srfi 11))
 (kind syntax))
((signature (current-exception-handler))
 (source (srfi 12))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 12))
 (kind procedure))
((signature (handle-exceptions var handle-expr expr1 expr2 ...))
 (source (srfi 12))
 (kind syntax))
((signature (abort obj))
 (source (srfi 12))
 (kind procedure))
((signature (signal obj))
 (source (srfi 12))
 (kind procedure))
((signature (condition? obj))
 (source (srfi 12))
 (kind procedure))
((signature (make-property-condition kind-key prop-key value ...))
 (source (srfi 12))
 (kind procedure))
((signature (make-composite-condition condition ...))
 (source (srfi 12))
 (kind procedure))
((signature (condition-predicate kind-key))
 (source (srfi 12))
 (kind procedure))
((signature (condition-property-accessor kind-key prop-key))
 (source (srfi 12))
 (kind procedure))
((signature (string? obj) (returns boolean))
 (fragment "string-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-null? s) (returns boolean))
 (fragment "string-null-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-every char/char-set/pred s) (returns value))
 (signature (string-every char/char-set/pred s start) (returns value))
 (signature (string-every char/char-set/pred s start end) (returns value))
 (fragment "string-every")
 (source (srfi 13))
 (kind procedure))
((signature (string-any char/char-set/pred s) (returns value))
 (signature (string-any char/char-set/pred s start) (returns value))
 (signature (string-any char/char-set/pred s start end) (returns value))
 (fragment "string-any")
 (source (srfi 13))
 (kind procedure))
((signature (make-string len) (returns string))
 (signature (make-string len char) (returns string))
 (fragment "make-string")
 (source (srfi 13))
 (kind procedure))
((signature (string char1 ...) (returns string))
 (fragment "string")
 (source (srfi 13))
 (kind procedure))
((signature (string-tabulate proc len) (returns string))
 (fragment "string-tabulate")
 (source (srfi 13))
 (kind procedure))
((signature (string->list s) (returns char-list))
 (signature (string->list s start) (returns char-list))
 (signature (string->list s start end) (returns char-list))
 (fragment "list2string")
 (source (srfi 13))
 (kind procedure))
((signature (list->string char-list) (returns string))
 (source (srfi 13))
 (kind procedure))
((signature (reverse-list->string char-list) (returns string))
 (fragment "reverse-list2string")
 (source (srfi 13))
 (kind procedure))
((signature (string-join string-list) (returns string))
 (signature (string-join string-list delimiter) (returns string))
 (signature (string-join string-list delimiter grammar) (returns string))
 (fragment "string-join")
 (source (srfi 13))
 (kind procedure))
((signature (string-length s) (returns integer))
 (fragment "string-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-ref s i) (returns char))
 (fragment "string-ref")
 (source (srfi 13))
 (kind procedure))
((signature (string-copy s) (returns string))
 (signature (string-copy s start) (returns string))
 (signature (string-copy s start end) (returns string))
 (fragment "substring/shared")
 (source (srfi 13))
 (kind procedure))
((signature (substring/shared s start) (returns string))
 (signature (substring/shared s start end) (returns string))
 (source (srfi 13))
 (kind procedure))
((signature (string-copy! target tstart s) (returns unspecified))
 (signature (string-copy! target tstart s start) (returns unspecified))
 (signature (string-copy! target tstart s start end) (returns unspecified))
 (fragment "string-copy!")
 (source (srfi 13))
 (kind procedure))
((signature (string-take s nchars) (returns string))
 (fragment "string-take")
 (source (srfi 13))
 (kind procedure))
((signature (string-drop s nchars) (returns string))
 (fragment "string-drop")
 (source (srfi 13))
 (kind procedure))
((signature (string-take-right s nchars) (returns string))
 (fragment "string-take-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-drop-right s nchars) (returns string))
 (fragment "string-drop-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-pad s len) (returns string))
 (signature (string-pad s len char) (returns string))
 (signature (string-pad s len char start) (returns string))
 (signature (string-pad s len char start end) (returns string))
 (fragment "string-pad")
 (source (srfi 13))
 (kind procedure))
((signature (string-pad-right s len) (returns string))
 (signature (string-pad-right s len char) (returns string))
 (signature (string-pad-right s len char start) (returns string))
 (signature (string-pad-right s len char start end) (returns string))
 (fragment "string-pad-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim s) (returns string))
 (signature (string-trim s char/char-set/pred) (returns string))
 (signature (string-trim s char/char-set/pred start) (returns string))
 (signature (string-trim s char/char-set/pred start end) (returns string))
 (fragment "string-trim")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim-right s) (returns string))
 (signature (string-trim-right s char/char-set/pred) (returns string))
 (signature (string-trim-right s char/char-set/pred start) (returns string))
 (signature (string-trim-right s char/char-set/pred start end) (returns string))
 (fragment "string-trim-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim-both s) (returns string))
 (signature (string-trim-both s char/char-set/pred) (returns string))
 (signature (string-trim-both s char/char-set/pred start) (returns string))
 (signature (string-trim-both s char/char-set/pred start end) (returns string))
 (fragment "string-trim-both")
 (source (srfi 13))
 (kind procedure))
((signature (string-set! s i char) (returns unspecified))
 (fragment "string-set!")
 (source (srfi 13))
 (kind procedure))
((signature (string-fill! s char) (returns unspecified))
 (signature (string-fill! s char start) (returns unspecified))
 (signature (string-fill! s char start end) (returns unspecified))
 (fragment "string-fill!")
 (source (srfi 13))
 (kind procedure))
((signature (string-compare s1 s2 proc< proc= proc>) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1 start2) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1 start2 end2) (returns values))
 (fragment "string-compare")
 (source (srfi 13))
 (kind procedure))
((signature (string-compare-ci s1 s2 proc< proc= proc>) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1 end1 start2) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1 end1 start2 end2) (returns values))
 (fragment "string-compare-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string= s1 s2) (returns boolean))
 (signature (string= s1 s2 start1) (returns boolean))
 (signature (string= s1 s2 start1 end1) (returns boolean))
 (signature (string= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string=")
 (source (srfi 13))
 (kind procedure))
((signature (string<> s1 s2) (returns boolean))
 (signature (string<> s1 s2 start1) (returns boolean))
 (signature (string<> s1 s2 start1 end1) (returns boolean))
 (signature (string<> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string<> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<>")
 (source (srfi 13))
 (kind procedure))
((signature (string< s1 s2) (returns boolean))
 (signature (string< s1 s2 start1) (returns boolean))
 (signature (string< s1 s2 start1 end1) (returns boolean))
 (signature (string< s1 s2 start1 end1 start2) (returns boolean))
 (signature (string< s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<")
 (source (srfi 13))
 (kind procedure))
((signature (string> s1 s2) (returns boolean))
 (signature (string> s1 s2 start1) (returns boolean))
 (signature (string> s1 s2 start1 end1) (returns boolean))
 (signature (string> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string>")
 (source (srfi 13))
 (kind procedure))
((signature (string<= s1 s2) (returns boolean))
 (signature (string<= s1 s2 start1) (returns boolean))
 (signature (string<= s1 s2 start1 end1) (returns boolean))
 (signature (string<= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string<= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<=")
 (source (srfi 13))
 (kind procedure))
((signature (string>= s1 s2) (returns boolean))
 (signature (string>= s1 s2 start1) (returns boolean))
 (signature (string>= s1 s2 start1 end1) (returns boolean))
 (signature (string>= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string>= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string>=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci= s1 s2) (returns boolean))
 (signature (string-ci= s1 s2 start1) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci<> s1 s2) (returns boolean))
 (signature (string-ci<> s1 s2 start1) (returns boolean))
 (signature (string-ci<> s1 s2 start1) (returns boolean))
 (signature (string-ci<> s1 s2 start1 end1) (returns boolean))
 (signature (string-ci<> s1 s2 start1 end1 start2) (returns boolean))
 (fragment "string-ci<>")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci< s1 s2) (returns boolean))
 (signature (string-ci< s1 s2 start1) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci<")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci> s1 s2) (returns boolean))
 (signature (string-ci> s1 s2 start1) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci>")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci<= s1 s2) (returns boolean))
 (signature (string-ci<= s1 s2 start1) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci<=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci>= s1 s2) (returns boolean))
 (signature (string-ci>= s1 s2 start1) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci>=")
 (source (srfi 13))
 (kind procedure))
((signature (string-hash s) (returns integer))
 (signature (string-hash s bound) (returns integer))
 (signature (string-hash s bound start) (returns integer))
 (signature (string-hash s bound start end) (returns integer))
 (fragment "string-hash")
 (source (srfi 13))
 (kind procedure))
((signature (string-hash-ci s) (returns integer))
 (signature (string-hash-ci s bound) (returns integer))
 (signature (string-hash-ci s bound start) (returns integer))
 (signature (string-hash-ci s bound start end) (returns integer))
 (fragment "string-hash-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-length s1 s2) (returns integer))
 (signature (string-prefix-length s1 s2 start1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-prefix-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-length s1 s2) (returns integer))
 (signature (string-suffix-length s1 s2 start1) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1 start2) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-suffix-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-length-ci s1 s2) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1 start2) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-prefix-length-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-length-ci s1 s2) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1 start2) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-suffix-length-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix? s1 s2) (returns boolean))
 (signature (string-prefix? s1 s2 start1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-prefix-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix? s1 s2) (returns boolean))
 (signature (string-suffix? s1 s2 start1) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-suffix-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-ci? s1 s2) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-prefix-ci-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-ci? s1 s2) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-suffix-ci-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-index s char/char-set/pred) (returns integer or #f))
 (signature (string-index s char/char-set/pred start) (returns integer or #f))
 (signature (string-index s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-index")
 (source (srfi 13))
 (kind procedure))
((signature (string-index-right s char/char-set/pred) (returns integer or #f))
 (signature (string-index-right s char/char-set/pred start) (returns integer or #f))
 (signature (string-index-right s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-index-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-skip s char/char-set/pred) (returns integer or #f))
 (signature (string-skip s char/char-set/pred start) (returns integer or #f))
 (signature (string-skip s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-skip")
 (source (srfi 13))
 (kind procedure))
((signature (string-skip-right s char/char-set/pred) (returns integer or #f))
 (signature (string-skip-right s char/char-set/pred start) (returns integer or #f))
 (signature (string-skip-right s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-skip-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-count s char/char-set/pred) (returns integer))
 (signature (string-count s char/char-set/pred start) (returns integer))
 (signature (string-count s char/char-set/pred start end) (returns integer))
 (fragment "string-count")
 (source (srfi 13))
 (kind procedure))
((signature (string-contains s1 s2) (returns integer or false))
 (signature (string-contains s1 s2 start1) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1 start2) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1 start2 end2) (returns integer or false))
 (fragment "string-contains")
 (source (srfi 13))
 (kind procedure))
((signature (string-contains-ci s1 s2) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1 start2) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1 start2 end2) (returns integer or false))
 (fragment "string-contains-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-titlecase s) (returns string))
 (signature (string-titlecase s start) (returns string))
 (signature (string-titlecase s start end) (returns string))
 (fragment "string-titlecase")
 (source (srfi 13))
 (kind procedure))
((signature (string-titlecase! s) (returns unspecified))
 (signature (string-titlecase! s start) (returns unspecified))
 (signature (string-titlecase! s start end) (returns unspecified))
 (fragment "string-titlecase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-upcase s) (returns string))
 (signature (string-upcase s start) (returns string))
 (signature (string-upcase s start end) (returns string))
 (fragment "string-upcase")
 (source (srfi 13))
 (kind procedure))
((signature (string-upcase! s) (returns unspecified))
 (signature (string-upcase! s start) (returns unspecified))
 (signature (string-upcase! s start end) (returns unspecified))
 (fragment "string-upcase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-downcase s) (returns string))
 (signature (string-downcase s start) (returns string))
 (signature (string-downcase s start end) (returns string))
 (fragment "string-downcase")
 (source (srfi 13))
 (kind procedure))
((signature (string-downcase! s) (returns unspecified))
 (signature (string-downcase! s start) (returns unspecified))
 (signature (string-downcase! s start end) (returns unspecified))
 (fragment "string-downcase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-reverse s) (returns string))
 (signature (string-reverse s start) (returns string))
 (signature (string-reverse s start end) (returns string))
 (fragment "string-reverse")
 (source (srfi 13))
 (kind procedure))
((signature (string-reverse! s) (returns unspecified))
 (signature (string-reverse! s start) (returns unspecified))
 (signature (string-reverse! s start end) (returns unspecified))
 (fragment "string-reverse!")
 (source (srfi 13))
 (kind procedure))
((signature (string-append s1 ...) (returns string))
 (fragment "string-append")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate string-list) (returns string))
 (fragment "string-concatenate")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate/shared string-list) (returns string))
 (fragment "string-concatenate/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-append/shared s1 ...) (returns string))
 (fragment "string-append/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate-reverse string-list) (returns string))
 (signature (string-concatenate-reverse string-list final-string) (returns string))
 (signature (string-concatenate-reverse string-list final-string end) (returns string))
 (fragment "string-concatenate-reverse")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate-reverse/shared string-list) (returns string))
 (signature (string-concatenate-reverse/shared string-list final-string) (returns string))
 (signature (string-concatenate-reverse/shared string-list final-string end) (returns string))
 (fragment "string-concatenate-reverse/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-map proc s) (returns string))
 (signature (string-map proc s start) (returns string))
 (signature (string-map proc s start end) (returns string))
 (fragment "string-map")
 (source (srfi 13))
 (kind procedure))
((signature (string-map! proc s) (returns unspecified))
 (signature (string-map! proc s start) (returns unspecified))
 (signature (string-map! proc s start end) (returns unspecified))
 (fragment "string-map!")
 (source (srfi 13))
 (kind procedure))
((signature (string-fold kons knil s) (returns value))
 (signature (string-fold kons knil s start) (returns value))
 (signature (string-fold kons knil s start end) (returns value))
 (fragment "string-fold")
 (source (srfi 13))
 (kind procedure))
((signature (string-fold-right kons knil s) (returns value))
 (signature (string-fold-right kons knil s start) (returns value))
 (signature (string-fold-right kons knil s start end) (returns value))
 (fragment "string-fold-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-unfold p f g seed) (returns string))
 (signature (string-unfold p f g seed base) (returns string))
 (signature (string-unfold p f g seed base make-final) (returns string))
 (fragment "string-unfold")
 (source (srfi 13))
 (kind procedure))
((signature (string-unfold-right p f g seed) (returns string))
 (signature (string-unfold-right p f g seed base) (returns string))
 (signature (string-unfold-right p f g seed base make-final) (returns string))
 (fragment "string-unfold-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-for-each proc s) (returns unspecified))
 (signature (string-for-each proc s start) (returns unspecified))
 (signature (string-for-each proc s start end) (returns unspecified))
 (fragment "string-for-each")
 (source (srfi 13))
 (kind procedure))
((signature (string-for-each-index proc s) (returns unspecified))
 (signature (string-for-each-index proc s start) (returns unspecified))
 (signature (string-for-each-index proc s start end) (returns unspecified))
 (fragment "string-for-each-index")
 (source (srfi 13))
 (kind procedure))
((signature (xsubstring s from) (returns string))
 (signature (xsubstring s from to) (returns string))
 (signature (xsubstring s from to start) (returns string))
 (signature (xsubstring s from to start end) (returns string))
 (fragment "xsubstring")
 (source (srfi 13))
 (kind procedure))
((signature (string-xcopy! target tstart s sfrom) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto start) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto start end) (returns unspecified))
 (fragment "string-xcopy!")
 (source (srfi 13))
 (kind procedure))
((signature (string-replace s1 s2 start1 end1) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2 end2) (returns string))
 (fragment "string-replace")
 (source (srfi 13))
 (kind procedure))
((signature (string-tokenize s) (returns list))
 (signature (string-tokenize s token-set) (returns list))
 (signature (string-tokenize s token-set start) (returns list))
 (signature (string-tokenize s token-set start end) (returns list))
 (fragment "string-tokenize")
 (source (srfi 13))
 (kind procedure))
((signature (string-filter char/char-set/pred s) (returns string))
 (signature (string-filter char/char-set/pred s start) (returns string))
 (signature (string-filter char/char-set/pred s start end) (returns string))
 (fragment "string-filter")
 (source (srfi 13))
 (kind procedure))
((signature (string-delete har/char-set/pred s) (returns string))
 (signature (string-delete har/char-set/pred s start) (returns string))
 (signature (string-delete har/char-set/pred s start end) (returns string))
 (fragment "string-delete")
 (source (srfi 13))
 (kind procedure))
((signature (string-parse-start+end proc s args) (returns))
 (signature (string-parse-start+end proc s args) (returns rest))
 (signature (string-parse-start+end proc s args) (returns rest start))
 (signature (string-parse-start+end proc s args) (returns rest start end))
 (fragment "string-parse-start+end")
 (source (srfi 13))
 (kind procedure))
((signature (string-parse-final-start+end proc s args) (returns))
 (signature (string-parse-final-start+end proc s args) (returns start))
 (signature (string-parse-final-start+end proc s args) (returns start end))
 (fragment "string-parse-final-start+end")
 (source (srfi 13))
 (kind procedure))
((signature (let-string-start+end (start end) proc-exp s-exp args-exp body ...)
	    (let-string-start+end (start end rest) proc-exp s-exp args-exp body ...)
	    (returns values))
 (fragment "let-string-start+end")
 (source (srfi 13))
 (kind syntax))
((signature (check-substring-spec proc s start end) (returns unspecified))
 (fragment "check-substring-spec")
 (source (srfi 13))
 (kind procedure))
((signature (substring-spec-ok? s start end) (returns boolean))
 (fragment "substring-spec-ok-p")
 (source (srfi 13))
 (kind procedure))
((signature (make-kmp-restart-vector s) (returns integer-vector))
 (signature (make-kmp-restart-vector s c=) (returns integer-vector))
 (signature (make-kmp-restart-vector s c= start) (returns integer-vector))
 (signature (make-kmp-restart-vector s c= start end) (returns integer-vector))
 (fragment "make-kmp-restart-vector")
 (source (srfi 13))
 (kind procedure))
((signature (kmp-step pat rv c i c= p-start) (returns integer))
 (fragment "kmp-step")
 (source (srfi 13))
 (kind procedure))
((signature (string-kmp-partial-search pat rv s i) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c=) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start s-start) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start s-start s-end) (returns integer))
 (fragment "string-kmp-partial-search")
 (source (srfi 13))
 (kind procedure))
((signature char-set:lower-case)
 (fragment "char-set:lower-case")
 (source (srfi 14))
 (kind other))
((signature char-set:lower-case)
 (fragment "char-set:lower-case")
 (source (srfi 14))
 (kind other))
((signature char-set:upper-case)
 (fragment "char-set:upper-case")
 (source (srfi 14))
 (kind other))
((signature char-set:title-case)
 (fragment "char-set:title-case")
 (source (srfi 14))
 (kind other))
((signature char-set:letter)
 (fragment "char-set:letter")
 (source (srfi 14))
 (kind other))
((signature char-set:digit)
 (fragment "char-set:digit")
 (source (srfi 14))
 (kind other))
((signature char-set:letter+digit)
 (fragment "char-set:letter+digit")
 (source (srfi 14))
 (kind other))
((signature char-set:graphic)
 (fragment "char-set:graphic")
 (source (srfi 14))
 (kind other))
((signature char-set:printing)
 (fragment "char-set:printing")
 (source (srfi 14))
 (kind other))
((signature char-set:whitespace)
 (fragment "char-set:whitespace")
 (source (srfi 14))
 (kind other))
((signature char-set:iso-control)
 (fragment "char-set:iso-control")
 (source (srfi 14))
 (kind other))
((signature char-set:punctuation)
 (fragment "char-set:punctuation")
 (source (srfi 14))
 (kind other))
((signature char-set:symbol)
 (fragment "char-set:symbol")
 (source (srfi 14))
 (kind other))
((signature char-set:hex-digit)
 (fragment "char-set:hex-digit")
 (source (srfi 14))
 (kind other))
((signature char-set:blank)
 (fragment "char-set:blank")
 (source (srfi 14))
 (kind other))
((signature char-set:ascii)
 (fragment "char-set:ascii")
 (source (srfi 14))
 (kind other))
((signature char-set:empty)
 (fragment "char-set:empty")
 (source (srfi 14))
 (kind other))
((signature char-set:full)
 (fragment "char-set:full")
 (source (srfi 14))
 (kind other))
((signature (char-set? obj)
	    (returns boolean))
 (fragment "char-set-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set= cs1 ...)
	    (returns boolean))
 (fragment "char-set=")
 (source (srfi 14))
 (kind procedure))
((signature (char-set<= cs1 ...)
	    (returns boolean))
 (fragment "char-set<=")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-hash cs)
	    (returns integer))
 (signature (char-set-hash cs bound)
	    (returns integer))
 (fragment "char-set-hash")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-cursor cset)
	    (returns cursor))
 (fragment "char-set-cursor")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-ref cset cursor)
	    (returns char))
 (fragment "char-set-ref")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-cursor-next cset cursor)
	    (returns cursor))
 (fragment "char-set-cursor-next")
 (source (srfi 14))
 (kind procedure))
((signature (end-of-char-set? cursor)
	    (returns boolean))
 (fragment "end-of-char-set-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-fold kons knil cs)
	    (returns object))
 (fragment "char-set-fold")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-unfold f p g seed)
	    (returns char-set))
 (signature (char-set-unfold f p g seed base-cs)
	    (returns char-set))
 (fragment "char-set-unfold")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-unfold! f p g seed base-cs)
	    (returns char-set))
 (fragment "char-set-unfold!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-for-each proc cs)
	    (returns unspecified))
 (fragment "char-set-for-each")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-map proc cs)
	    (returns char-set))
 (fragment "char-set-map")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-copy cs)
	    (returns char-set))
 (fragment "char-set-copy")
 (source (srfi 14))
 (kind procedure))
((signature (char-set char1 ...)
	    (returns char-set))
 (fragment "char-set")
 (source (srfi 14))
 (kind procedure))
((signature (list->char-set char-list)
	    (returns char-set))
 (signature (list->char-set char-list base-cs)
	    (returns char-set))
 (fragment "list->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (list->char-set! char-list base-cs)
	    (returns char-set))
 (fragment "list->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (string->char-set s)
	    (returns char-set))
 (signature (string->char-set s base-cs)
	    (returns char-set))
 (fragment "string->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (string->char-set! s base-cs)
	    (returns char-set))
 (fragment "string->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-filter pred cs)
	    (returns char-set))
 (signature (char-set-filter pred cs base-cs)
	    (returns char-set))
 (fragment "char-set-filter")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-filter! pred cs base-cs)
	    (returns char-set))
 (fragment "char-set-filter!")
 (source (srfi 14))
 (kind procedure))
((signature (ucs-range->char-set lower upper)
	    (returns char-set))
 (signature (ucs-range->char-set lower upper error?)
	    (returns char-set))
 (signature (ucs-range->char-set lower upper error? base-cs)
	    (returns char-set))
 (fragment "ucs-range->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (ucs-range->char-set! lower upper error? base-cs)
	    (returns char-set))
 (fragment "ucs-range->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (->char-set x)
	    (returns char-set))
 (fragment "->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-size cs)
	    (returns integer))
 (fragment "char-set-size")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-count pred cs)
	    (returns integer))
 (fragment "char-set-count")
 (source (srfi 14))
 (kind procedure))
((signature (char-set->list cs)
	    (returns character-list))
 (fragment "char-set->list")
 (source (srfi 14))
 (kind procedure))
((signature (char-set->string cs)
	    (returns string))
 (fragment "char-set->string")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-contains? cs char)
	    (returns boolean))
 (fragment "char-set-contains-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-every pred cs)
	    (returns boolean))
 (fragment "char-set-every")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-any pred cs)
	    (returns boolean))
 (fragment "char-set-any")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-adjoin cs char1 ...)
	    (returns char-set))
 (fragment "char-set-adjoin")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-delete cs char1 ...)
	    (returns char-set))
 (fragment "char-set-delete")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-adjoin! cs char1 ...)
	    (returns char-set))
 (fragment "char-set-adjoin!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-delete! cs char1 ...)
	    (returns char-set))
 (fragment "char-set-delete!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-complement cs)
	    (returns char-set))
 (fragment "char-set-complement")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-union cs1 ...)
	    (returns char-set))
 (fragment "char-set-union")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-intersection cs1 ...)
	    (returns char-set))
 (fragment "char-set-intersection")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-difference cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-difference")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-xor cs1 ...)
	    (returns char-set))
 (fragment "char-set-xor")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-diff+intersection cs1 cs2 ...)
	    (returns char-set char-set))
 (fragment "char-set-diff+intersection")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-complement! cs)
	    (returns char-set))
 (fragment "char-set-complement!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-union! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-union!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-intersection! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-intersection!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-difference! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-difference!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-xor! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-xor!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-diff+intersection! cs1 cs2 cs3 ...)
	    (returns char-set char-set))
 (fragment "char-set-diff+intersection!")
 (source (srfi 14))
 (kind procedure))
((signature (fluid-let bindings body))
 (source (srfi 15))
 (kind syntax))
((signature (case-lambda clause ...))
 (source (srfi 16))
 (kind syntax))
((signature (set! (proc arg ...) value))
 (source (srfi 17))
 (kind syntax))
((signature (getter-with-setter getter setter))
 (source (srfi 17))
 (kind procedure))
((signature (current-thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-thread thunk))
 (signature (make-thread thunk name))
 (source (srfi 18))
 (kind procedure))
((signature (thread-name thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-specific thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-specific-set! thread obj))
 (source (srfi 18))
 (kind procedure))
((signature (thread-start! thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-yield!))
 (source (srfi 18))
 (kind procedure))
((signature (thread-sleep! timeout))
 (source (srfi 18))
 (kind procedure))
((signature (thread-terminate! thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-join! thread))
 (signature (thread-join! thread timeout))
 (signature (thread-join! thread timeout timeout-val))
 (source (srfi 18))
 (kind procedure))
((signature (mutex? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-mutex))
 (signature (make-mutex name))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-name mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-specific mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-specific-set! mutex obj))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-state mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-lock! mutex))
 (signature (mutex-lock! mutex timeout))
 (signature (mutex-lock! mutex timeout thread))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-unlock! mutex))
 (signature (mutex-unlock! mutex condition-variable))
 (signature (mutex-unlock! mutex condition-variable timeout))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-condition-variable))
 (signature (make-condition-variable name))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-name condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-specific condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-specific-set! condition-variable obj))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-signal! condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-broadcast! condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (current-time))
 (source (srfi 18))
 (kind procedure))
((signature (time?))
 (source (srfi 18))
 (kind procedure))
((signature (time->seconds time))
 (source (srfi 18))
 (kind procedure))
((signature (seconds->time x))
 (source (srfi 18))
 (kind procedure))
((signature (current-exception-handler))
 (source (srfi 18))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 18))
 (kind procedure))
((signature (raise obj))
 (source (srfi 18))
 (kind procedure))
((signature (join-timeout-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (abandoned-mutex-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (terminated-thread-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (uncaught-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (uncaught-exception-reason exc))
 (source (srfi 18))
 (kind procedure))
((signature time-duration)
 (source (srfi 19))
 (kind constant))
((signature time-monotonic)
 (source (srfi 19))
 (kind constant))
((signature time-process)
 (source (srfi 19))
 (kind constant))
((signature time-tai)
 (source (srfi 19))
 (kind constant))
((signature time-thread)
 (source (srfi 19))
 (kind constant))
((signature time-utc)
 (source (srfi 19))
 (kind constant))
((signature (current-date)
	    (returns date))
 (signature (current-date tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (current-julian-day)
	    (returns jdn))
 (source (srfi 19))
 (kind procedure))
((signature (current-modified-julian-day)
	    (returns mjdn))
 (source (srfi 19))
 (kind procedure))
((signature (current-time)
	    (returns time))
 (signature (current-time time-type)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (time-resolution)
	    (returns integer))
 (signature (time-resolution time-type)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (make-time type nanosecond second)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (time? object)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time-type time)
	    (returns time-type))
 (source (srfi 19))
 (kind procedure))
((signature (time-nanosecond time)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (time-second time)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-type! time time-type))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-nanosecond! time integer))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-second! time integer))
 (source (srfi 19))
 (kind procedure))
((signature (copy-time time1)
	    (returns time2))
 (source (srfi 19))
 (kind procedure))
((signature (time<=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time<? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time>=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time>? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time-difference time1 time2)
	    (returns time-duration))
 (source (srfi 19))
 (kind procedure))
((signature (time-difference! time1 time2)
	    (returns time-duration))
 (source (srfi 19))
 (kind procedure))
((signature (add-duration time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (add-duration! time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (subtract-duration time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (subtract-duration! time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (make-date nanosecond second minute hour day month year zone-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (date? date)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (date-nanosecond date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-second date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-minute date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-hour date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-month date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-year date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-zone-offset date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-year-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-week-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-week-number date day-of-week-starting-week)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date->julian-day date)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (date->modified-julian-day date)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-monotonic date)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-tai date)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-utc date)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->date jd)
	    (returns date))
 (signature (julian-day->date jd  tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-monotonic jd)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-tai jd)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-utc jd)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->date mjd)
	    (returns date))
 (signature (modified-julian-day->date mjd tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-monotonic mjd)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-tai mjd)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-utc mjd)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->date time-monotonic)
	    (returns date))
 (signature (time-monotonic->date time-monotonic tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->julian-day time-monotonic)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->modified-julian-day time-monotonic)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-tai time-monotonic)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-tai! time-monotonic)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-utc time-monotonic)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-utc! time-monotonic)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->date time-tai)
	    (returns date))
 (signature (time-tai->date time-tai tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->julian-day time-tai)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->modified-julian-day time-tai)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-monotonic time-tai)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-monotonic! time-tai)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-utc time-tai)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-utc! time-tai)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->date time-utc)
	    (returns time-utc))
 (signature (time-utc->date time-utc tz-offset)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->julian-day time-utc)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->modified-julian-day time-utc)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-monotonic time-utc)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-monotonic! time-utc)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-tai time-utc)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-tai! time-utc)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (date->string date)
	    (returns string))
 (signature (date->string date format-string)
	    (returns string))
 (source (srfi 19))
 (kind procedure))
((signature (string->date input-string template-string)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (define-class class-name superclass-name
	      (field-specification ...)))
 (signature (define-class class-name superclass-name
	      (field-specification ...)
	      :prototype))
 (source (srfi 20))
 (kind syntax))
((signature (define-class class-name superclass-name
	      (field-specification ...)))
 (signature (define-class class-name superclass-name
	      (field-specification ...)
	      :prototype))
 (source (srfi 20))
 (kind syntax))
((signature (define-generic (generic-name variable ...)))
 (signature (define-generic (generic-name variable ...)
	      default-body))
 (source (srfi 20))
 (kind syntax))
((signature (define-method (generic-name variable ...) body))
 (source (srfi 20))
 (kind syntax))
((signature (instantiate class-name
			 :mono-field-name form
			 :poly-field-name form ...
			 :poly-field-length size
			 ... ))
 (source (srfi 20))
 (kind syntax))
((signature (object? value))
 (source (srfi 20))
 (kind procedure))
((signature (object->class object))
 (source (srfi 20))
 (kind procedure))
((signature (is-a? value class))
 (source (srfi 20))
 (kind procedure))
((signature (subclass? class super-class))
 (source (srfi 20))
 (kind procedure))
((signature Object-class)
 (source (srfi 20))
 (kind other))
((signature (Class? value))
 (source (srfi 20))
 (kind procedure))
((signature (Class-name class))
 (source (srfi 20))
 (kind procedure))
((signature (Class-super-class class))
 (source (srfi 20))
 (kind procedure))
((signature (Class-field class index))
 (source (srfi 20))
 (kind procedure))
((signature (Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (Field-name field))
 (source (srfi 20))
 (kind procedure))
((signature (Field-mutable? field))
 (source (srfi 20))
 (kind procedure))
((signature (Field-initializer field))
 (source (srfi 20))
 (kind procedure))
((signature (Mono-Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (Poly-Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (field-value object field))
 (signature (field-value object field index))
 (source (srfi 20))
 (kind procedure))
((signature (set-field-value! object value field))
 (signature (set-field-value! object value field index))
 (source (srfi 20))
 (kind procedure))
((signature (field-length object field))
 (source (srfi 20))
 (kind procedure))
((signature (initialize! object))
 (source (srfi 20))
 (kind procedure))
((signature (clone object))
 (source (srfi 20))
 (kind procedure))
((signature (current-thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-thread thunk))
 (signature (make-thread thunk name))
 (source (srfi 21))
 (kind procedure))
((signature (thread-name thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-specific thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-specific-set! thread obj))
 (source (srfi 21))
 (kind procedure))
((signature (thread-base-priority thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-base-priority-set! thread priority))
 (source (srfi 21))
 (kind procedure))
((signature (thread-priority-boost thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-priority-boost-set! thread priority-boost))
 (source (srfi 21))
 (kind procedure))
((signature (thread-quantum thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-quantum-set! thread quantum))
 (source (srfi 21))
 (kind procedure))
((signature (thread-start! thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-yield!))
 (source (srfi 21))
 (kind procedure))
((signature (thread-sleep! timeout))
 (source (srfi 21))
 (kind procedure))
((signature (thread-terminate! thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-join! thread))
 (signature (thread-join! thread timeout))
 (signature (thread-join! thread timeout timeout-val))
 (source (srfi 21))
 (kind procedure))
((signature (mutex? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-mutex))
 (signature (make-mutex name))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-name mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-specific mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-specific-set! mutex obj))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-state mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-lock! mutex))
 (signature (mutex-lock! mutex timeout))
 (signature (mutex-lock! mutex timeout thread))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-unlock! mutex))
 (signature (mutex-unlock! mutex condition-variable))
 (signature (mutex-unlock! mutex condition-variable timeout))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-condition-variable))
 (signature (make-condition-variable name))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-name condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-specific condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-specific-set! condition-variable obj))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-signal! condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-broadcast! condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (current-time))
 (source (srfi 21))
 (kind procedure))
((signature (time?))
 (source (srfi 21))
 (kind procedure))
((signature (time->seconds time))
 (source (srfi 21))
 (kind procedure))
((signature (seconds->time x))
 (source (srfi 21))
 (kind procedure))
((signature (current-exception-handler))
 (source (srfi 21))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 21))
 (kind procedure))
((signature (raise obj))
 (source (srfi 21))
 (kind procedure))
((signature (join-timeout-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (abandoned-mutex-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (terminated-thread-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (uncaught-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (uncaught-exception-reason exc))
 (source (srfi 21))
 (kind procedure))
((signature (error reason arg ...))
 (source (srfi 23))
 (kind procedure))
((signature (array? obj))
 (source (srfi 25))
 (kind procedure))
((signature (make-array shape))
 (signature (make-array shape obj))
 (source (srfi 25))
 (kind procedure))
((signature (shape bound ...))
 (source (srfi 25))
 (kind procedure))
((signature (array shape obj ...))
 (source (srfi 25))
 (kind procedure))
((signature (array-rank array))
 (source (srfi 25))
 (kind procedure))
((signature (array-start array k))
 (source (srfi 25))
 (kind procedure))
((signature (array-end array k))
 (source (srfi 25))
 (kind procedure))
((signature (array-ref array k ...))
 (signature (array-ref array index))
 (source (srfi 25))
 (kind procedure))
((signature (array-set! array k ... obj))
 (signature (array-set! array index obj))
 (source (srfi 25))
 (kind procedure))
((signature (share-array array shape proc))
 (source (srfi 25))
 (kind procedure))
((signature (cut slot-or-expr-0 slot-or-expr ...))
 (signature (cut slot-or-expr-0 slot-or-expr ... rest-slot))
 (source (srfi 26))
 (kind syntax))
((signature (cute slot-or-expr-0 slot-or-expr ...))
 (signature (cute slot-or-expr-0 slot-or-expr ... rest-slot))
 (source (srfi 26))
 (kind syntax))
((signature (random-integer n) (returns x))
 (source (srfi 27))
 (kind procedure))
((signature (random-real) (returns x))
 (source (srfi 27))
 (kind procedure))
((signature (make-random-source) (returns s))
 (source (srfi 27))
 (kind procedure))
((signature (random-source? obj) (returns bool))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-state-ref s) (returns state))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-state-set! s state))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-randomize! s))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-pseudo-randomize! s i j))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-make-integers s) (returns rand))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-make-reals s unit) (returns rand))
 (source (srfi 27))
 (kind procedure))
((signature (format format-string obj ...) (returns string))
 (source (srfi 28))
 (kind procedure))
((signature (current-language) (returns symbol))
 (source (srfi 29))
 (kind procedure))
((signature (current-language symbol) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (current-country) (returns symbol))
 (source (srfi 29))
 (kind procedure))
((signature (current-country symbol) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (current-locale-details) (returns list-of-symbols))
 (source (srfi 29))
 (kind procedure))
((signature (current-locale-details list-of-symbols) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (declare-bundle! bundle-specifier association-list)
	    (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (store-bundle bundle-specifier) (returns boolean))
 (source (srfi 29))
 (kind procedure))
((signature (load-bundle! bundle-specifier) (returns boolean))
 (source (srfi 29))
 (kind procedure))
((signature (localized-template package-name message-template-name)
	    (returns (or string #f)))
 (source (srfi 29))
 (kind procedure))
((signature (rec variable expression))
 (signature (rec (variable-0 variable ...) body))
 (source (srfi 31))
 (kind syntax))
((signature (with-exception-handler handler thunk))
 (source (srfi 34))
 (kind procedure))
((signature (guard (var clause-0 clause ...) body))
 (source (srfi 34))
 (kind syntax))
((signature (raise obj))
 (source (srfi 34))
 (kind procedure))
((signature (make-condition-type id parent field-names))
 (source (srfi 35))
 (kind procedure))
((signature (condition-type? thing))
 (source (srfi 35))
 (kind procedure))
((signature (make-condition type field-name value ...))
 (source (srfi 35))
 (kind procedure))
((signature (condition? thing))
 (source (srfi 35))
 (kind procedure))
((signature (condition-has-type? condition condition-type))
 (source (srfi 35))
 (kind procedure))
((signature (condition-ref condition field-name))
 (source (srfi 35))
 (kind procedure))
((signature (make-compound-condition condition-0 condition ...))
 (source (srfi 35))
 (kind procedure))
((signature (extract-condition condition condition-type))
 (source (srfi 35))
 (kind procedure))
((signature (define-condition-type condition-type supertype predicate field-spec ...))
 (source (srfi 35))
 (kind syntax))
((signature (condition type-field-binding ...))
 (source (srfi 35))
 (kind syntax))
((signature &condition)
 (source (srfi 35))
 (kind other))
((signature &message)
 (source (srfi 35))
 (kind other))
((signature &serious)
 (source (srfi 35))
 (kind other))
((signature &error)
 (source (srfi 35))
 (kind other))
((signature &error)
 (source (srfi 36))
 (kind other))
((signature &i/o-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-port-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-read-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-write-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-closed-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-filename-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-malformed-filename-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-protection-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-is-read-only-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-already-exists-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-no-such-file-error)
 (source (srfi 36))
 (kind other))
((signature &read-error)
 (source (srfi 36))
 (kind other))
((signature (option names required-arg? optional-arg? option-proc))
 (source (srfi 36))
 (kind procedure))
((signature (option-names option))
 (source (srfi 36))
 (kind procedure))
((signature (option-required-arg? option))
 (source (srfi 36))
 (kind procedure))
((signature (option-optional-arg? option))
 (source (srfi 36))
 (kind procedure))
((signature (option-processor option))
 (source (srfi 36))
 (kind procedure))
((signature (args-fold args options unrecognized-option-proc operand-proc seeds ...))
 (source (srfi 36))
 (kind procedure))
((signature (write-with-shared-structure obj))
 (signature (write-with-shared-structure obj port))
 (signature (write-with-shared-structure obj port optarg))
 (source (srfi 38))
 (kind procedure))
((signature (read-with-shared-structure))
 (signature(read-with-shared-structure  port))
 (source (srfi 38))
 (kind procedure))
((signature (make-parameter init))
 (signature (make-parameter init converter))
 (source (srfi 39))
 (kind procedure))
((signature (parameterize ((expr1 expr2) ...) body))
 (source (srfi 39))
 (kind syntax))
((signature stream-null)
 (source (srfi 41))
 (kind other))
((signature (stream-cons object stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-null? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-pair? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-car stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-cdr stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-lambda args body))
 (source (srfi 41))
 (kind syntax))
((signature (define-stream (name args) body))
 (source (srfi 41))
 (kind syntax))
((signature (list->stream list-of-objects))
 (source (srfi 41))
 (kind procedure))
((signature (port->stream [port]))
 (source (srfi 41))
 (kind procedure))
((signature (stream object ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream->list [n] stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-append stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-concat stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-constant object ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-drop n stream))
 (source (srfi 41))
 (kind procedure)) procedure
((signature (stream-drop-while pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-filter pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-fold proc base stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-for-each proc stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-from first [step]))
 (source (srfi 41))
 (kind procedure))
((signature (stream-iterate proc base))
 (source (srfi 41))
 (kind procedure))
((signature (stream-length stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-let tag ((var expr) ...) body))
 (source (srfi 41))
 (kind syntax))
((signature (stream-map proc stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-match stream clause ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream-of expr clause ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream-range first past [step]))
 (source (srfi 41))
 (kind procedure))
((signature (stream-ref stream n))
 (source (srfi 41))
 (kind procedure))
((signature (stream-reverse stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-scan proc base stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-take n stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-take-while pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-unfold map pred? gen base))
 (source (srfi 41))
 (kind procedure))
((signature (stream-unfolds proc seed))
 (source (srfi 41))
 (kind procedure))
((signature (stream-zip stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (do-ec qualifier ... command))
 (fragment "do-ec")
 (source (srfi 42))
 (kind syntax))
((signature (list-ec qualifier ... expression))
 (fragment "list-ec")
 (source (srfi 42))
 (kind syntax))
((signature (append-ec qualifier ... expression))
 (fragment "append-ec")
 (source (srfi 42))
 (kind syntax))
((signature (string-ec qualifier ... expression))
 (fragment "string-ec")
 (source (srfi 42))
 (kind syntax))
((signature (string-append-ec qualifier ... expression))
 (fragment "string-append-ec")
 (source (srfi 42))
 (kind syntax))
((signature (vector-ec qualifier ... expression))
 (fragment "vector-ec")
 (source (srfi 42))
 (kind syntax))
((signature (vector-of-length-ec k qualifier ... expression))
 (fragment "vector-of-length-ec")
 (source (srfi 42))
 (kind syntax))
((signature (sum-ec qualifier ... expression))
 (fragment "sum-ec")
 (source (srfi 42))
 (kind syntax))
((signature (product-ec qualifier ... expression))
 (fragment "product-ec")
 (source (srfi 42))
 (kind syntax))
((signature (min-ec qualifier ... expression))
 (fragment "min-ec")
 (source (srfi 42))
 (kind syntax))
((signature (max-ec qualifier ... expression))
 (fragment "max-ec")
 (source (srfi 42))
 (kind syntax))
((signature (any?-ec qualifier ... test))
 (fragment "any?-ec")
 (source (srfi 42))
 (kind syntax))
((signature (every?-ec qualifier ... test))
 (fragment "every?-ec")
 (source (srfi 42))
 (kind syntax))
((signature (first-ec default qualifier ... expression))
 (fragment "first-ec")
 (source (srfi 42))
 (kind syntax))
((signature (last-ec default qualifier ... expression))
 (fragment "last-ec")
 (source (srfi 42))
 (kind syntax))
((signature (fold-ec x0 qualifier ... expression f2))
 (fragment "fold-ec")
 (source (srfi 42))
 (kind syntax))
((signature (fold3-ec x0 qualifier ... expression f1 f2))
 (fragment "fold3-ec")
 (source (srfi 42))
 (kind syntax))
((signature (make-vector size)
	    (returns vector))
 (signature (make-vector size fill)
	    (returns vector))
 (fragment "make-vector")
 (source (srfi 43))
 (kind procedure))
((signature (vector x ...)
	    (returns vector))
 (fragment "vector")
 (source (srfi 43))
 (kind procedure))
((signature (vector-unfold f length initial-seed)
	    (returns vector))
 (fragment "vector-unfold")
 (source (srfi 43))
 (kind procedure))
((signature (vector-unfold-right f length initial-seed)
	    (returns vector))
 (fragment "vector-unfold-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-copy vec)
	    (returns vector))
 (signature (vector-copy vec start)
	    (returns vector))
 (signature (vector-copy vec start)
	    (returns vector))
 (signature (vector-copy vec start end fill)
	    (returns vector))
 (fragment "vector-copy")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse-copy vec)
	    (returns vector))
 (signature (vector-reverse-copy vec start)
	    (returns vector))
 (signature (vector-reverse-copy vec start)
	    (returns vector))
 (signature (vector-reverse-copy vec start end)
	    (returns vector))
 (fragment "vector-reverse-copy")
 (source (srfi 43))
 (kind procedure))
((signature (vector-append vec ...)
	    (returns vector))
 (fragment "vector-append")
 (source (srfi 43))
 (kind procedure))
((signature (vector-concatenate list-of-vectors)
	    (returns vector))
 (fragment "vector-concatenate")
 (source (srfi 43))
 (kind procedure))
((signature (vector? x)
	    (returns boolean))
 (fragment "vector-p")
 (source (srfi 43))
 (kind procedure))
((signature (vector-empty? vec)
	    (returns boolean))
 (fragment "vector-empty-p")
 (source (srfi 43))
 (kind procedure))
((signature (vector= elt=? vec ...)
	    (returns boolean))
 (fragment "vector-eq")
 (source (srfi 43))
 (kind procedure))
((signature (vector-ref vec i)
	    (returns value))
 (fragment "vector-ref")
 (source (srfi 43))
 (kind procedure))
((signature (vector-length vec)
	    (returns exact-nonnegative-integer))
 (fragment "vector-length")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fold kons knil vec1 vec2 ...)
	    (returns value))
 (fragment "vector-fold")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fold-right kons knil vec1 vec2 ...)
	    (returns value))
 (fragment "vector-fold-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-map! f vec1 vec2 ...)
	    (returns unspecified))
 (fragment "vector-map-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-for-each f vec1 vec2 ...)
	    (returns unspecified))
 (fragment "vector-for-each")
 (source (srfi 43))
 (kind procedure))
((signature (vector-count pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-count")
 (source (srfi 43))
 (kind procedure))
((signature (vector-index pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-index")
 (source (srfi 43))
 (kind procedure))
((signature (vector-index-right pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-index-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-skip pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-skip")
 (source (srfi 43))
 (kind procedure))
((signature (vector-skip-right pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-skip-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-binary-search vec value cmp)
	    (returns exact-nonnegative-integer))
 (fragment "vector-binary-search")
 (source (srfi 43))
 (kind procedure))
((signature (vector-any pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-any")
 (source (srfi 43))
 (kind procedure))
((signature (vector-every pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-every")
 (source (srfi 43))
 (kind procedure))
((signature (vector-set! vec i value)
	    (returns unspecified))
 (fragment "vector-set-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-swap! vec i j)
	    (returns unspecified))
 (fragment "vector-swap-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fill! vec fill)
	    (returns unspecified))
 (signature (vector-fill! vec fill start)
	    (returns unspecified))
 (signature (vector-fill! vec fill start end)
	    (returns unspecified))
 (fragment "vector-fill-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse! vec)
	    (returns unspecified))
 (signature (vector-reverse! vec start)
	    (returns unspecified))
 (signature (vector-reverse! vec start end)
	    (returns unspecified))
 (fragment "vector-reverse-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-copy! target tstart source)
	    (returns unspecified))
 (signature (vector-copy! target tstart source sstart)
	    (returns unspecified))
 (signature (vector-copy! target tstart source sstart send)
	    (returns unspecified))
 (fragment "vector-copy-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse-copy! target tstart source)
	    (returns unspecified))
 (signature (vector-reverse-copy! target tstart source  sstart)
	    (returns unspecified))
 (signature (vector-reverse-copy! target tstart source  sstart send)
	    (returns unspecified))
 (fragment "vector-reverse-copy-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector->list vec)
	    (returns proper-list))
 (signature (vector->list vec start)
	    (returns proper-list))
 (signature (vector->list vec start end)
	    (returns proper-list))
 (fragment "vector-to-list")
 (source (srfi 43))
 (kind procedure))
((signature (reverse-vector->list vec)
	    (returns proper-list))
 (signature (reverse-vector->list vec start)
	    (returns proper-list))
 (signature (reverse-vector->list vec start end)
	    (returns proper-list))
 (fragment "reverse-vector-to-list")
 (source (srfi 43))
 (kind procedure))
((signature (list->vector proper-list)
	    (returns vector))
 (fragment "list-to-vector")
 (source (srfi 43))
 (kind procedure))
((signature (reverse-list->vector proper-list)
	    (returns vector))
 (fragment "reverse-list-to-vector")
 (source (srfi 43))
 (kind procedure))