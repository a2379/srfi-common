;; I've included identifiers from some SRFIs that are in "withdrawn" status.
;; Those can be filtered out using the status in "srfi-data.scm", if desired, so
;; I'm going to leave them in the database.  However, to save effort, I'm not
;; going to add any more withdrawn SRFIs.

((signature (cond-expand cond-expand-clause-0
			 cond-expand-clause ...))
 (signature (cond-expand cond-expand-clause ...
			 (else command-or-definition ...)))
 (literals else)
 (source (srfi 0))
 (kind syntax))
((signature (cons a d)
	    (returns pair))
 (fragment "cons")
 (source (srfi 1))
 (kind procedure))
((signature (list object ...)
	    (returns list))
 (fragment "list")
 (source (srfi 1))
 (kind procedure))
((signature (xcons d a)
	    (returns pair))
 (fragment "xcons")
 (source (srfi 1))
 (kind procedure))
((signature (cons* elt1 elt2 ...)
	    (returns object))
 (fragment "cons*")
 (source (srfi 1))
 (kind procedure))
((signature (make-list n)
	    (returns list))
 (signature (make-list n fill)
	    (returns list))
 (fragment "make-list")
 (source (srfi 1))
 (kind procedure))
((signature (list-tabulate n init-proc)
	    (returns list))
 (fragment "list-tabulate")
 (source (srfi 1))
 (kind procedure))
((signature (list-copy flist)
	    (returns flist))
 (fragment "list-copy")
 (source (srfi 1))
 (kind procedure))
((signature (circular-list elt1 elt2 ...)
	    (returns list))
 (fragment "circular-list")
 (source (srfi 1))
 (kind procedure))
((signature (iota count)
	    (returns list))
 (signature (iota count start)
	    (returns list))
 (signature (iota count start step)
	    (returns list))
 (fragment "iota")
 (source (srfi 1))
 (kind procedure))
((signature (circular-list? x)
	    (returns boolean))
 (fragment "circular-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (dotted-list? x)
	    (returns boolean))
 (fragment "dotted-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (pair? object)
	    (returns boolean))
 (fragment "pair-p")
 (source (srfi 1))
 (kind procedure))
((signature (null? object)
	    (returns boolean))
 (fragment "null-p")
 (source (srfi 1))
 (kind procedure))
((signature (null-list? list)
	    (returns boolean))
 (fragment "null-list-p")
 (source (srfi 1))
 (kind procedure))
((signature (not-pair? x)
	    (returns boolean))
 (fragment "not-pair-p")
 (source (srfi 1))
 (kind procedure))
((signature (list= elt= list1 ...)
	    (returns boolean))
 (fragment "list=")
 (source (srfi 1))
 (kind procedure))
((signature (car pair)
	    (returns value))
 (fragment "cdr")
 (source (srfi 1))
 (kind procedure))
((signature (cdr pair)
	    (returns value))
 (fragment "cdr")
 (source (srfi 1))
 (kind procedure))
((signature (caar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caaddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (caddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cadddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdadar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdaddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddaar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddadr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cdddar pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (cddddr pair)
	    (returns value))
 (fragment "cddddr")
 (source (srfi 1))
 (kind procedure))
((signature (list-ref clist i)
	    (returns value))
 (fragment "list-ref")
 (source (srfi 1))
 (kind procedure))
((signature (first pair)
	    (returns object))
 (fragment "first")
 (source (srfi 1))
 (kind procedure))
((signature (third pair)
	    (returns object))
 (fragment "third")
 (source (srfi 1))
 (kind procedure))
((signature (fourth pair)
	    (returns object))
 (fragment "fourth")
 (source (srfi 1))
 (kind procedure))
((signature (fifth pair)
	    (returns object))
 (fragment "fifth")
 (source (srfi 1))
 (kind procedure))
((signature (sixth pair)
	    (returns object))
 (fragment "sixth")
 (source (srfi 1))
 (kind procedure))
((signature (seventh pair)
	    (returns object))
 (fragment "seventh")
 (source (srfi 1))
 (kind procedure))
((signature (eighth pair)
	    (returns object))
 (fragment "eighth")
 (source (srfi 1))
 (kind procedure))
((signature (ninth pair)
	    (returns object))
 (fragment "ninth")
 (source (srfi 1))
 (kind procedure))
((signature (tenth pair)
	    (returns object))
 (fragment "tenth")
 (source (srfi 1))
 (kind procedure))
((signature (car+cdr pair)
	    (returns x y))
 (fragment "car+cdr")
 (source (srfi 1))
 (kind procedure))
((signature (drop x i)
	    (returns object))
 (fragment "drop")
 (source (srfi 1))
 (kind procedure))
((signature (take-right flist i)
	    (returns object))
 (fragment "take-right")
 (source (srfi 1))
 (kind procedure))
((signature (drop-right flist i)
	    (returns list))
 (fragment "drop-right")
 (source (srfi 1))
 (kind procedure))
((signature (take! x i)
	    (returns list))
 (fragment "take!")
 (source (srfi 1))
 (kind procedure))
((signature (drop-right! flist i)
	    (returns list))
 (fragment "drop-right!")
 (source (srfi 1))
 (kind procedure))
((signature (split-at x i)
	    (returns list object))
 (fragment "split-at")
 (source (srfi 1))
 (kind procedure))
((signature (split-at! x i)
	    (returns list object))
 (fragment "split-at!")
 (source (srfi 1))
 (kind procedure))
((signature (last pair)
	    (returns object))
 (fragment "last")
 (source (srfi 1))
 (kind procedure))
((signature (last-pair pair)
	    (returns pair))
 (fragment "last-pair")
 (source (srfi 1))
 (kind procedure))
((signature (length list)
	    (returns integer))
 (fragment "length")
 (source (srfi 1))
 (kind procedure))
((signature (length+ clist)
	    (returns (or integer #f)))
 (fragment "length+")
 (source (srfi 1))
 (kind procedure))
((signature (append list1 ...)
	    (returns list))
 (fragment "append")
 (source (srfi 1))
 (kind procedure))
((signature (append! list1 ...)
	    (returns list))
 (fragment "append!")
 (source (srfi 1))
 (kind procedure))
((signature (concatenate list-of-lists)
	    (returns value))
 (fragment "concatenate")
 (source (srfi 1))
 (kind procedure))
((signature (concatenate! list-of-lists)
	    (returns value))
 (fragment "concatenate!")
 (source (srfi 1))
 (kind procedure))
((signature (reverse list)
	    (returns list))
 (fragment "reverse")
 (source (srfi 1))
 (kind procedure))
((signature (reverse! list)
	    (returns list))
 (fragment "reverse!")
 (source (srfi 1))
 (kind procedure))
((signature (append-reverse rev-head tail)
	    (returns list))
 (fragment "append-reverse")
 (source (srfi 1))
 (kind procedure))
((signature (append-reverse! rev-head tail)
	    (returns list))
 (fragment "append-reverse")
 (source (srfi 1))
 (kind procedure))
((signature (zip clist1 clist2 ...)
	    (returns list))
 (fragment "zip")
 (source (srfi 1))
 (kind procedure))
((signature (unzip1 list)
	    (returns list))
 (fragment "unzip1")
 (source (srfi 1))
 (kind procedure))
((signature (unzip3 list)
	    (returns list list list))
 (fragment "unzip3")
 (source (srfi 1))
 (kind procedure))
((signature (unzip5 list)
	    (returns list list list list list))
 (fragment "unzip5")
 (source (srfi 1))
 (kind procedure))
((signature (count pred clist1 clist2)
	    (returns integer))
 (fragment "count")
 (source (srfi 1))
 (kind procedure))
((signature (fold kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "fold")
 (source (srfi 1))
 (kind procedure))
((signature (fold-right kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "fold-right")
 (source (srfi 1))
 (kind procedure))
((signature (pair-fold kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "pair-fold")
 (source (srfi 1))
 (kind procedure))
((signature (pair-fold-right kons knil clist1 clist2 ...)
	    (returns value))
 (fragment "pair-fold-right")
 (source (srfi 1))
 (kind procedure))
((signature (reduce f ridentity list)
	    (returns value))
 (fragment "reduce")
 (source (srfi 1))
 (kind procedure))
((signature (reduce-right f ridentity list)
	    (returns value))
 (fragment "reduce-right")
 (source (srfi 1))
 (kind procedure))
((signature (unfold p f g seed)
	    (returns list))
 (signature (unfold p f g seed tail-gen)
	    (returns list))
 (fragment "unfold")
 (source (srfi 1))
 (kind procedure))
((signature (unfold-right p f g seed)
	    (returns list))
 (signature (unfold-right p f g seed tail)
	    (returns list))
 (fragment "unfold-right")
 (source (srfi 1))
 (kind procedure))
((signature (map proc clist1 clist2 ...)
	    (returns list))
 (fragment "map")
 (source (srfi 1))
 (kind procedure))
((signature (for-each proc clist1 clist2 ...)
	    (returns unspecified))
 (fragment "for-each")
 (source (srfi 1))
 (kind procedure))
((signature (append-map f clist1 clist2 ...)
	    (returns value))
 (fragment "append-map")
 (source (srfi 1))
 (kind procedure))
((signature (append-map! f clist1 clist2 ...)
	    (returns value))
 (fragment "append-map")
 (source (srfi 1))
 (kind procedure))
((signature (map! f list1 clist2 ...)
	    (returns list))
 (fragment "map!")
 (source (srfi 1))
 (kind procedure))
((signature (map-in-order f clist1 clist2 ...)
	    (returns list))
 (fragment "map-in-order")
 (source (srfi 1))
 (kind procedure))
((signature (pair-for-each f clist1 clist2 ...)
	    (returns unspecific))
 (fragment "pair-for-each")
 (source (srfi 1))
 (kind procedure))
((signature (filter-map f clist1 clist2 ...)
	    (returns list))
 (fragment "filter-map")
 (source (srfi 1))
 (kind procedure))
((signature (filter pred list)
	    (returns list))
 (fragment "filter")
 (source (srfi 1))
 (kind procedure))
((signature (partition pred list)
	    (returns list list))
 (fragment "partition")
 (source (srfi 1))
 (kind procedure))
((signature (remove pred list)
	    (returns list))
 (fragment "remove")
 (source (srfi 1))
 (kind procedure))
((signature (filter! pred list)
	    (returns list))
 (fragment "filter!")
 (source (srfi 1))
 (kind procedure))
((signature (partition! pred list)
	    (returns list list))
 (fragment "partition!")
 (source (srfi 1))
 (kind procedure))
((signature (remove! pred list)
	    (returns list))
 (fragment "remove!")
 (source (srfi 1))
 (kind procedure))
((signature (find pred clist)
	    (returns value))
 (fragment "find")
 (source (srfi 1))
 (kind procedure))
((signature (find-tail pred clist)
	    (returns (or pair #f)))
 (fragment "find-tail")
 (source (srfi 1))
 (kind procedure))
((signature (take-while pred clist)
	    (returns list))
 (fragment "take-while")
 (source (srfi 1))
 (kind procedure))
((signature (take-while! pred clist)
	    (returns list))
 (fragment "take-while")
 (source (srfi 1))
 (kind procedure))
((signature (drop-while pred clist)
	    (returns list))
 (fragment "drop-while")
 (source (srfi 1))
 (kind procedure))
((signature (span pred clist)
	    (returns list clist))
 (fragment "span")
 (source (srfi 1))
 (kind procedure))
((signature (span! pred list)
	    (returns list list))
 (fragment "span!")
 (source (srfi 1))
 (kind procedure))
((signature (break pred clist)
	    (returns list clist))
 (fragment "break")
 (source (srfi 1))
 (kind procedure))
((signature (break! pred list)
	    (returns list list))
 (fragment "break!")
 (source (srfi 1))
 (kind procedure))
((signature (any pred clist1 clist2 ...)
	    (returns value))
 (fragment "any")
 (source (srfi 1))
 (kind procedure))
((signature (every pred clist1 clist2 ...)
	    (returns value))
 (fragment "every")
 (source (srfi 1))
 (kind procedure))
((signature (list-index pred clist1 clist2 ...)
	    (returns (or integer #f)))
 (fragment "list-index")
 (source (srfi 1))
 (kind procedure))
((signature (member x list)
	    (returns list))
 (signature (member x list =)
	    (returns list))
 (fragment "member")
 (source (srfi 1))
 (kind procedure))
((signature (memq x list)
	    (returns list))
 (fragment "memq")
 (source (srfi 1))
 (kind procedure))
((signature (memv x list)
	    (returns list))
 (fragment "memv")
 (source (srfi 1))
 (kind procedure))
((signature (delete x list)
	    (returns list))
 (signature (delete x list =)
	    (returns list))
 (fragment "delete")
 (source (srfi 1))
 (kind procedure))
((signature (delete! x list)
	    (returns list))
 (signature (delete! x list =)
	    (returns list))
 (fragment "delete!")
 (source (srfi 1))
 (kind procedure))
((signature (delete-duplicates list)
	    (returns list))
 (signature (delete-duplicates list =)
	    (returns list))
 (fragment "delete-duplicates")
 (source (srfi 1))
 (kind procedure))
((signature (delete-duplicates! list)
	    (returns list))
 (signature (delete-duplicates! list =)
	    (returns list))
 (fragment "delete-duplicates")
 (source (srfi 1))
 (kind procedure))
((signature (assoc key alist)
	    (returns (or pair #f)))
 (signature (assoc key alist =)
	    (returns (or pair #f)))
 (fragment "assoc")
 (source (srfi 1))
 (kind procedure))
((signature (assq key alist)
	    (returns (or pair #f)))
 (fragment "assq")
 (source (srfi 1))
 (kind procedure))
((signature (assv key alist)
	    (returns (or pair #f)))
 (fragment "assv")
 (source (srfi 1))
 (kind procedure))
((signature (alist-cons key datum alist)
	    (returns alist))
 (fragment "alist-cons")
 (source (srfi 1))
 (kind procedure))
((signature (alist-copy alist)
	    (returns alist))
 (fragment "alist-copy")
 (source (srfi 1))
 (kind procedure))
((signature (alist-delete key alist)
	    (returns alist))
 (signature (alist-delete key alist =)
	    (returns alist))
 (fragment "alist-delete")
 (source (srfi 1))
 (kind procedure))
((signature (alist-delete! key alist)
	    (returns alist))
 (signature (alist-delete! key alist =)
	    (returns alist))
 (fragment "alist-delete")
 (source (srfi 1))
 (kind procedure))
((signature (lset<= = list1 ...)
	    (returns boolean))
 (fragment "lset<=")
 (source (srfi 1))
 (kind procedure))
((signature (lset= = list1 list2 ...)
	    (returns boolean))
 (fragment "lset=")
 (source (srfi 1))
 (kind procedure))
((signature (lset-adjoin = list elt1 ...)
	    (returns list))
 (fragment "lset-adjoin")
 (source (srfi 1))
 (kind procedure))
((signature (lset-union = list1 ...)
	    (returns list))
 (fragment "lset-union")
 (source (srfi 1))
 (kind procedure))
((signature (lset-intersection = list1 list2 ...)
	    (returns list))
 (fragment "lset-intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-difference = list1 list2 ...)
	    (returns list))
 (fragment "lset-difference")
 (source (srfi 1))
 (kind procedure))
((signature (lset-xor = list1 ...)
	    (returns list))
 (fragment "lset-xor")
 (source (srfi 1))
 (kind procedure))
((signature (lset-diff+intersection = list1 list2 ...)
	    (returns list list))
 (fragment "lset-diff+intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-union! = list1 ...)
	    (returns list))
 (fragment "lset-union")
 (source (srfi 1))
 (kind procedure))
((signature (lset-intersection! = list1 list2 ...)
	    (returns list))
 (fragment "lset-intersection")
 (source (srfi 1))
 (kind procedure))
((signature (lset-difference! = list1 list2 ...)
	    (returns list))
 (fragment "lset-difference")
 (source (srfi 1))
 (kind procedure))
((signature (lset-xor! = list1 ...)
	    (returns list))
 (fragment "lset-xor")
 (source (srfi 1))
 (kind procedure))
((signature (lset-diff+intersection! = list1 list2 ...)
	    (returns list list))
 (fragment "lset-diff+intersection")
 (source (srfi 1))
 (kind procedure))
((signature (set-car! pair object)
	    (returns unspecified))
 (fragment "set-car")
 (source (srfi 1))
 (kind procedure))
((signature (set-cdr! pair object)
	    (returns unspecified))
 (fragment "set-cdr")
 (source (srfi 1))
 (kind procedure))
((signature (and-let* (claws) body))
 (source (srfi 2))
 (kind syntax))
((signature (lset<= = list1 list2 ...)
	    (returns boolean))
 (source (srfi 3))
 (kind procedure))
((signature (lset= = list1 list2 ...)
	    (returns boolean))
 (source (srfi 3))
 (kind procedure))
((signature (lset-adjoin = list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-union = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-intersection = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-difference = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-xor = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-diff+intersection = list1 list2 ...)
	    (returns list list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-union! = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-intersection! = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-difference! = list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-xor! = list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (lset-diff+intersection! = list1 list2 ...)
	    (returns list list))
 (source (srfi 3))
 (kind procedure))
((signature (union list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionq list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionv list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (union! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionq! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (unionv! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersection list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionv list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersection! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (intersectionv! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xor list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorq list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorv list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xor! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorq! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-xorv! list1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoin list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoinq list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (adjoinv list elt1 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-difference list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differenceq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differencev list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-difference! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differenceq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (list-differencev! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersection list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionq list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionv list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersection! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionq! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (diff+intersectionv! list1 list2 ...)
	    (returns list))
 (source (srfi 3))
 (kind procedure))
((signature (s8vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s8vector n)
	    (returns s8vect))
 (signature (make-s8vector n s8value)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector s8value...)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-length s8vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-ref s8vect i)
	    (returns s8value))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector-set! s8vect i s8value))
 (source (srfi 4))
 (kind procedure))
((signature (s8vector->list s8vect)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s8vector s8list)
	    (returns s8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u8vector n)
	    (returns u8vect))
 (signature (make-u8vector n u8value)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector u8value...)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-length u8vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-ref u8vect i)
	    (returns u8value))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector-set! u8vect i u8value))
 (source (srfi 4))
 (kind procedure))
((signature (u8vector->list u8vect)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u8vector u8list)
	    (returns u8vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s16vector n)
	    (returns s16vect))
 (signature (make-s16vector n s16value)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector s16value...)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-length s16vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-ref s16vect i)
	    (returns s16value))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector-set! s16vect i s16value))
 (source (srfi 4))
 (kind procedure))
((signature (s16vector->list s16vect)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s16vector s16list)
	    (returns s16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u16vector n)
	    (returns u16vect))
 (signature (make-u16vector n u16value)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector u16value...)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-length u16vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-ref u16vect i)
	    (returns u16value))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector-set! u16vect i u16value))
 (source (srfi 4))
 (kind procedure))
((signature (u16vector->list u16vect)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u16vector u16list)
	    (returns u16vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s32vector n)
	    (returns s32vect))
 (signature (make-s32vector n s32value)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector s32value...)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-length s32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-ref s32vect i)
	    (returns s32value))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector-set! s32vect i s32value))
 (source (srfi 4))
 (kind procedure))
((signature (s32vector->list s32vect)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s32vector s32list)
	    (returns s32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u32vector n)
	    (returns u32vect))
 (signature (make-u32vector n u32value)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector u32value...)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-length u32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-ref u32vect i)
	    (returns u32value))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector-set! u32vect i u32value))
 (source (srfi 4))
 (kind procedure))
((signature (u32vector->list u32vect)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u32vector u32list)
	    (returns u32vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-s64vector n)
	    (returns s64vect))
 (signature (make-s64vector n s64value)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector s64value...)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-length s64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-ref s64vect i)
	    (returns s64value))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector-set! s64vect i s64value))
 (source (srfi 4))
 (kind procedure))
((signature (s64vector->list s64vect)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->s64vector s64list)
	    (returns s64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-u64vector n)
	    (returns u64vect))
 (signature (make-u64vector n u64value)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector u64value...)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-length u64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-ref u64vect i)
	    (returns u64value))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector-set! u64vect i u64value))
 (source (srfi 4))
 (kind procedure))
((signature (u64vector->list u64vect)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->u64vector u64list)
	    (returns u64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-f32vector n)
	    (returns f32vect))
 (signature (make-f32vector n f32value)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector f32value...)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-length f32vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-ref f32vect i)
	    (returns f32value))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector-set! f32vect i f32value))
 (source (srfi 4))
 (kind procedure))
((signature (f32vector->list f32vect)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->f32vector f32list)
	    (returns f32vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector? obj)
	    (returns boolean))
 (source (srfi 4))
 (kind procedure))
((signature (make-f64vector n)
	    (returns f64vect))
 (signature (make-f64vector n f64value)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector f64value...)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-length f64vect)
	    (returns integer))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-ref f64vect i)
	    (returns f64value))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector-set! f64vect i f64value))
 (source (srfi 4))
 (kind procedure))
((signature (f64vector->list f64vect)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (list->f64vector f64list)
	    (returns f64vect))
 (source (srfi 4))
 (kind procedure))
((signature (let ((parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let name ((parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let (name (parameter argument) ...) body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let name ((parameter argument) ...
		       . (rest-parameter rest-argument ...))
	      body ...))
 (source (srfi 5))
 (kind syntax))
((signature (let (name (parameter argument) ...
		       . (rest-parameter rest-argument ...))
	      body ...))
 (source (srfi 5))
 (kind syntax))
((signature (open-input-string string) (returns input-port))
 (source (srfi 6))
 (kind procedure))
((signature (open-output-string string) (returns output-port))
 (source (srfi 6))
 (kind procedure))
((signature (get-output-string output-port) (returns string))
 (source (srfi 6))
 (kind procedure))
((signature (program program-clause-0 program-clause ...))
 (source (srfi 7))
 (kind syntax))
((signature (receive formals expression body))
 (source (srfi 8))
 (kind syntax))
((signature (define-record-type type-name
		(constructor-name field-tag ...)
		predicate-name
	      field-spec ...))
 (source (srfi 9))
 (kind syntax))
((signature (let-values ((formals expression) ...) body))
 (source (srfi 11))
 (kind syntax))
((signature (let*-values ((formals expression) ...) body))
 (source (srfi 11))
 (kind syntax))
((signature (current-exception-handler))
 (source (srfi 12))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 12))
 (kind procedure))
((signature (handle-exceptions var handle-expr expr1 expr2 ...))
 (source (srfi 12))
 (kind syntax))
((signature (abort obj))
 (source (srfi 12))
 (kind procedure))
((signature (signal obj))
 (source (srfi 12))
 (kind procedure))
((signature (condition? obj))
 (source (srfi 12))
 (kind procedure))
((signature (make-property-condition kind-key prop-key value ...))
 (source (srfi 12))
 (kind procedure))
((signature (make-composite-condition condition ...))
 (source (srfi 12))
 (kind procedure))
((signature (condition-predicate kind-key))
 (source (srfi 12))
 (kind procedure))
((signature (condition-property-accessor kind-key prop-key))
 (source (srfi 12))
 (kind procedure))
((signature (string? obj) (returns boolean))
 (fragment "string-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-null? s) (returns boolean))
 (fragment "string-null-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-every char/char-set/pred s) (returns value))
 (signature (string-every char/char-set/pred s start) (returns value))
 (signature (string-every char/char-set/pred s start end) (returns value))
 (fragment "string-every")
 (source (srfi 13))
 (kind procedure))
((signature (string-any char/char-set/pred s) (returns value))
 (signature (string-any char/char-set/pred s start) (returns value))
 (signature (string-any char/char-set/pred s start end) (returns value))
 (fragment "string-any")
 (source (srfi 13))
 (kind procedure))
((signature (make-string len) (returns string))
 (signature (make-string len char) (returns string))
 (fragment "make-string")
 (source (srfi 13))
 (kind procedure))
((signature (string char1 ...) (returns string))
 (fragment "string")
 (source (srfi 13))
 (kind procedure))
((signature (string-tabulate proc len) (returns string))
 (fragment "string-tabulate")
 (source (srfi 13))
 (kind procedure))
((signature (string->list s) (returns char-list))
 (signature (string->list s start) (returns char-list))
 (signature (string->list s start end) (returns char-list))
 (fragment "list2string")
 (source (srfi 13))
 (kind procedure))
((signature (list->string char-list) (returns string))
 (source (srfi 13))
 (kind procedure))
((signature (reverse-list->string char-list) (returns string))
 (fragment "reverse-list2string")
 (source (srfi 13))
 (kind procedure))
((signature (string-join string-list) (returns string))
 (signature (string-join string-list delimiter) (returns string))
 (signature (string-join string-list delimiter grammar) (returns string))
 (fragment "string-join")
 (source (srfi 13))
 (kind procedure))
((signature (string-length s) (returns integer))
 (fragment "string-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-ref s i) (returns char))
 (fragment "string-ref")
 (source (srfi 13))
 (kind procedure))
((signature (string-copy s) (returns string))
 (signature (string-copy s start) (returns string))
 (signature (string-copy s start end) (returns string))
 (fragment "substring/shared")
 (source (srfi 13))
 (kind procedure))
((signature (substring/shared s start) (returns string))
 (signature (substring/shared s start end) (returns string))
 (source (srfi 13))
 (kind procedure))
((signature (string-copy! target tstart s) (returns unspecified))
 (signature (string-copy! target tstart s start) (returns unspecified))
 (signature (string-copy! target tstart s start end) (returns unspecified))
 (fragment "string-copy!")
 (source (srfi 13))
 (kind procedure))
((signature (string-take s nchars) (returns string))
 (fragment "string-take")
 (source (srfi 13))
 (kind procedure))
((signature (string-drop s nchars) (returns string))
 (fragment "string-drop")
 (source (srfi 13))
 (kind procedure))
((signature (string-take-right s nchars) (returns string))
 (fragment "string-take-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-drop-right s nchars) (returns string))
 (fragment "string-drop-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-pad s len) (returns string))
 (signature (string-pad s len char) (returns string))
 (signature (string-pad s len char start) (returns string))
 (signature (string-pad s len char start end) (returns string))
 (fragment "string-pad")
 (source (srfi 13))
 (kind procedure))
((signature (string-pad-right s len) (returns string))
 (signature (string-pad-right s len char) (returns string))
 (signature (string-pad-right s len char start) (returns string))
 (signature (string-pad-right s len char start end) (returns string))
 (fragment "string-pad-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim s) (returns string))
 (signature (string-trim s char/char-set/pred) (returns string))
 (signature (string-trim s char/char-set/pred start) (returns string))
 (signature (string-trim s char/char-set/pred start end) (returns string))
 (fragment "string-trim")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim-right s) (returns string))
 (signature (string-trim-right s char/char-set/pred) (returns string))
 (signature (string-trim-right s char/char-set/pred start) (returns string))
 (signature (string-trim-right s char/char-set/pred start end) (returns string))
 (fragment "string-trim-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-trim-both s) (returns string))
 (signature (string-trim-both s char/char-set/pred) (returns string))
 (signature (string-trim-both s char/char-set/pred start) (returns string))
 (signature (string-trim-both s char/char-set/pred start end) (returns string))
 (fragment "string-trim-both")
 (source (srfi 13))
 (kind procedure))
((signature (string-set! s i char) (returns unspecified))
 (fragment "string-set!")
 (source (srfi 13))
 (kind procedure))
((signature (string-fill! s char) (returns unspecified))
 (signature (string-fill! s char start) (returns unspecified))
 (signature (string-fill! s char start end) (returns unspecified))
 (fragment "string-fill!")
 (source (srfi 13))
 (kind procedure))
((signature (string-compare s1 s2 proc< proc= proc>) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1 start2) (returns values))
 (signature (string-compare s1 s2 proc< proc= proc> start1 end1 start2 end2) (returns values))
 (fragment "string-compare")
 (source (srfi 13))
 (kind procedure))
((signature (string-compare-ci s1 s2 proc< proc= proc>) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1 end1 start2) (returns values))
 (signature (string-compare-ci s1 s2 proc< proc= proc> start1 end1 start2 end2) (returns values))
 (fragment "string-compare-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string= s1 s2) (returns boolean))
 (signature (string= s1 s2 start1) (returns boolean))
 (signature (string= s1 s2 start1 end1) (returns boolean))
 (signature (string= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string=")
 (source (srfi 13))
 (kind procedure))
((signature (string<> s1 s2) (returns boolean))
 (signature (string<> s1 s2 start1) (returns boolean))
 (signature (string<> s1 s2 start1 end1) (returns boolean))
 (signature (string<> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string<> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<>")
 (source (srfi 13))
 (kind procedure))
((signature (string< s1 s2) (returns boolean))
 (signature (string< s1 s2 start1) (returns boolean))
 (signature (string< s1 s2 start1 end1) (returns boolean))
 (signature (string< s1 s2 start1 end1 start2) (returns boolean))
 (signature (string< s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<")
 (source (srfi 13))
 (kind procedure))
((signature (string> s1 s2) (returns boolean))
 (signature (string> s1 s2 start1) (returns boolean))
 (signature (string> s1 s2 start1 end1) (returns boolean))
 (signature (string> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string>")
 (source (srfi 13))
 (kind procedure))
((signature (string<= s1 s2) (returns boolean))
 (signature (string<= s1 s2 start1) (returns boolean))
 (signature (string<= s1 s2 start1 end1) (returns boolean))
 (signature (string<= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string<= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string<=")
 (source (srfi 13))
 (kind procedure))
((signature (string>= s1 s2) (returns boolean))
 (signature (string>= s1 s2 start1) (returns boolean))
 (signature (string>= s1 s2 start1 end1) (returns boolean))
 (signature (string>= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string>= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string>=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci= s1 s2) (returns boolean))
 (signature (string-ci= s1 s2 start1) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci<> s1 s2) (returns boolean))
 (signature (string-ci<> s1 s2 start1) (returns boolean))
 (signature (string-ci<> s1 s2 start1) (returns boolean))
 (signature (string-ci<> s1 s2 start1 end1) (returns boolean))
 (signature (string-ci<> s1 s2 start1 end1 start2) (returns boolean))
 (fragment "string-ci<>")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci< s1 s2) (returns boolean))
 (signature (string-ci< s1 s2 start1) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci< s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci<")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci> s1 s2) (returns boolean))
 (signature (string-ci> s1 s2 start1) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci> s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci>")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci<= s1 s2) (returns boolean))
 (signature (string-ci<= s1 s2 start1) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci<= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci<=")
 (source (srfi 13))
 (kind procedure))
((signature (string-ci>= s1 s2) (returns boolean))
 (signature (string-ci>= s1 s2 start1) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-ci>= s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-ci>=")
 (source (srfi 13))
 (kind procedure))
((signature (string-hash s) (returns integer))
 (signature (string-hash s bound) (returns integer))
 (signature (string-hash s bound start) (returns integer))
 (signature (string-hash s bound start end) (returns integer))
 (fragment "string-hash")
 (source (srfi 13))
 (kind procedure))
((signature (string-hash-ci s) (returns integer))
 (signature (string-hash-ci s bound) (returns integer))
 (signature (string-hash-ci s bound start) (returns integer))
 (signature (string-hash-ci s bound start end) (returns integer))
 (fragment "string-hash-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-length s1 s2) (returns integer))
 (signature (string-prefix-length s1 s2 start1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-prefix-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-length s1 s2) (returns integer))
 (signature (string-suffix-length s1 s2 start1) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1 start2) (returns integer))
 (signature (string-suffix-length s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-suffix-length")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-length-ci s1 s2) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1 start2) (returns integer))
 (signature (string-prefix-length-ci s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-prefix-length-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-length-ci s1 s2) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1 start2) (returns integer))
 (signature (string-suffix-length-ci s1 s2 start1 end1 start2 end2) (returns integer))
 (fragment "string-suffix-length-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix? s1 s2) (returns boolean))
 (signature (string-prefix? s1 s2 start1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-prefix-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix? s1 s2) (returns boolean))
 (signature (string-suffix? s1 s2 start1) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-suffix? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-suffix-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-prefix-ci? s1 s2) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-prefix-ci? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-prefix-ci-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-suffix-ci? s1 s2) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-suffix-ci? s1 s2 start1 end1 start2 end2) (returns boolean))
 (fragment "string-suffix-ci-p")
 (source (srfi 13))
 (kind procedure))
((signature (string-index s char/char-set/pred) (returns integer or #f))
 (signature (string-index s char/char-set/pred start) (returns integer or #f))
 (signature (string-index s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-index")
 (source (srfi 13))
 (kind procedure))
((signature (string-index-right s char/char-set/pred) (returns integer or #f))
 (signature (string-index-right s char/char-set/pred start) (returns integer or #f))
 (signature (string-index-right s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-index-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-skip s char/char-set/pred) (returns integer or #f))
 (signature (string-skip s char/char-set/pred start) (returns integer or #f))
 (signature (string-skip s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-skip")
 (source (srfi 13))
 (kind procedure))
((signature (string-skip-right s char/char-set/pred) (returns integer or #f))
 (signature (string-skip-right s char/char-set/pred start) (returns integer or #f))
 (signature (string-skip-right s char/char-set/pred start end) (returns integer or #f))
 (fragment "string-skip-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-count s char/char-set/pred) (returns integer))
 (signature (string-count s char/char-set/pred start) (returns integer))
 (signature (string-count s char/char-set/pred start end) (returns integer))
 (fragment "string-count")
 (source (srfi 13))
 (kind procedure))
((signature (string-contains s1 s2) (returns integer or false))
 (signature (string-contains s1 s2 start1) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1 start2) (returns integer or false))
 (signature (string-contains s1 s2 start1 end1 start2 end2) (returns integer or false))
 (fragment "string-contains")
 (source (srfi 13))
 (kind procedure))
((signature (string-contains-ci s1 s2) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1 start2) (returns integer or false))
 (signature (string-contains-ci s1 s2 start1 end1 start2 end2) (returns integer or false))
 (fragment "string-contains-ci")
 (source (srfi 13))
 (kind procedure))
((signature (string-titlecase s) (returns string))
 (signature (string-titlecase s start) (returns string))
 (signature (string-titlecase s start end) (returns string))
 (fragment "string-titlecase")
 (source (srfi 13))
 (kind procedure))
((signature (string-titlecase! s) (returns unspecified))
 (signature (string-titlecase! s start) (returns unspecified))
 (signature (string-titlecase! s start end) (returns unspecified))
 (fragment "string-titlecase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-upcase s) (returns string))
 (signature (string-upcase s start) (returns string))
 (signature (string-upcase s start end) (returns string))
 (fragment "string-upcase")
 (source (srfi 13))
 (kind procedure))
((signature (string-upcase! s) (returns unspecified))
 (signature (string-upcase! s start) (returns unspecified))
 (signature (string-upcase! s start end) (returns unspecified))
 (fragment "string-upcase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-downcase s) (returns string))
 (signature (string-downcase s start) (returns string))
 (signature (string-downcase s start end) (returns string))
 (fragment "string-downcase")
 (source (srfi 13))
 (kind procedure))
((signature (string-downcase! s) (returns unspecified))
 (signature (string-downcase! s start) (returns unspecified))
 (signature (string-downcase! s start end) (returns unspecified))
 (fragment "string-downcase!")
 (source (srfi 13))
 (kind procedure))
((signature (string-reverse s) (returns string))
 (signature (string-reverse s start) (returns string))
 (signature (string-reverse s start end) (returns string))
 (fragment "string-reverse")
 (source (srfi 13))
 (kind procedure))
((signature (string-reverse! s) (returns unspecified))
 (signature (string-reverse! s start) (returns unspecified))
 (signature (string-reverse! s start end) (returns unspecified))
 (fragment "string-reverse!")
 (source (srfi 13))
 (kind procedure))
((signature (string-append s1 ...) (returns string))
 (fragment "string-append")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate string-list) (returns string))
 (fragment "string-concatenate")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate/shared string-list) (returns string))
 (fragment "string-concatenate/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-append/shared s1 ...) (returns string))
 (fragment "string-append/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate-reverse string-list) (returns string))
 (signature (string-concatenate-reverse string-list final-string) (returns string))
 (signature (string-concatenate-reverse string-list final-string end) (returns string))
 (fragment "string-concatenate-reverse")
 (source (srfi 13))
 (kind procedure))
((signature (string-concatenate-reverse/shared string-list) (returns string))
 (signature (string-concatenate-reverse/shared string-list final-string) (returns string))
 (signature (string-concatenate-reverse/shared string-list final-string end) (returns string))
 (fragment "string-concatenate-reverse/shared")
 (source (srfi 13))
 (kind procedure))
((signature (string-map proc s) (returns string))
 (signature (string-map proc s start) (returns string))
 (signature (string-map proc s start end) (returns string))
 (fragment "string-map")
 (source (srfi 13))
 (kind procedure))
((signature (string-map! proc s) (returns unspecified))
 (signature (string-map! proc s start) (returns unspecified))
 (signature (string-map! proc s start end) (returns unspecified))
 (fragment "string-map!")
 (source (srfi 13))
 (kind procedure))
((signature (string-fold kons knil s) (returns value))
 (signature (string-fold kons knil s start) (returns value))
 (signature (string-fold kons knil s start end) (returns value))
 (fragment "string-fold")
 (source (srfi 13))
 (kind procedure))
((signature (string-fold-right kons knil s) (returns value))
 (signature (string-fold-right kons knil s start) (returns value))
 (signature (string-fold-right kons knil s start end) (returns value))
 (fragment "string-fold-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-unfold p f g seed) (returns string))
 (signature (string-unfold p f g seed base) (returns string))
 (signature (string-unfold p f g seed base make-final) (returns string))
 (fragment "string-unfold")
 (source (srfi 13))
 (kind procedure))
((signature (string-unfold-right p f g seed) (returns string))
 (signature (string-unfold-right p f g seed base) (returns string))
 (signature (string-unfold-right p f g seed base make-final) (returns string))
 (fragment "string-unfold-right")
 (source (srfi 13))
 (kind procedure))
((signature (string-for-each proc s) (returns unspecified))
 (signature (string-for-each proc s start) (returns unspecified))
 (signature (string-for-each proc s start end) (returns unspecified))
 (fragment "string-for-each")
 (source (srfi 13))
 (kind procedure))
((signature (string-for-each-index proc s) (returns unspecified))
 (signature (string-for-each-index proc s start) (returns unspecified))
 (signature (string-for-each-index proc s start end) (returns unspecified))
 (fragment "string-for-each-index")
 (source (srfi 13))
 (kind procedure))
((signature (xsubstring s from) (returns string))
 (signature (xsubstring s from to) (returns string))
 (signature (xsubstring s from to start) (returns string))
 (signature (xsubstring s from to start end) (returns string))
 (fragment "xsubstring")
 (source (srfi 13))
 (kind procedure))
((signature (string-xcopy! target tstart s sfrom) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto start) (returns unspecified))
 (signature (string-xcopy! target tstart s sfrom sto start end) (returns unspecified))
 (fragment "string-xcopy!")
 (source (srfi 13))
 (kind procedure))
((signature (string-replace s1 s2 start1 end1) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2 end2) (returns string))
 (fragment "string-replace")
 (source (srfi 13))
 (kind procedure))
((signature (string-tokenize s) (returns list))
 (signature (string-tokenize s token-set) (returns list))
 (signature (string-tokenize s token-set start) (returns list))
 (signature (string-tokenize s token-set start end) (returns list))
 (fragment "string-tokenize")
 (source (srfi 13))
 (kind procedure))
((signature (string-filter char/char-set/pred s) (returns string))
 (signature (string-filter char/char-set/pred s start) (returns string))
 (signature (string-filter char/char-set/pred s start end) (returns string))
 (fragment "string-filter")
 (source (srfi 13))
 (kind procedure))
((signature (string-delete har/char-set/pred s) (returns string))
 (signature (string-delete har/char-set/pred s start) (returns string))
 (signature (string-delete har/char-set/pred s start end) (returns string))
 (fragment "string-delete")
 (source (srfi 13))
 (kind procedure))
((signature (string-parse-start+end proc s args) (returns))
 (signature (string-parse-start+end proc s args) (returns rest))
 (signature (string-parse-start+end proc s args) (returns rest start))
 (signature (string-parse-start+end proc s args) (returns rest start end))
 (fragment "string-parse-start+end")
 (source (srfi 13))
 (kind procedure))
((signature (string-parse-final-start+end proc s args) (returns))
 (signature (string-parse-final-start+end proc s args) (returns start))
 (signature (string-parse-final-start+end proc s args) (returns start end))
 (fragment "string-parse-final-start+end")
 (source (srfi 13))
 (kind procedure))
((signature (let-string-start+end (start end) proc-exp s-exp args-exp body ...)
	    (returns values))
 (signature (let-string-start+end (start end rest) proc-exp s-exp args-exp body ...)
	    (returns values))
 (fragment "let-string-start+end")
 (source (srfi 13))
 (kind syntax))
((signature (check-substring-spec proc s start end) (returns unspecified))
 (fragment "check-substring-spec")
 (source (srfi 13))
 (kind procedure))
((signature (substring-spec-ok? s start end) (returns boolean))
 (fragment "substring-spec-ok-p")
 (source (srfi 13))
 (kind procedure))
((signature (make-kmp-restart-vector s) (returns integer-vector))
 (signature (make-kmp-restart-vector s c=) (returns integer-vector))
 (signature (make-kmp-restart-vector s c= start) (returns integer-vector))
 (signature (make-kmp-restart-vector s c= start end) (returns integer-vector))
 (fragment "make-kmp-restart-vector")
 (source (srfi 13))
 (kind procedure))
((signature (kmp-step pat rv c i c= p-start) (returns integer))
 (fragment "kmp-step")
 (source (srfi 13))
 (kind procedure))
((signature (string-kmp-partial-search pat rv s i) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c=) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start s-start) (returns integer))
 (signature (string-kmp-partial-search pat rv s i c= p-start s-start s-end) (returns integer))
 (fragment "string-kmp-partial-search")
 (source (srfi 13))
 (kind procedure))
((signature char-set:lower-case)
 (fragment "char-set:lower-case")
 (source (srfi 14))
 (kind other))
((signature char-set:lower-case)
 (fragment "char-set:lower-case")
 (source (srfi 14))
 (kind other))
((signature char-set:upper-case)
 (fragment "char-set:upper-case")
 (source (srfi 14))
 (kind other))
((signature char-set:title-case)
 (fragment "char-set:title-case")
 (source (srfi 14))
 (kind other))
((signature char-set:letter)
 (fragment "char-set:letter")
 (source (srfi 14))
 (kind other))
((signature char-set:digit)
 (fragment "char-set:digit")
 (source (srfi 14))
 (kind other))
((signature char-set:letter+digit)
 (fragment "char-set:letter+digit")
 (source (srfi 14))
 (kind other))
((signature char-set:graphic)
 (fragment "char-set:graphic")
 (source (srfi 14))
 (kind other))
((signature char-set:printing)
 (fragment "char-set:printing")
 (source (srfi 14))
 (kind other))
((signature char-set:whitespace)
 (fragment "char-set:whitespace")
 (source (srfi 14))
 (kind other))
((signature char-set:iso-control)
 (fragment "char-set:iso-control")
 (source (srfi 14))
 (kind other))
((signature char-set:punctuation)
 (fragment "char-set:punctuation")
 (source (srfi 14))
 (kind other))
((signature char-set:symbol)
 (fragment "char-set:symbol")
 (source (srfi 14))
 (kind other))
((signature char-set:hex-digit)
 (fragment "char-set:hex-digit")
 (source (srfi 14))
 (kind other))
((signature char-set:blank)
 (fragment "char-set:blank")
 (source (srfi 14))
 (kind other))
((signature char-set:ascii)
 (fragment "char-set:ascii")
 (source (srfi 14))
 (kind other))
((signature char-set:empty)
 (fragment "char-set:empty")
 (source (srfi 14))
 (kind other))
((signature char-set:full)
 (fragment "char-set:full")
 (source (srfi 14))
 (kind other))
((signature (char-set? obj)
	    (returns boolean))
 (fragment "char-set-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set= cs1 ...)
	    (returns boolean))
 (fragment "char-set=")
 (source (srfi 14))
 (kind procedure))
((signature (char-set<= cs1 ...)
	    (returns boolean))
 (fragment "char-set<=")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-hash cs)
	    (returns integer))
 (signature (char-set-hash cs bound)
	    (returns integer))
 (fragment "char-set-hash")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-cursor cset)
	    (returns cursor))
 (fragment "char-set-cursor")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-ref cset cursor)
	    (returns char))
 (fragment "char-set-ref")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-cursor-next cset cursor)
	    (returns cursor))
 (fragment "char-set-cursor-next")
 (source (srfi 14))
 (kind procedure))
((signature (end-of-char-set? cursor)
	    (returns boolean))
 (fragment "end-of-char-set-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-fold kons knil cs)
	    (returns object))
 (fragment "char-set-fold")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-unfold f p g seed)
	    (returns char-set))
 (signature (char-set-unfold f p g seed base-cs)
	    (returns char-set))
 (fragment "char-set-unfold")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-unfold! f p g seed base-cs)
	    (returns char-set))
 (fragment "char-set-unfold!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-for-each proc cs)
	    (returns unspecified))
 (fragment "char-set-for-each")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-map proc cs)
	    (returns char-set))
 (fragment "char-set-map")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-copy cs)
	    (returns char-set))
 (fragment "char-set-copy")
 (source (srfi 14))
 (kind procedure))
((signature (char-set char1 ...)
	    (returns char-set))
 (fragment "char-set")
 (source (srfi 14))
 (kind procedure))
((signature (list->char-set char-list)
	    (returns char-set))
 (signature (list->char-set char-list base-cs)
	    (returns char-set))
 (fragment "list->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (list->char-set! char-list base-cs)
	    (returns char-set))
 (fragment "list->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (string->char-set s)
	    (returns char-set))
 (signature (string->char-set s base-cs)
	    (returns char-set))
 (fragment "string->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (string->char-set! s base-cs)
	    (returns char-set))
 (fragment "string->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-filter pred cs)
	    (returns char-set))
 (signature (char-set-filter pred cs base-cs)
	    (returns char-set))
 (fragment "char-set-filter")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-filter! pred cs base-cs)
	    (returns char-set))
 (fragment "char-set-filter!")
 (source (srfi 14))
 (kind procedure))
((signature (ucs-range->char-set lower upper)
	    (returns char-set))
 (signature (ucs-range->char-set lower upper error?)
	    (returns char-set))
 (signature (ucs-range->char-set lower upper error? base-cs)
	    (returns char-set))
 (fragment "ucs-range->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (ucs-range->char-set! lower upper error? base-cs)
	    (returns char-set))
 (fragment "ucs-range->char-set!")
 (source (srfi 14))
 (kind procedure))
((signature (->char-set x)
	    (returns char-set))
 (fragment "->char-set")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-size cs)
	    (returns integer))
 (fragment "char-set-size")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-count pred cs)
	    (returns integer))
 (fragment "char-set-count")
 (source (srfi 14))
 (kind procedure))
((signature (char-set->list cs)
	    (returns character-list))
 (fragment "char-set->list")
 (source (srfi 14))
 (kind procedure))
((signature (char-set->string cs)
	    (returns string))
 (fragment "char-set->string")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-contains? cs char)
	    (returns boolean))
 (fragment "char-set-contains-p")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-every pred cs)
	    (returns boolean))
 (fragment "char-set-every")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-any pred cs)
	    (returns boolean))
 (fragment "char-set-any")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-adjoin cs char1 ...)
	    (returns char-set))
 (fragment "char-set-adjoin")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-delete cs char1 ...)
	    (returns char-set))
 (fragment "char-set-delete")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-adjoin! cs char1 ...)
	    (returns char-set))
 (fragment "char-set-adjoin!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-delete! cs char1 ...)
	    (returns char-set))
 (fragment "char-set-delete!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-complement cs)
	    (returns char-set))
 (fragment "char-set-complement")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-union cs1 ...)
	    (returns char-set))
 (fragment "char-set-union")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-intersection cs1 ...)
	    (returns char-set))
 (fragment "char-set-intersection")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-difference cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-difference")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-xor cs1 ...)
	    (returns char-set))
 (fragment "char-set-xor")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-diff+intersection cs1 cs2 ...)
	    (returns char-set char-set))
 (fragment "char-set-diff+intersection")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-complement! cs)
	    (returns char-set))
 (fragment "char-set-complement!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-union! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-union!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-intersection! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-intersection!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-difference! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-difference!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-xor! cs1 cs2 ...)
	    (returns char-set))
 (fragment "char-set-xor!")
 (source (srfi 14))
 (kind procedure))
((signature (char-set-diff+intersection! cs1 cs2 cs3 ...)
	    (returns char-set char-set))
 (fragment "char-set-diff+intersection!")
 (source (srfi 14))
 (kind procedure))
((signature (fluid-let bindings body))
 (source (srfi 15))
 (kind syntax))
((signature (case-lambda clause ...))
 (source (srfi 16))
 (kind syntax))
((signature (set! (proc arg ...) value))
 (source (srfi 17))
 (kind syntax))
((signature (getter-with-setter getter setter))
 (source (srfi 17))
 (kind procedure))
((signature (current-thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-thread thunk))
 (signature (make-thread thunk name))
 (source (srfi 18))
 (kind procedure))
((signature (thread-name thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-specific thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-specific-set! thread obj))
 (source (srfi 18))
 (kind procedure))
((signature (thread-start! thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-yield!))
 (source (srfi 18))
 (kind procedure))
((signature (thread-sleep! timeout))
 (source (srfi 18))
 (kind procedure))
((signature (thread-terminate! thread))
 (source (srfi 18))
 (kind procedure))
((signature (thread-join! thread))
 (signature (thread-join! thread timeout))
 (signature (thread-join! thread timeout timeout-val))
 (source (srfi 18))
 (kind procedure))
((signature (mutex? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-mutex))
 (signature (make-mutex name))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-name mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-specific mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-specific-set! mutex obj))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-state mutex))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-lock! mutex))
 (signature (mutex-lock! mutex timeout))
 (signature (mutex-lock! mutex timeout thread))
 (source (srfi 18))
 (kind procedure))
((signature (mutex-unlock! mutex))
 (signature (mutex-unlock! mutex condition-variable))
 (signature (mutex-unlock! mutex condition-variable timeout))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable? object))
 (source (srfi 18))
 (kind procedure))
((signature (make-condition-variable))
 (signature (make-condition-variable name))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-name condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-specific condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-specific-set! condition-variable obj))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-signal! condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (condition-variable-broadcast! condition-variable))
 (source (srfi 18))
 (kind procedure))
((signature (current-time))
 (source (srfi 18))
 (kind procedure))
((signature (time?))
 (source (srfi 18))
 (kind procedure))
((signature (time->seconds time))
 (source (srfi 18))
 (kind procedure))
((signature (seconds->time x))
 (source (srfi 18))
 (kind procedure))
((signature (current-exception-handler))
 (source (srfi 18))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 18))
 (kind procedure))
((signature (raise obj))
 (source (srfi 18))
 (kind procedure))
((signature (join-timeout-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (abandoned-mutex-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (terminated-thread-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (uncaught-exception? obj))
 (source (srfi 18))
 (kind procedure))
((signature (uncaught-exception-reason exc))
 (source (srfi 18))
 (kind procedure))
((signature time-duration)
 (source (srfi 19))
 (kind constant))
((signature time-monotonic)
 (source (srfi 19))
 (kind constant))
((signature time-process)
 (source (srfi 19))
 (kind constant))
((signature time-tai)
 (source (srfi 19))
 (kind constant))
((signature time-thread)
 (source (srfi 19))
 (kind constant))
((signature time-utc)
 (source (srfi 19))
 (kind constant))
((signature (current-date)
	    (returns date))
 (signature (current-date tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (current-julian-day)
	    (returns jdn))
 (source (srfi 19))
 (kind procedure))
((signature (current-modified-julian-day)
	    (returns mjdn))
 (source (srfi 19))
 (kind procedure))
((signature (current-time)
	    (returns time))
 (signature (current-time time-type)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (time-resolution)
	    (returns integer))
 (signature (time-resolution time-type)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (make-time type nanosecond second)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (time? object)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time-type time)
	    (returns time-type))
 (source (srfi 19))
 (kind procedure))
((signature (time-nanosecond time)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (time-second time)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-type! time time-type))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-nanosecond! time integer))
 (source (srfi 19))
 (kind procedure))
((signature (set-time-second! time integer))
 (source (srfi 19))
 (kind procedure))
((signature (copy-time time1)
	    (returns time2))
 (source (srfi 19))
 (kind procedure))
((signature (time<=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time<? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time>=? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time>? time1 time2)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (time-difference time1 time2)
	    (returns time-duration))
 (source (srfi 19))
 (kind procedure))
((signature (time-difference! time1 time2)
	    (returns time-duration))
 (source (srfi 19))
 (kind procedure))
((signature (add-duration time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (add-duration! time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (subtract-duration time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (subtract-duration! time1 time-duration)
	    (returns time))
 (source (srfi 19))
 (kind procedure))
((signature (make-date nanosecond second minute hour day month year zone-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (date? date)
	    (returns boolean))
 (source (srfi 19))
 (kind procedure))
((signature (date-nanosecond date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-second date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-minute date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-hour date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-month date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-year date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-zone-offset date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-year-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-week-day date)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date-week-number date day-of-week-starting-week)
	    (returns integer))
 (source (srfi 19))
 (kind procedure))
((signature (date->julian-day date)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (date->modified-julian-day date)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-monotonic date)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-tai date)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (date->time-utc date)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->date jd)
	    (returns date))
 (signature (julian-day->date jd  tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-monotonic jd)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-tai jd)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (julian-day->time-utc jd)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->date mjd)
	    (returns date))
 (signature (modified-julian-day->date mjd tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-monotonic mjd)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-tai mjd)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (modified-julian-day->time-utc mjd)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->date time-monotonic)
	    (returns date))
 (signature (time-monotonic->date time-monotonic tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->julian-day time-monotonic)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->modified-julian-day time-monotonic)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-tai time-monotonic)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-tai! time-monotonic)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-utc time-monotonic)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-monotonic->time-utc! time-monotonic)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->date time-tai)
	    (returns date))
 (signature (time-tai->date time-tai tz-offset)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->julian-day time-tai)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->modified-julian-day time-tai)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-monotonic time-tai)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-monotonic! time-tai)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-utc time-tai)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-tai->time-utc! time-tai)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->date time-utc)
	    (returns time-utc))
 (signature (time-utc->date time-utc tz-offset)
	    (returns time-utc))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->julian-day time-utc)
	    (returns jd))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->modified-julian-day time-utc)
	    (returns mjd))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-monotonic time-utc)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-monotonic! time-utc)
	    (returns time-monotonic))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-tai time-utc)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (time-utc->time-tai! time-utc)
	    (returns time-tai))
 (source (srfi 19))
 (kind procedure))
((signature (date->string date)
	    (returns string))
 (signature (date->string date format-string)
	    (returns string))
 (source (srfi 19))
 (kind procedure))
((signature (string->date input-string template-string)
	    (returns date))
 (source (srfi 19))
 (kind procedure))
((signature (define-class class-name superclass-name
	      (field-specification ...)))
 (signature (define-class class-name superclass-name
	      (field-specification ...)
	      :prototype))
 (source (srfi 20))
 (kind syntax))
((signature (define-class class-name superclass-name
	      (field-specification ...)))
 (signature (define-class class-name superclass-name
	      (field-specification ...)
	      :prototype))
 (source (srfi 20))
 (kind syntax))
((signature (define-generic (generic-name variable ...)))
 (signature (define-generic (generic-name variable ...)
	      default-body))
 (source (srfi 20))
 (kind syntax))
((signature (define-method (generic-name variable ...) body))
 (source (srfi 20))
 (kind syntax))
((signature (instantiate class-name
			 :mono-field-name form
			 :poly-field-name form ...
			 :poly-field-length size
			 ...))
 (source (srfi 20))
 (kind syntax))
((signature (object? value))
 (source (srfi 20))
 (kind procedure))
((signature (object->class object))
 (source (srfi 20))
 (kind procedure))
((signature (is-a? value class))
 (source (srfi 20))
 (kind procedure))
((signature (subclass? class super-class))
 (source (srfi 20))
 (kind procedure))
((signature Object-class)
 (source (srfi 20))
 (kind other))
((signature (Class? value))
 (source (srfi 20))
 (kind procedure))
((signature (Class-name class))
 (source (srfi 20))
 (kind procedure))
((signature (Class-super-class class))
 (source (srfi 20))
 (kind procedure))
((signature (Class-field class index))
 (source (srfi 20))
 (kind procedure))
((signature (Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (Field-name field))
 (source (srfi 20))
 (kind procedure))
((signature (Field-mutable? field))
 (source (srfi 20))
 (kind procedure))
((signature (Field-initializer field))
 (source (srfi 20))
 (kind procedure))
((signature (Mono-Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (Poly-Field? value))
 (source (srfi 20))
 (kind procedure))
((signature (field-value object field))
 (signature (field-value object field index))
 (source (srfi 20))
 (kind procedure))
((signature (set-field-value! object value field))
 (signature (set-field-value! object value field index))
 (source (srfi 20))
 (kind procedure))
((signature (field-length object field))
 (source (srfi 20))
 (kind procedure))
((signature (initialize! object))
 (source (srfi 20))
 (kind procedure))
((signature (clone object))
 (source (srfi 20))
 (kind procedure))
((signature (current-thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-thread thunk))
 (signature (make-thread thunk name))
 (source (srfi 21))
 (kind procedure))
((signature (thread-name thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-specific thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-specific-set! thread obj))
 (source (srfi 21))
 (kind procedure))
((signature (thread-base-priority thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-base-priority-set! thread priority))
 (source (srfi 21))
 (kind procedure))
((signature (thread-priority-boost thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-priority-boost-set! thread priority-boost))
 (source (srfi 21))
 (kind procedure))
((signature (thread-quantum thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-quantum-set! thread quantum))
 (source (srfi 21))
 (kind procedure))
((signature (thread-start! thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-yield!))
 (source (srfi 21))
 (kind procedure))
((signature (thread-sleep! timeout))
 (source (srfi 21))
 (kind procedure))
((signature (thread-terminate! thread))
 (source (srfi 21))
 (kind procedure))
((signature (thread-join! thread))
 (signature (thread-join! thread timeout))
 (signature (thread-join! thread timeout timeout-val))
 (source (srfi 21))
 (kind procedure))
((signature (mutex? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-mutex))
 (signature (make-mutex name))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-name mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-specific mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-specific-set! mutex obj))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-state mutex))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-lock! mutex))
 (signature (mutex-lock! mutex timeout))
 (signature (mutex-lock! mutex timeout thread))
 (source (srfi 21))
 (kind procedure))
((signature (mutex-unlock! mutex))
 (signature (mutex-unlock! mutex condition-variable))
 (signature (mutex-unlock! mutex condition-variable timeout))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable? object))
 (source (srfi 21))
 (kind procedure))
((signature (make-condition-variable))
 (signature (make-condition-variable name))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-name condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-specific condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-specific-set! condition-variable obj))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-signal! condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (condition-variable-broadcast! condition-variable))
 (source (srfi 21))
 (kind procedure))
((signature (current-time))
 (source (srfi 21))
 (kind procedure))
((signature (time?))
 (source (srfi 21))
 (kind procedure))
((signature (time->seconds time))
 (source (srfi 21))
 (kind procedure))
((signature (seconds->time x))
 (source (srfi 21))
 (kind procedure))
((signature (current-exception-handler))
 (source (srfi 21))
 (kind procedure))
((signature (with-exception-handler handler thunk))
 (source (srfi 21))
 (kind procedure))
((signature (raise obj))
 (source (srfi 21))
 (kind procedure))
((signature (join-timeout-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (abandoned-mutex-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (terminated-thread-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (uncaught-exception? obj))
 (source (srfi 21))
 (kind procedure))
((signature (uncaught-exception-reason exc))
 (source (srfi 21))
 (kind procedure))
((signature (error reason arg ...))
 (source (srfi 23))
 (kind procedure))
((signature (array? obj))
 (source (srfi 25))
 (kind procedure))
((signature (make-array shape))
 (signature (make-array shape obj))
 (source (srfi 25))
 (kind procedure))
((signature (shape bound ...))
 (source (srfi 25))
 (kind procedure))
((signature (array shape obj ...))
 (source (srfi 25))
 (kind procedure))
((signature (array-rank array))
 (source (srfi 25))
 (kind procedure))
((signature (array-start array k))
 (source (srfi 25))
 (kind procedure))
((signature (array-end array k))
 (source (srfi 25))
 (kind procedure))
((signature (array-ref array k ...))
 (signature (array-ref array index))
 (source (srfi 25))
 (kind procedure))
((signature (array-set! array k ... obj))
 (signature (array-set! array index obj))
 (source (srfi 25))
 (kind procedure))
((signature (share-array array shape proc))
 (source (srfi 25))
 (kind procedure))
((signature (cut slot-or-expr-0 slot-or-expr ...))
 (signature (cut slot-or-expr-0 slot-or-expr ... rest-slot))
 (source (srfi 26))
 (kind syntax))
((signature (cute slot-or-expr-0 slot-or-expr ...))
 (signature (cute slot-or-expr-0 slot-or-expr ... rest-slot))
 (source (srfi 26))
 (kind syntax))
((signature (random-integer n) (returns x))
 (source (srfi 27))
 (kind procedure))
((signature (random-real) (returns x))
 (source (srfi 27))
 (kind procedure))
((signature (make-random-source) (returns s))
 (source (srfi 27))
 (kind procedure))
((signature (random-source? obj) (returns bool))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-state-ref s) (returns state))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-state-set! s state))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-randomize! s))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-pseudo-randomize! s i j))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-make-integers s) (returns rand))
 (source (srfi 27))
 (kind procedure))
((signature (random-source-make-reals s unit) (returns rand))
 (source (srfi 27))
 (kind procedure))
((signature (format format-string obj ...) (returns string))
 (source (srfi 28))
 (kind procedure))
((signature (current-language) (returns symbol))
 (source (srfi 29))
 (kind procedure))
((signature (current-language symbol) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (current-country) (returns symbol))
 (source (srfi 29))
 (kind procedure))
((signature (current-country symbol) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (current-locale-details) (returns list-of-symbols))
 (source (srfi 29))
 (kind procedure))
((signature (current-locale-details list-of-symbols) (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (declare-bundle! bundle-specifier association-list)
	    (returns undefined))
 (source (srfi 29))
 (kind procedure))
((signature (store-bundle bundle-specifier) (returns boolean))
 (source (srfi 29))
 (kind procedure))
((signature (load-bundle! bundle-specifier) (returns boolean))
 (source (srfi 29))
 (kind procedure))
((signature (localized-template package-name message-template-name)
	    (returns (or string #f)))
 (source (srfi 29))
 (kind procedure))
((signature (rec variable expression))
 (signature (rec (variable-0 variable ...) body))
 (source (srfi 31))
 (kind syntax))
((signature (with-exception-handler handler thunk))
 (source (srfi 34))
 (kind procedure))
((signature (guard (var clause-0 clause ...) body))
 (source (srfi 34))
 (kind syntax))
((signature (raise obj))
 (source (srfi 34))
 (kind procedure))
((signature (make-condition-type id parent field-names))
 (source (srfi 35))
 (kind procedure))
((signature (condition-type? thing))
 (source (srfi 35))
 (kind procedure))
((signature (make-condition type field-name value ...))
 (source (srfi 35))
 (kind procedure))
((signature (condition? thing))
 (source (srfi 35))
 (kind procedure))
((signature (condition-has-type? condition condition-type))
 (source (srfi 35))
 (kind procedure))
((signature (condition-ref condition field-name))
 (source (srfi 35))
 (kind procedure))
((signature (make-compound-condition condition-0 condition ...))
 (source (srfi 35))
 (kind procedure))
((signature (extract-condition condition condition-type))
 (source (srfi 35))
 (kind procedure))
((signature (define-condition-type condition-type supertype predicate field-spec ...))
 (source (srfi 35))
 (kind syntax))
((signature (condition type-field-binding ...))
 (source (srfi 35))
 (kind syntax))
((signature &condition)
 (source (srfi 35))
 (kind other))
((signature &message)
 (source (srfi 35))
 (kind other))
((signature &serious)
 (source (srfi 35))
 (kind other))
((signature &error)
 (source (srfi 35))
 (kind other))
((signature &error)
 (source (srfi 36))
 (kind other))
((signature &i/o-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-port-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-read-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-write-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-closed-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-filename-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-malformed-filename-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-protection-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-is-read-only-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-file-already-exists-error)
 (source (srfi 36))
 (kind other))
((signature &i/o-no-such-file-error)
 (source (srfi 36))
 (kind other))
((signature &read-error)
 (source (srfi 36))
 (kind other))
((signature (option names required-arg? optional-arg? option-proc))
 (source (srfi 36))
 (kind procedure))
((signature (option-names option))
 (source (srfi 36))
 (kind procedure))
((signature (option-required-arg? option))
 (source (srfi 36))
 (kind procedure))
((signature (option-optional-arg? option))
 (source (srfi 36))
 (kind procedure))
((signature (option-processor option))
 (source (srfi 36))
 (kind procedure))
((signature (args-fold args options unrecognized-option-proc operand-proc seeds ...))
 (source (srfi 36))
 (kind procedure))
((signature (write-with-shared-structure obj))
 (signature (write-with-shared-structure obj port))
 (signature (write-with-shared-structure obj port optarg))
 (source (srfi 38))
 (kind procedure))
((signature (read-with-shared-structure))
 (signature(read-with-shared-structure  port))
 (source (srfi 38))
 (kind procedure))
((signature (make-parameter init))
 (signature (make-parameter init converter))
 (source (srfi 39))
 (kind procedure))
((signature (parameterize ((expr1 expr2) ...) body))
 (source (srfi 39))
 (kind syntax))
((signature stream-null)
 (source (srfi 41))
 (kind other))
((signature (stream-cons object stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-null? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-pair? object))
 (source (srfi 41))
 (kind procedure))
((signature (stream-car stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-cdr stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-lambda args body))
 (source (srfi 41))
 (kind syntax))
((signature (define-stream (name args) body))
 (source (srfi 41))
 (kind syntax))
((signature (list->stream list-of-objects))
 (source (srfi 41))
 (kind procedure))
((signature (port->stream))
 (signature (port->stream port))
 (source (srfi 41))
 (kind procedure))
((signature (stream object ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream->list stream))
 (signature (stream->list n stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-append stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-concat stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-constant object ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-drop n stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-drop-while pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-filter pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-fold proc base stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-for-each proc stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-from first))
 (signature (stream-from first step))
 (source (srfi 41))
 (kind procedure))
((signature (stream-iterate proc base))
 (source (srfi 41))
 (kind procedure))
((signature (stream-length stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-let tag ((var expr) ...) body))
 (source (srfi 41))
 (kind syntax))
((signature (stream-map proc stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (stream-match stream clause ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream-of expr clause ...))
 (source (srfi 41))
 (kind syntax))
((signature (stream-range first past))
 (signature (stream-range first past step))
 (source (srfi 41))
 (kind procedure))
((signature (stream-ref stream n))
 (source (srfi 41))
 (kind procedure))
((signature (stream-reverse stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-scan proc base stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-take n stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-take-while pred? stream))
 (source (srfi 41))
 (kind procedure))
((signature (stream-unfold map pred? gen base))
 (source (srfi 41))
 (kind procedure))
((signature (stream-unfolds proc seed))
 (source (srfi 41))
 (kind procedure))
((signature (stream-zip stream ...))
 (source (srfi 41))
 (kind procedure))
((signature (do-ec qualifier ... command))
 (fragment "do-ec")
 (source (srfi 42))
 (kind syntax))
((signature (list-ec qualifier ... expression))
 (fragment "list-ec")
 (source (srfi 42))
 (kind syntax))
((signature (append-ec qualifier ... expression))
 (fragment "append-ec")
 (source (srfi 42))
 (kind syntax))
((signature (string-ec qualifier ... expression))
 (fragment "string-ec")
 (source (srfi 42))
 (kind syntax))
((signature (string-append-ec qualifier ... expression))
 (fragment "string-append-ec")
 (source (srfi 42))
 (kind syntax))
((signature (vector-ec qualifier ... expression))
 (fragment "vector-ec")
 (source (srfi 42))
 (kind syntax))
((signature (vector-of-length-ec k qualifier ... expression))
 (fragment "vector-of-length-ec")
 (source (srfi 42))
 (kind syntax))
((signature (sum-ec qualifier ... expression))
 (fragment "sum-ec")
 (source (srfi 42))
 (kind syntax))
((signature (product-ec qualifier ... expression))
 (fragment "product-ec")
 (source (srfi 42))
 (kind syntax))
((signature (min-ec qualifier ... expression))
 (fragment "min-ec")
 (source (srfi 42))
 (kind syntax))
((signature (max-ec qualifier ... expression))
 (fragment "max-ec")
 (source (srfi 42))
 (kind syntax))
((signature (any?-ec qualifier ... test))
 (fragment "any?-ec")
 (source (srfi 42))
 (kind syntax))
((signature (every?-ec qualifier ... test))
 (fragment "every?-ec")
 (source (srfi 42))
 (kind syntax))
((signature (first-ec default qualifier ... expression))
 (fragment "first-ec")
 (source (srfi 42))
 (kind syntax))
((signature (last-ec default qualifier ... expression))
 (fragment "last-ec")
 (source (srfi 42))
 (kind syntax))
((signature (fold-ec x0 qualifier ... expression f2))
 (fragment "fold-ec")
 (source (srfi 42))
 (kind syntax))
((signature (fold3-ec x0 qualifier ... expression f1 f2))
 (fragment "fold3-ec")
 (source (srfi 42))
 (kind syntax))
((signature (make-vector size)
	    (returns vector))
 (signature (make-vector size fill)
	    (returns vector))
 (fragment "make-vector")
 (source (srfi 43))
 (kind procedure))
((signature (vector x ...)
	    (returns vector))
 (fragment "vector")
 (source (srfi 43))
 (kind procedure))
((signature (vector-unfold f length initial-seed)
	    (returns vector))
 (fragment "vector-unfold")
 (source (srfi 43))
 (kind procedure))
((signature (vector-unfold-right f length initial-seed)
	    (returns vector))
 (fragment "vector-unfold-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-copy vec)
	    (returns vector))
 (signature (vector-copy vec start)
	    (returns vector))
 (signature (vector-copy vec start)
	    (returns vector))
 (signature (vector-copy vec start end fill)
	    (returns vector))
 (fragment "vector-copy")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse-copy vec)
	    (returns vector))
 (signature (vector-reverse-copy vec start)
	    (returns vector))
 (signature (vector-reverse-copy vec start)
	    (returns vector))
 (signature (vector-reverse-copy vec start end)
	    (returns vector))
 (fragment "vector-reverse-copy")
 (source (srfi 43))
 (kind procedure))
((signature (vector-append vec ...)
	    (returns vector))
 (fragment "vector-append")
 (source (srfi 43))
 (kind procedure))
((signature (vector-concatenate list-of-vectors)
	    (returns vector))
 (fragment "vector-concatenate")
 (source (srfi 43))
 (kind procedure))
((signature (vector? x)
	    (returns boolean))
 (fragment "vector-p")
 (source (srfi 43))
 (kind procedure))
((signature (vector-empty? vec)
	    (returns boolean))
 (fragment "vector-empty-p")
 (source (srfi 43))
 (kind procedure))
((signature (vector= elt=? vec ...)
	    (returns boolean))
 (fragment "vector-eq")
 (source (srfi 43))
 (kind procedure))
((signature (vector-ref vec i)
	    (returns value))
 (fragment "vector-ref")
 (source (srfi 43))
 (kind procedure))
((signature (vector-length vec)
	    (returns exact-nonnegative-integer))
 (fragment "vector-length")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fold kons knil vec1 vec2 ...)
	    (returns value))
 (fragment "vector-fold")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fold-right kons knil vec1 vec2 ...)
	    (returns value))
 (fragment "vector-fold-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-map! f vec1 vec2 ...)
	    (returns unspecified))
 (fragment "vector-map-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-for-each f vec1 vec2 ...)
	    (returns unspecified))
 (fragment "vector-for-each")
 (source (srfi 43))
 (kind procedure))
((signature (vector-count pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-count")
 (source (srfi 43))
 (kind procedure))
((signature (vector-index pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-index")
 (source (srfi 43))
 (kind procedure))
((signature (vector-index-right pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-index-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-skip pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-skip")
 (source (srfi 43))
 (kind procedure))
((signature (vector-skip-right pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-skip-right")
 (source (srfi 43))
 (kind procedure))
((signature (vector-binary-search vec value cmp)
	    (returns exact-nonnegative-integer))
 (fragment "vector-binary-search")
 (source (srfi 43))
 (kind procedure))
((signature (vector-any pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-any")
 (source (srfi 43))
 (kind procedure))
((signature (vector-every pred? vec1 vec2 ...)
	    (returns exact-nonnegative-integer))
 (fragment "vector-every")
 (source (srfi 43))
 (kind procedure))
((signature (vector-set! vec i value)
	    (returns unspecified))
 (fragment "vector-set-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-swap! vec i j)
	    (returns unspecified))
 (fragment "vector-swap-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-fill! vec fill)
	    (returns unspecified))
 (signature (vector-fill! vec fill start)
	    (returns unspecified))
 (signature (vector-fill! vec fill start end)
	    (returns unspecified))
 (fragment "vector-fill-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse! vec)
	    (returns unspecified))
 (signature (vector-reverse! vec start)
	    (returns unspecified))
 (signature (vector-reverse! vec start end)
	    (returns unspecified))
 (fragment "vector-reverse-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-copy! target tstart source)
	    (returns unspecified))
 (signature (vector-copy! target tstart source sstart)
	    (returns unspecified))
 (signature (vector-copy! target tstart source sstart send)
	    (returns unspecified))
 (fragment "vector-copy-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector-reverse-copy! target tstart source)
	    (returns unspecified))
 (signature (vector-reverse-copy! target tstart source  sstart)
	    (returns unspecified))
 (signature (vector-reverse-copy! target tstart source  sstart send)
	    (returns unspecified))
 (fragment "vector-reverse-copy-bang")
 (source (srfi 43))
 (kind procedure))
((signature (vector->list vec)
	    (returns proper-list))
 (signature (vector->list vec start)
	    (returns proper-list))
 (signature (vector->list vec start end)
	    (returns proper-list))
 (fragment "vector-to-list")
 (source (srfi 43))
 (kind procedure))
((signature (reverse-vector->list vec)
	    (returns proper-list))
 (signature (reverse-vector->list vec start)
	    (returns proper-list))
 (signature (reverse-vector->list vec start end)
	    (returns proper-list))
 (fragment "reverse-vector-to-list")
 (source (srfi 43))
 (kind procedure))
((signature (list->vector proper-list)
	    (returns vector))
 (fragment "list-to-vector")
 (source (srfi 43))
 (kind procedure))
((signature (reverse-list->vector proper-list)
	    (returns vector))
 (fragment "reverse-list-to-vector")
 (source (srfi 43))
 (kind procedure))
((signature (lazy exp))
 (source (srfi 45))
 (kind syntax))
((signature (delay exp))
 (source (srfi 45))
 (kind syntax))
((signature (eager x))
 (source (srfi 45))
 (kind procedure))
((signature (force promise))
 (source (srfi 45))
 (kind procedure))
((signature (logand n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-and n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (logior n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-ior n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (logxor n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-xor n1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (lognot n))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-not n))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-if mask n0 n1))
 (source (srfi 60))
 (kind procedure))
((signature (bitwise-merge mask n0 n1))
 (source (srfi 60))
 (kind procedure))
((signature (logtest j k))
 (source (srfi 60))
 (kind procedure))
((signature (any-bits-set? j k))
 (source (srfi 60))
 (kind procedure))
((signature (logcount n))
 (source (srfi 60))
 (kind procedure))
((signature (bit-count n))
 (source (srfi 60))
 (kind procedure))
((signature (integer-length n))
 (source (srfi 60))
 (kind procedure))
((signature (log2-binary-factors n))
 (source (srfi 60))
 (kind procedure))
((signature (first-set-bit n))
 (source (srfi 60))
 (kind procedure))
((signature (logbit? index n))
 (source (srfi 60))
 (kind procedure))
((signature (bit-set? index n))
 (source (srfi 60))
 (kind procedure))
((signature (copy-bit index from bit))
 (source (srfi 60))
 (kind procedure))
((signature (bit-field n start end))
 (source (srfi 60))
 (kind procedure))
((signature (copy-bit-field to from start end))
 (source (srfi 60))
 (kind procedure))
((signature (ash n count))
 (source (srfi 60))
 (kind procedure))
((signature (arithmetic-shift n count))
 (source (srfi 60))
 (kind procedure))
((signature (rotate-bit-field n count start end))
 (source (srfi 60))
 (kind procedure))
((signature (reverse-bit-field n start end))
 (source (srfi 60))
 (kind procedure))
((signature (integer->list k len))
 (source (srfi 60))
 (kind procedure))
((signature (integer->list k))
 (source (srfi 60))
 (kind procedure))
((signature (list->integer list))
 (source (srfi 60))
 (kind procedure))
((signature (booleans->integer bool1 ...))
 (source (srfi 60))
 (kind procedure))
((signature (make-hash-table) (returns hash-table))
 (signature (make-hash-table equal?) (returns hash-table))
 (signature (make-hash-table equal? hash) (returns hash-table))
 (signature (make-hash-table equal? hash args ...) (returns hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table? obj) (returns boolean))
 (source (srfi 69))
 (kind procedure))
((signature (alist->hash-table alist) (returns hash-table))
 (signature (alist->hash-table alist equal?) (returns hash-table))
 (signature (alist->hash-table alist equal? hash) (returns hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-equivalence-function hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-hash-function hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-ref hash-table key) (returns value))
 (signature (hash-table-ref hash-table key thunk) (returns value))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-ref/default hash-table key default) (returns value))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-set! hash-table key value) (returns undefined))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-delete! hash-table key) (returns undefined))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-exists? hash-table key) (returns boolean))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-update! hash-table key function))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-update!/default))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-size hash-table) (returns integer))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-keys hash-table) (returns list))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-values hash-table) (returns list))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-walk hash-table proc) (returns unspecified))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-fold hash-table f init-value))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table->alist hash-table) (returns alist))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-copy hash-table) (returns hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash-table-merge! hash-table1 hash-table2) (returns hash-table))
 (source (srfi 69))
 (kind procedure))
((signature (hash object) (returns integer))
 (signature (hash object bound) (returns integer))
 (source (srfi 69))
 (kind procedure))
((signature (string-hash string) (returns integer))
 (signature (string-hash string bound) (returns integer))
 (source (srfi 69))
 (kind procedure))
((signature (string-ci-hash string) (returns integer))
 (signature (string-ci-hash string bound) (returns integer))
 (source (srfi 69))
 (kind procedure))
((signature (hash-by-identity object) (returns integer))
 (signature (hash-by-identity object bound) (returns integer))
 (source (srfi 69))
 (kind procedure))
((signature (get-environment-variable name) (returns (or string #f)))
 (source (srfi 98))
 (kind procedure))
((signature (get-environment-variables) (returns alist))
 (source (srfi 98))
 (kind procedure))
((signature (option names required-arg? optional-arg? option-proc))
 (source (srfi 37))
 (kind procedure))
((signature (option-names option))
 (source (srfi 37))
 (kind procedure))
((signature (option-required-arg? option))
 (source (srfi 37))
 (kind procedure))
((signature (option-optional-arg? option))
 (source (srfi 37))
 (kind procedure))
((signature (option-processor option))
 (source (srfi 37))
 (kind procedure))
((signature (args-fold args options unrecognized-option-proc operand-proc seeds ...))
 (source (srfi 37))
 (kind procedure))
((signature (check expr (= equal) expected))
 (signature (check expr = expected))
 (source (srfi 78))
 (kind syntax))
((signature (check-ec qualifier... expr (= equal) expected (argument...)))
 (signature (check-ec qualifier... expr = expected (argument...)))
 (signature (check-ec qualifier... expr (= equal) expected))
 (signature (check-ec qualifier... expr = expected))
 (source (srfi 78))
 (kind syntax))
((signature (check-report))
 (source (srfi 78))
 (kind procedure))
((signature (check-set-mode! mode))
 (source (srfi 78))
 (kind procedure))
((signature (check-reset!))
 (source (srfi 78))
 (kind procedure))
((signature (check-passed? expected-total-count))
 (source (srfi 78))
 (kind procedure))
((signature (format format-string obj ...))
 (signature (format port format-string obj ...))
 (source (srfi 48))
 (kind procedure))
((signature (test-assert expression))
 (signature (test-assert test-name expression))
 (source (srfi 64))
 (kind syntax))
((signature (test-eqv expected test-expr))
 (signature (test-eqv test-name expected test-expr))
 (source (srfi 64))
 (kind syntax))
((signature (test-equal expected test-expr))
 (signature (test-equal test-name expected test-expr))
 (source (srfi 64))
 (kind syntax))
((signature (test-eq expected test-expr))
 (signature (test-eq test-name expected test-expr))
 (source (srfi 64))
 (kind syntax))
((signature (test-approximate expected test-expr error))
 (signature (test-approximate test-name expected test-expr error))
 (source (srfi 64))
 (kind syntax))
((signature (test-error test-expr))
 (signature (test-error error-type test-expr))
 (signature (test-error test-name error-type test-expr))
 (source (srfi 64))
 (kind syntax))
((signature (test-read-eval-string string))
 (source (srfi 64))
 (kind procedure))
((signature (test-begin suite-name))
 (signature (test-begin suite-name count))
 (source (srfi 64))
 (kind syntax))
((signature (test-end))
 (signature (test-end suite-name))
 (source (srfi 64))
 (kind syntax))
((signature (test-group suite-name decl-or-expr...))
 (source (srfi 64))
 (kind syntax))
((signature (test-group-with-cleanup suite-name decl-or-expr... cleanup-form))
 (source (srfi 64))
 (kind syntax))
((signature (test-match-name name))
 (source (srfi 64))
 (kind procedure))
((signature (test-match-nth n))
 (signature (test-match-nth n count))
 (source (srfi syntax))
 (kind procedure))
((signature (test-match-any specifier...))
 (source (srfi 64))
 (kind syntax))
((signature (test-match-all specifier...))
 (source (srfi 64))
 (kind syntax))
((signature (test-skip specifier))
 (source (srfi 64))
 (kind syntax))
((signature (test-expect-fail specifier))
 (source (srfi 64))
 (kind syntax))
((signature (test-runner? value))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-current))
 (source (srfi 64))
 (kind syntax))
((signature (test-runner-current runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-get))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-simple))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-null))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-create))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-factory))
 (signature (test-runner-factory factory))
 (source (srfi syntax))
 (kind procedure))
((signature (test-apply specifier... procedure))
 (signature (test-apply runner specifier... procedure))
 (source (srfi 64))
 (kind procedure))
((signature (test-with-runner runner decl-or-expr...))
 (source (srfi 64))
 (kind syntax))
((signature (test-result-kind))
 (signature (test-result-kind runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-passed?))
 (signature (test-passed? runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-result-ref runner pname))
 (signature (test-result-ref runner pname default))
 (source (srfi syntax))
 (kind procedure))
((signature (test-result-set! runner pname value))
 (source (srfi 64))
 (kind procedure))
((signature (test-result-remove runner pname))
 (source (srfi 64))
 (kind procedure))
((signature (test-result-clear runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-result-alist runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-test-end runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-test-end! runner on-test-end-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-group-begin runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-group-begin! runner on-group-begin-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-group-end runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-group-end! runner on-group-end-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-bad-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-bad-count! runner on-bad-count-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-bad-end-name runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-bad-end-name! runner on-bad-end-name-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-final runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-on-final! runner on-final-function))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-test-begin-simple runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-test-end-simple runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-group-begin-simple runner suite-name count))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-group-end-simple runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-bad-count-simple runner actual-count expected-count))
 (source (srfi 64))
 (kind procedure))
((signature (test-on-bad-end-name-simple runner begin-name end-name))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-pass-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-fail-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-xpass-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-xfail-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-skip-count runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-test-name runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-group-path runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-group-stack runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-aux-value runner))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-aux-value! runner on-test))
 (source (srfi 64))
 (kind procedure))
((signature (test-runner-reset runner))
 (source (srfi 64))
 (kind procedure))
((signature (sorted? sequence less?))
 (signature (sorted? sequence less? key))
 (source (srfi 95))
 (kind procedure))
((signature (merge list1 list2 less?))
 (signature (merge list1 list2 less? key))
 (source (srfi 95))
 (kind procedure))
((signature (merge! list1 list2 less?))
 (signature (merge! list1 list2 less? key))
 (source (srfi 95))
 (kind procedure))
((signature (sort sequence less?))
 (signature (sort sequence less? key))
 (source (srfi 95))
 (kind procedure))
((signature (sort! sequence less?))
 (signature (sort! sequence less? key))
 (source (srfi 95))
 (kind procedure))
((signature (require-extension (extension-identifier extension-argument ...) ...))
 (source (srfi 55))
 (kind syntax))
((signature (=?))
 (signature (=? x y))
 (signature (=? compare))
 (signature (=? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (<?))
 (signature (<? x y))
 (signature (<? compare))
 (signature (<? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (>?))
 (signature (>? x y))
 (signature (>? compare))
 (signature (>? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (<=?))
 (signature (<=? x y))
 (signature (<=? compare))
 (signature (<=? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (>=?))
 (signature (>=? x y))
 (signature (>=? compare))
 (signature (>=? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (not=?))
 (signature (not=? x y))
 (signature (not=? compare))
 (signature (not=? compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (</<?))
 (signature (</<? x y z))
 (signature (</<? compare))
 (signature (</<? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (</<=?))
 (signature (</<=? x y z))
 (signature (</<=? compare))
 (signature (</<=? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (<=/<?))
 (signature (<=/<? x y z))
 (signature (<=/<? compare))
 (signature (<=/<? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (<=/<=?))
 (signature (<=/<=? x y z))
 (signature (<=/<=? compare))
 (signature (<=/<=? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (>/>?))
 (signature (>/>? x y z))
 (signature (>/>? compare))
 (signature (>/>? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (>/>=?))
 (signature (>/>=? x y z))
 (signature (>/>=? compare))
 (signature (>/>=? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (>=/>?))
 (signature (>=/>? x y z))
 (signature (>=/>? compare))
 (signature (>=/>? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (>=/>=?))
 (signature (>=/>=? x y z))
 (signature (>=/>=? compare))
 (signature (>=/>=? compare x y z))
 (source (srfi 67))
 (kind procedure))
((signature (chain=? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (chain? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (chain? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (chain=? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (chain=? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (pairwise-not=? compare x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (min-compare compare x1 x2 ...))
 (source (srfi 67))
 (kind procedure))
((signature (max-compare compare x1 x2 ...))
 (source (srfi 67))
 (kind procedure))
((signature (kth-largest compare k x0 x1 ...))
 (source (srfi 67))
 (kind procedure))
((signature (compare-by< lt-pred))
 (compare-by< lt-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (compare-by> gt-pred))
 (compare-by> gt-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (compare-by<= le-pred))
 (compare-by<= le-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (compare-by>= ge-pred))
 (compare-by>= ge-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (compare-by=/< eq-pred lt-pred))
 (compare-by=/< eq-pred lt-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (compare-by=/> eq-pred gt-pred))
 (compare-by=/> eq-pred gt-pred x y)
 (source (srfi 67))
 (kind procedure))
((signature (debug-compare compare))
 (source (srfi 67))
 (kind procedure))
((signature (boolean-compare bool1 bool2))
 (source (srfi 67))
 (kind procedure))
((signature (char-compare char1 char2))
 (source (srfi 67))
 (kind procedure))
((signature (char-compare-ci char1 char2))
 (source (srfi 67))
 (kind procedure))
((signature (string-compare string1 string2))
 (source (srfi 67))
 (kind procedure))
((signature (string-compare-ci string1 string2))
 (source (srfi 67))
 (kind procedure))
((signature (symbol-compare symbol1 symbol2))
 (source (srfi 67))
 (kind procedure))
((signature (integer-compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (rational-compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (real-compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (complex-compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (number-compare x y))
 (source (srfi 67))
 (kind procedure))
((signature (vector-compare x y))
 (signature (vector-compare compare x y))
 (signature (vector-compare x y size ref))
 (signature (vector-compare compare x y size ref))
 (source (srfi 67))
 (kind procedure))
((signature (vector-compare-as-list x y))
 (signature (vector-compare-as-list compare x y))
 (signature (vector-compare-as-list x y size ref))
 (signature (vector-compare-as-list compare x y size ref))
 (source (srfi 67))
 (kind procedure))
((signature (list-compare x y))
 (signature (list-compare compare x y))
 (signature (list-compare x y empty? head tail))
 (signature (list-compare compare x y empty? head tail))
 (source (srfi 67))
 (kind procedure))
((signature (list-compare-as-vector x y))
 (signature (list-compare-as-vector compare x y))
 (signature (list-compare-as-vector x y empty? head tail))
 (signature (list-compare-as-vector compare x y empty? head tail))
 (source (srfi 67))
 (kind procedure))
((signature (pair-compare-car compare))
 (source (srfi 67))
 (kind procedure))
((signature (pair-compare-cdr compare))
 (source (srfi 67))
 (kind procedure))
((signature (pair-compare compare-car compare-cdr pair1 pair2))
 (signature (pair-compare obj1 obj2))
 (signature (pair-compare compare obj1 obj2))
 (source (srfi 67))
 (kind procedure))
((signature (default-compare obj1 obj2))
 (source (srfi 67))
 (kind procedure))
((signature (refine-compare c1 ...))
 (source (srfi 67))
 (kind syntax))
((signature (select-compare x1 x2))
 (source (srfi 67))
 (kind syntax))
((signature (cond-compare clause1 ...))
 (source (srfi 67))
 (kind syntax))
((signature (if3 c less equal greater))
 (source (srfi 67))
 (kind syntax))
((signature (if=? c consequent))
 (signature (if=? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (if? c consequent))
 (signature (if? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (if? c consequent))
 (signature (if? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (if=? c consequent))
 (signature (if=? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (if=? c consequent))
 (signature (if=? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (if-not=? c consequent))
 (signature (if-not=? c consequent alternate))
 (source (srfi 67))
 (kind syntax))
((signature (comparator? obj))
 (source (srfi 128))
 (kind procedure))
((signature (make-comparator type-test equality ordering hash))
 (source (srfi 128))
 (kind procedure))
((signature (make-pair-comparator car-comparator cdr-comparator))
 (source (srfi 128))
 (kind procedure))
((signature (make-list-comparator element-comparator type-test empty? head tail))
 (source (srfi 128))
 (kind procedure))
((signature (make-eq-comparator))
 (source (srfi 128))
 (kind procedure))
((signature (make-eqv-comparator))
 (source (srfi 128))
 (kind procedure))
((signature (make-equal-comparator))
 (source (srfi 128))
 (kind procedure))
((signature (boolean-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (char-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (char-ci-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (string-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (string-ci-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (symbol-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (number-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (make-default-comparator))
 (source (srfi 128))
 (kind procedure))
((signature (default-hash obj))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-type-test-predicate comparator))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-equality-predicate comparator))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-ordering-predicate comparator))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-hash-function comparator))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-test-type comparator obj))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-check-type comparator obj))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-hash comparator obj))
 (source (srfi 128))
 (kind procedure))
((signature (=? comparator object1 object2 object3 ...))
 (source (srfi 128))
 (kind procedure))
((signature (<? comparator object1 object2 object3 ...))
 (source (srfi 128))
 (kind procedure))
((signature (>? comparator object1 object2 object3 ...))
 (source (srfi 128))
 (kind procedure))
((signature (<=? comparator object1 object2 object3 ...))
 (source (srfi 128))
 (kind procedure))
((signature (>=? comparator object1 object2 object3 ...))
 (source (srfi 128))
 (kind procedure))
((signature (comparator-if= object1 object2 less-than equal-to greater-than))
 (signature (comparator-if= comparator object1 object2 less-than equal-to greater-than))
 (source (srfi 128))
 (kind syntax))
((signature array? obj)
 (source (srfi 63))
 (kind procedure))
((signature equal? obj1 obj2)
 (source (srfi 63))
 (kind procedure))
((signature array-rank obj)
 (source (srfi 63))
 (kind procedure))
((signature array-dimensions array)
 (source (srfi 63))
 (kind procedure))
((signature make-array prototype k1 ...)
 (source (srfi 63))
 (kind procedure))
((signature make-shared-array array mapper k1 ...)
 (source (srfi 63))
 (kind procedure))
((signature list->array rank proto list)
 (source (srfi 63))
 (kind procedure))
((signature array->list array)
 (source (srfi 63))
 (kind procedure))
((signature vector->array vect proto dim1 ...)
 (source (srfi 63))
 (kind procedure))
((signature array->vector array)
 (source (srfi 63))
 (kind procedure))
((signature array-in-bounds? array index1 ...)
 (source (srfi 63))
 (kind procedure))
((signature array-ref array k1 ...)
 (source (srfi 63))
 (kind procedure))
((signature array-set! array obj k1 ...)
 (source (srfi 63))
 (kind procedure))
((signature a:floc128b z)
 (signature a:floc128b)
 (source (srfi 63))
 (kind procedure))
((signature a:floc64b z)
 (signature a:floc64b)
 (source (srfi 63))
 (kind procedure))
((signature a:floc32b z)
 (signature a:floc32b)
 (source (srfi 63))
 (kind procedure))
((signature a:floc16b z)
 (signature a:floc16b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor128b z)
 (signature a:flor128b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor64b z)
 (signature a:flor64b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor32b z)
 (signature a:flor32b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor16b z)
 (signature a:flor16b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor128b z)
 (signature a:flor128b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor64b z)
 (signature a:flor64b)
 (source (srfi 63))
 (kind procedure))
((signature a:flor32b z)
 (signature a:flor32b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixz64b n)
 (signature a:fixz64b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixz32b n)
 (signature a:fixz32b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixz16b n)
 (signature a:fixz16b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixz8b n)
 (signature a:fixz8b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixn64b k)
 (signature a:fixn64b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixn32b k)
 (signature a:fixn32b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixn16b k)
 (signature a:fixn16b)
 (source (srfi 63))
 (kind procedure))
((signature a:fixn8b k)
 (signature a:fixn8b)
 (source (srfi 63))
 (kind procedure))
((signature a:bool bool)
 (signature a:bool)
 (source (srfi 63))
 (kind procedure))
((signature (u8vector? obj))
 (source (srfi 66))
 (kind procedure))
((signature (make-u8vector k fill))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector octet ...))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector->list u8vector))
 (source (srfi 66))
 (kind procedure))
((signature (list->u8vector octets))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-length u8vector))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-ref u8vector k))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-set! u8vector k octet))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector=? u8vector-1 u8vector-2))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-compare u8vector-1 u8vector-2))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-copy! source source-start target target-start n))
 (source (srfi 66))
 (kind procedure))
((signature (u8vector-copy u8vector))
 (source (srfi 66))
 (kind procedure))
((signature (make-rtd name fieldspecs))
 (signature (make-rtd name fieldspecs parent))
 (source (srfi 99))
 (kind procedure))
((signature (rtd? obj))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-constructor rtd))
 (signature (rtd-constructor rtd fieldspecs))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-predicate rtd))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-accessor rtd field))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-mutator rtd field))
 (source (srfi 99))
 (kind procedure))
((signature (record? obj))
 (source (srfi 99))
 (kind procedure))
((signature (record-rtd record))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-name rtd))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-parent rtd))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-field-names rtd))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-all-field-names rtd))
 (source (srfi 99))
 (kind procedure))
((signature (rtd-field-mutable? rtd field))
 (source (srfi 99))
 (kind procedure))
((signature (define-record-type type-spec constructor-spec predicate-spec field-spec ...))
 (source (srfi 99))
 (kind syntax))
((signature (box value))
 (source (srfi 111))
 (kind procedure))
((signature (box? object))
 (source (srfi 111))
 (kind procedure))
((signature (unbox box))
 (source (srfi 111))
 (kind procedure))
((signature (set-box! box value))
 (source (srfi 111))
 (kind procedure))
((signature (make-list-queue list))
 (signature (make-list-queue list last))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue element ...))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-copy list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-unfold stop? mapper successor seed))
 (signature (list-queue-unfold stop? mapper successor seed queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-unfold-right stop? mapper successor seed))
 (signature (list-queue-unfold-right stop? mapper successor seed queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue? obj))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-empty? list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-front list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-back list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-list list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-first-last list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-add-front! list-queue element))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-add-back! list-queue element))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-remove-front! list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-remove-back! list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-remove-all! list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-set-list! list-queue list))
 (signature (list-queue-set-list! list-queue list last))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-append list-queue ...))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-append! list-queue ...))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-concatenate list-of-list-queues))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-map proc list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-map! proc list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (list-queue-for-each proc list-queue))
 (source (srfi 117))
 (kind procedure))
((signature (make-hash-table comparator))
 (signature (make-hash-table comparator arg ...))
 (signature (make-hash-table equality-predicate))
 (signature (make-hash-table equality-predicate hash-function))
 (signature (make-hash-table equality-predicate arg ...))
 (signature (make-hash-table equality-predicate hash-function arg ...))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table comparator))
 (signature (hash-table comparator key value ...))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-unfold stop? mapper successor seed comparator arg ...))
 (source (srfi 125))
 (kind procedure))
((signature (alist->hash-table alist comparator arg ...))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table? obj))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-contains? hash-table key))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-exists? hash-table key))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-empty? hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table=? value-comparator hash-table1 hash-table2))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-mutable? hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-ref hash-table key))
 (signature (hash-table-ref hash-table key failure))
 (signature (hash-table-ref hash-table key failure success))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-ref/default hash-table key default))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-set! hash-table arg ...))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-delete! hash-table key ...))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-intern! hash-table key failure))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-update! hash-table key updater))
 (signature (hash-table-update! hash-table key updater failure))
 (signature (hash-table-update! hash-table key updater failure success))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-update!/default hash-table key updater default))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-pop! hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-clear! hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-size hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-keys hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-values hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-entries hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-find proc hash-table failure))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-count pred hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-map proc comparator hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (make-hash-table comparator))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-for-each proc hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-map! proc hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-map->list proc hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-fold proc seed hash-table))
 (signature (hash-table-fold hash-table proc seed))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-prune! proc hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-copy hash-table))
 (signature (hash-table-copy hash-table mutable?))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-empty-copy hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table->alist hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-union! hash-table1 hash-table2))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-intersection! hash-table1 hash-table2))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-difference! hash-table1 hash-table2))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-xor! hash-table1 hash-table2))
 (source (srfi 125))
 (kind procedure))
((signature (hash obj))
 (signature (hash obj arg))
 (source (srfi 125))
 (kind procedure))
((signature (string-hash obj))
 (signature (string-hash obj arg))
 (source (srfi 125))
 (kind procedure))
((signature (string-ci-hash obj))
 (signature (string-ci-hash obj arg))
 (source (srfi 125))
 (kind procedure))
((signature (string-by-identity obj))
 (signature (string-by-identity obj arg))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-equivalence-function hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (hash-table-hash-function hash-table))
 (source (srfi 125))
 (kind procedure))
((signature (generator->lseq generator) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq? x) (returns boolean))
 (source (srfi 127))
 (kind procedure))
((signature (lseq=? elt=? lseq1 lseq2) (returns boolean))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-car lseq) (returns object))
 (signature (lseq-first lseq) (returns object))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-cdr lseq) (returns lseq))
 (signature (lseq-rest lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-ref lseq i) (returns value))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-take lseq i) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-drop lseq i) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-realize lseq) (returns list))
 (source (srfi 127))
 (kind procedure))
((signature (lseq->generator lseq) (returns generator))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-length lseq) (returns integer))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-append lseq ...) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-zip lseq1 lseq2 ...) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-map proc lseq1 lseq2 ...) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-for-each proc lseq1 lseq2 ...) (returns unspecified))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-filter pred lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-remove pred lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-find pred lseq) (returns value))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-find-tail pred lseq) (returns (or lseq #f)))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-take-while pred lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-drop-while pred lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-any pred lseq1 lseq2 ...) (returns value))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-every pred lseq1 lseq2 ...) (returns value))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-index pred lseq1 lseq2 ...) (returns (or integer #f)))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-member x lseq) (returns lseq))
 (signature (lseq-member x lseq pred) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-memq x lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (lseq-memv x lseq) (returns lseq))
 (source (srfi 127))
 (kind procedure))
((signature (make-vector size) (returns vector))
 (signature (make-vector size fill) (returns vector))
 (fragment "make-vector")
 (source (srfi 133))
 (kind procedure))
((signature (vector x ...) (returns vector))
 (fragment "vector")
 (source (srfi 133))
 (kind procedure))
((signature (vector-unfold f length initial-seed ...) (returns vector))
 (fragment "vector-unfold")
 (source (srfi 133))
 (kind procedure))
((signature (vector-unfold-right f length initial-seed ...) (returns vector))
 (fragment "vector-unfold-right")
 (source (srfi 133))
 (kind procedure))
((signature (vector-copy vec) (returns vector))
 (signature (vector-copy vec start) (returns vector))
 (signature (vector-copy vec start end) (returns vector))
 (fragment "vector-copy")
 (source (srfi 133))
 (kind procedure))
((signature (vector-reverse-copy vec) (returns vector))
 (signature (vector-reverse-copy vec start) (returns vector))
 (signature (vector-reverse-copy vec start end) (returns vector))
 (fragment "vector-reverse-copy")
 (source (srfi 133))
 (kind procedure))
((signature (vector-append vec ...) (returns vector))
 (fragment "vector-append")
 (source (srfi 133))
 (kind procedure))
((signature (vector-concatenate list-of-vectors) (returns vector))
 (fragment "vector-concatenate")
 (source (srfi 133))
 (kind procedure))
((signature (vector-append-subvectors ...) (returns vector))
 (signature (vector-append-subvectors vec ...) (returns vector))
 (signature (vector-append-subvectors vec start ...) (returns vector))
 (signature (vector-append-subvectors vec start end ...) (returns vector))
 (fragment "vector-append-subvectors")
 (source (srfi 133))
 (kind procedure))
((signature (vector? x) (returns boolean))
 (fragment "vector-p")
 (source (srfi 133))
 (kind procedure))
((signature (vector-empty? vec) (returns boolean))
 (fragment "vector-empty-p")
 (source (srfi 133))
 (kind procedure))
((signature (vector= elt=? vec ...) (returns boolean))
 (fragment "vector-eq")
 (source (srfi 133))
 (kind procedure))
((signature (vector-ref vec i) (returns value))
 (fragment "vector-ref")
 (source (srfi 133))
 (kind procedure))
((signature (vector-length vec) (returns exact-nonnegative-integer))
 (fragment "vector-length")
 (source (srfi 133))
 (kind procedure))
((signature (vector-fold kons knil vec 1 vec 2 ...) (returns value))
 (fragment "vector-fold")
 (source (srfi 133))
 (kind procedure))
((signature (vector-fold-right kons knil vec 1 vec 2 ...) (returns value))
 (fragment "vector-fold-right")
 (source (srfi 133))
 (kind procedure))
((signature (vector-map f vec 1 vec 2 ...) (returns vector))
 (fragment "vector-map")
 (source (srfi 133))
 (kind procedure))
((signature (vector-map! f vec 1 vec 2 ...) (returns unspecified))
 (fragment "vector-map-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-for-each f vec 1 vec 2 ...) (returns unspecified))
 (fragment "vector-for-each")
 (source (srfi 133))
 (kind procedure))
((signature (vector-count pred? vec 1 vec 2 ...) (returns exact-nonnegative-integer))
 (fragment "vector-count")
 (source (srfi 133))
 (kind procedure))
((signature (vector-cumulate f knil vec) (returns vector))
 (fragment "vector-cumulate")
 (source (srfi 133))
 (kind procedure))
((signature (vector-index pred? vec 1 vec 2 ...) (returns (or exact-nonnegative-integer #f)))
 (fragment "vector-index")
 (source (srfi 133))
 (kind procedure))
((signature (vector-index-right pred? vec 1 vec 2 ...) (returns (or exact-nonnegative-integer #f)))
 (fragment "vector-index-right")
 (source (srfi 133))
 (kind procedure))
((signature (vector-skip pred? vec 1 vec 2 ...) (returns (or exact-nonnegative-integer #f)))
 (fragment "vector-skip")
 (source (srfi 133))
 (kind procedure))
((signature (vector-skip-right pred? vec 1 vec 2 ...) (returns (or exact-nonnegative-integer #f)))
 (fragment "vector-skip-right")
 (source (srfi 133))
 (kind procedure))
((signature (vector-binary-search vec value cmp) (returns (or exact-nonnegative-integer #f)))
 (fragment "vector-binary-search")
 (source (srfi 133))
 (kind procedure))
((signature (vector-any pred? vec 1 vec 2 ...) (returns value or #f))
 (fragment "vector-any")
 (source (srfi 133))
 (kind procedure))
((signature (vector-every pred? vec 1 vec 2 ...) (returns value or #f))
 (fragment "vector-every")
 (source (srfi 133))
 (kind procedure))
((signature (vector-partition pred? vec) (returns vector and integer))
 (fragment "vector-partition")
 (source (srfi 133))
 (kind procedure))
((signature (vector-set! vec i value) (returns unspecified))
 (fragment "vector-set-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-swap! vec i j) (returns unspecified))
 (fragment "vector-swap-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-fill! vec fill) (returns unspecified))
 (signature (vector-fill! vec fill start) (returns unspecified))
 (signature (vector-fill! vec fill start end) (returns unspecified))
 (fragment "vector-fill-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-reverse! vec) (returns unspecified))
 (signature (vector-reverse! vec start) (returns unspecified))
 (signature (vector-reverse! vec start end) (returns unspecified))
 (fragment "vector-reverse-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-copy! to at from) (returns unspecified))
 (signature (vector-copy! to at from start) (returns unspecified))
 (signature (vector-copy! to at from start end) (returns unspecified))
 (fragment "vector-copy-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-reverse-copy! to at from) (returns unspecified))
 (signature (vector-reverse-copy! to at from start) (returns unspecified))
 (signature (vector-reverse-copy! to at from start end) (returns unspecified))
 (fragment "vector-reverse-copy-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-unfold! f vec start end initial-seed ...) (returns unspecified))
 (fragment "vector-unfold-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector-unfold-right! f vec start end initial-seed ...) (returns unspecified))
 (fragment "vector-unfold-right-bang")
 (source (srfi 133))
 (kind procedure))
((signature (vector->list vec) (returns proper-list))
 (signature (vector->list vec start) (returns proper-list))
 (signature (vector->list vec start end) (returns proper-list))
 (fragment "vector-to-list")
 (source (srfi 133))
 (kind procedure))
((signature (reverse-vector->list vec) (returns proper-list))
 (signature (reverse-vector->list vec start) (returns proper-list))
 (signature (reverse-vector->list vec start end) (returns proper-list))
 (fragment "reverse-vector-to-list")
 (source (srfi 133))
 (kind procedure))
((signature (list->vector proper-list) (returns vector))
 (fragment "list-to-vector")
 (source (srfi 133))
 (kind procedure))
((signature (reverse-list->vector proper-list) (returns vector))
 (fragment "reverse-list-to-vector")
 (source (srfi 133))
 (kind procedure))
((signature (string->vector string) (returns vector))
 (signature (string->vector string start) (returns vector))
 (signature (string->vector string start end) (returns vector))
 (fragment "string-to-vector")
 (source (srfi 133))
 (kind procedure))
((signature (vector->string vec) (returns string))
 (signature (vector->string vec start) (returns string))
 (signature (vector->string vec start end) (returns string))
 (fragment "vector-to-string")
 (source (srfi 133))
 (kind procedure))
((signature stream-null)
 (source (srfi 40))
 (kind constant))
((signature (stream-cons object stream))
 (source (srfi 40))
 (kind syntax))
((signature (stream? object))
 (source (srfi 40))
 (kind procedure))
((signature (stream-null? object))
 (source (srfi 40))
 (kind procedure))
((signature (stream-pair? object))
 (source (srfi 40))
 (kind procedure))
((signature (stream-car stream))
 (source (srfi 40))
 (kind procedure))
((signature (stream-cdr stream))
 (source (srfi 40))
 (kind procedure))
((signature (stream-delay expression))
 (source (srfi 40))
 (kind syntax))
((signature (stream-unfoldn generator seed n))
 (source (srfi 40))
 (kind procedure))
((signature (stream-map function stream ...))
 (source (srfi 40))
 (kind procedure))
((signature (stream-for-each procedure stream ...))
 (source (srfi 40))
 (kind procedure))
((signature (stream-filter predicate? stream))
 (source (srfi 40))
 (kind procedure))
((signature (program-vicinity))
 (fragment "IDX60")
 (source (srfi 59))
 (kind procedure))
((signature (library-vicinity))
 (fragment "IDX61")
 (source (srfi 59))
 (kind procedure))
((signature (implementation-vicinity))
 (fragment "IDX62")
 (source (srfi 59))
 (kind procedure))
((signature (user-vicinity))
 (fragment "IDX63")
 (source (srfi 59))
 (kind procedure))
((signature (home-vicinity))
 (fragment "IDX64")
 (source (srfi 59))
 (kind procedure))
((signature (in-vicinity vicinity filename))
 (fragment "IDX67")
 (source (srfi 59))
 (kind procedure))
((signature (sub-vicinity vicinity name))
 (fragment "IDX68")
 (source (srfi 59))
 (kind procedure))
((signature (make-vicinity dirpath))
 (fragment "IDX58")
 (source (srfi 59))
 (kind procedure))
((signature (pathname->vicinity path))
 (fragment "IDX59")
 (source (srfi 59))
 (kind procedure))
((signature (vicinity:suffix? chr))
 (fragment "IDX66")
 (source (srfi 59))
 (kind procedure))
((signature (endianness big))
 (source (srfi 74))
 (kind syntax))
((signature (endianness little))
 (source (srfi 74))
 (kind syntax))
((signature (endianness native))
 (source (srfi 74))
 (kind syntax))
((signature (blob? obj))
 (source (srfi 74))
 (kind procedure))
((signature (make-blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-length blob))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u8-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s8-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u8-set! blob k octet))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s8-set! blob k byte))
 (source (srfi 74))
 (kind procedure))
((signature (blob-uint-ref size endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-sint-ref size endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-uint-set! size endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-sint-set! size endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u16-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s16-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u16-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s16-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u16-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s16-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u16-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s16-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u32-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s32-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u32-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s32-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u32-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s32-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u32-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s32-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u64-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s64-ref endianness blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u64-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s64-native-ref blob k))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u64-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s64-set! endianness blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-u64-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-s64-native-set! blob k n))
 (source (srfi 74))
 (kind procedure))
((signature (blob=? blob-1 blob-2))
 (source (srfi 74))
 (kind procedure))
((signature (blob-copy! source source-start target target-start n))
 (source (srfi 74))
 (kind procedure))
((signature (blob-copy blob))
 (source (srfi 74))
 (kind procedure))
((signature (blob->u8-list blob))
 (source (srfi 74))
 (kind procedure))
((signature (u8-list->blob blob))
 (source (srfi 74))
 (kind procedure))
((signature (blob->uint-list size endianness blob))
 (source (srfi 74))
 (kind procedure))
((signature (blob->sint-list size endianness blob))
 (source (srfi 74))
 (kind procedure))
((signature (uint-list->blob size endianness list))
 (source (srfi 74))
 (kind procedure))
((signature (sint-list->blob size endianness list))
 (source (srfi 74))
 (kind procedure))
((signature (keyword? obj))
 (source (srfi 88))
 (kind procedure))
((signature (keyword->string keyword))
 (source (srfi 88))
 (kind procedure))
((signature (string->keyword string))
 (source (srfi 88))
 (kind procedure))
((signature (equal? obj1 obj2) (returns bool))
 (source (srfi 101))
 (kind procedure))
((signature (pair? obj) (returns bool))
 (source (srfi 101))
 (kind procedure))
((signature (cons obj1 obj2) (returns pair))
 (source (srfi 101))
 (kind procedure))
((signature (car pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (cdr pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (caar pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (cadr pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (cdddar pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (cddddr pair) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (null? obj) (returns bool))
 (source (srfi 101))
 (kind procedure))
((signature (list? obj) (returns bool))
 (source (srfi 101))
 (kind procedure))
((signature (list obj ...) (returns list))
 (source (srfi 101))
 (kind procedure))
((signature (make-list k) (returns list))
 (source (srfi 101))
 (kind procedure))
((signature (make-list k obj) (returns list))
 (source (srfi 101))
 (kind procedure))
((signature (length list) (returns k))
 (source (srfi 101))
 (kind procedure))
((signature (length<=? obj k) (returns bool))
 (source (srfi 101))
 (kind procedure))
((signature (append list ... obj) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (reverse list) (returns list))
 (source (srfi 101))
 (kind procedure))
((signature (list-tail obj k) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (list-ref pair k) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (list-set pair k obj) (returns obj))
 (source (srfi 101))
 (kind procedure))
((signature (list-ref/update pair k proc) (returns obj1 obj2))
 (source (srfi 101))
 (kind procedure))
((signature (map proc list1 list2 ...) (returns list))
 (source (srfi 101))
 (kind procedure))
((signature (for-each proc list1 list2 ...) (returns unspecified))
 (source (srfi 101))
 (kind procedure))
((signature (random-access-list->linear-access-list ra-list) (returns la-list))
 (source (srfi 101))
 (kind procedure))
((signature (linear-access-list->random-access-list la-list) (returns ra-list))
 (source (srfi 101))
 (kind procedure))
((signature (set comparator element ...))
 (source (srfi 113))
 (kind procedure))
((signature (set-unfold comparator stop? mapper successor seed))
 (source (srfi 113))
 (kind procedure))
((signature (set? obj))
 (source (srfi 113))
 (kind procedure))
((signature (set-contains? set element))
 (source (srfi 113))
 (kind procedure))
((signature (set-empty? set))
 (source (srfi 113))
 (kind procedure))
((signature (set-disjoint? set1 set2))
 (source (srfi 113))
 (kind procedure))
((signature (set-member set element default))
 (source (srfi 113))
 (kind procedure))
((signature (set-element-comparator set))
 (source (srfi 113))
 (kind procedure))
((signature (set-adjoin set element ...))
 (source (srfi 113))
 (kind procedure))
((signature (set-adjoin! set element ...))
 (source (srfi 113))
 (kind procedure))
((signature (set-replace set element))
 (source (srfi 113))
 (kind procedure))
((signature (set-replace! set element))
 (source (srfi 113))
 (kind procedure))
((signature (set-delete set element ...))
 (source (srfi 113))
 (kind procedure))
((signature (set-delete! set element ...))
 (source (srfi 113))
 (kind procedure))
((signature (set-delete-all set element-list))
 (source (srfi 113))
 (kind procedure))
((signature (set-delete-all! set element-list))
 (source (srfi 113))
 (kind procedure))
((signature (set-search! set element failure success))
 (source (srfi 113))
 (kind procedure))
((signature (set-map comparator proc set))
 (source (srfi 113))
 (kind procedure))
((signature (set-for-each proc set))
 (source (srfi 113))
 (kind procedure))
((signature (set-fold proc nil set))
 (source (srfi 113))
 (kind procedure))
((signature (set-filter predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-filter! predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-remove predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-remove! predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-partition predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-partition! predicate set))
 (source (srfi 113))
 (kind procedure))
((signature (set-copy set))
 (source (srfi 113))
 (kind procedure))
((signature (set=? set1 set2 ...))
 (source (srfi 113))
 (kind procedure))
((signature (bag-sum set1 set2 ...))
 (source (srfi 113))
 (kind procedure))
((signature (bag-sum! bag1 bag2 ...))
 (source (srfi 113))
 (kind procedure))
((signature (bag-product n bag))
 (source (srfi 113))
 (kind procedure))
((signature (bag-product! n bag))
 (source (srfi 113))
 (kind procedure))
((signature (generator arg ...))
 (source (srfi 121))
 (kind procedure))
((signature (make-iota-generator count))
 (signature (make-iota-generator count start))
 (signature (make-iota-generator count start step))
 (source (srfi 121))
 (kind procedure))
((signature (make-range-generator start))
 (signature (make-range-generator start end))
 (signature (make-range-generator start end step))
 (source (srfi 121))
 (kind procedure))
((signature (make-coroutine-generator proc))
 (source (srfi 121))
 (kind procedure))
((signature (list->generator lis))
 (source (srfi 121))
 (kind procedure))
((signature (vector->generator vec))
 (signature (vector->generator vec start))
 (signature (vector->generator vec start end))
 (source (srfi 121))
 (kind procedure))
((signature (reverse-vector->generator vec))
 (signature (reverse-vector->generator vec start))
 (signature (reverse-vector->generator vec start end))
 (source (srfi 121))
 (kind procedure))
((signature (string->generator str))
 (signature (string->generator str start))
 (signature (string->generator str start end))
 (source (srfi 121))
 (kind procedure))
((signature (bytevector->generator bytevector))
 (signature (bytevector->generator bytevector start))
 (signature (bytevector->generator bytevector start end))
 (source (srfi 121))
 (kind procedure))
((signature (make-for-each-generator for-each obj))
 (source (srfi 121))
 (kind procedure))
((signature (make-unfold-generator stop? mapper successor seed))
 (source (srfi 121))
 (kind procedure))
((signature (gcons* item ... gen))
 (source (srfi 121))
 (kind procedure))
((signature (gappend gen ...))
 (source (srfi 121))
 (kind procedure))
((signature (gcombine proc seed gen gen2 ...))
 (source (srfi 121))
 (kind procedure))
((signature (gfilter pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (gremove pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (gtake gen k))
 (signature (gtake gen k padding))
 (source (srfi 121))
 (kind procedure))
((signature (gdrop gen k))
 (source (srfi 121))
 (kind procedure))
((signature (gtake-while pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (gdrop-while pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (gdelete item gen))
 (signature (gdelete item gen =))
 (source (srfi 121))
 (kind procedure))
((signature (gdelete-neighbor-dups gen))
 (signature (gdelete-neighbor-dups gen =))
 (source (srfi 121))
 (kind procedure))
((signature (gindex value-gen index-gen))
 (source (srfi 121))
 (kind procedure))
((signature (gselect value-gen truth-gen))
 (source (srfi 121))
 (kind procedure))
((signature (generator->list generator))
 (signature (generator->list generator k))
 (source (srfi 121))
 (kind procedure))
((signature (generator->reverse-list generator))
 (signature (generator->reverse-list generator k))
 (source (srfi 121))
 (kind procedure))
((signature (generator->vector generator))
 (signature (generator->vector generator k))
 (source (srfi 121))
 (kind procedure))
((signature (generator->vector! vector at generator))
 (source (srfi 121))
 (kind procedure))
((signature (generator->string generator))
 (signature (generator->string generator k))
 (source (srfi 121))
 (kind procedure))
((signature (generator-fold proc seed gen1 gen2 ...))
 (source (srfi 121))
 (kind procedure))
((signature (generator-for-each proc gen gen2 ...))
 (source (srfi 121))
 (kind procedure))
((signature (generator-find pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (generator-count pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (generator-any pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (generator-every pred gen))
 (source (srfi 121))
 (kind procedure))
((signature (generator-unfold gen unfold arg ...))
 (source (srfi 121))
 (kind procedure))
((signature (char-title-case?))
 (source (srfi 129))
 (kind procedure))
((signature (char-titlecase))
 (source (srfi 129))
 (kind procedure))
((signature (string-titlecase))
 (source (srfi 129))
 (kind procedure))
((signature (define-record-type))
 (source (srfi 131))
 (kind syntax))
((signature (list-sorted? < lis))
 (source (srfi 132))
 (kind procedure))
((signature (vector-sorted? < v))
 (signature (vector-sorted? < v start))
 (signature (vector-sorted? < v start end))
 (source (srfi 132))
 (kind procedure))
((signature (list-sort < lis))
 (source (srfi 132))
 (kind procedure))
((signature (list-stable-sort < lis))
 (source (srfi 132))
 (kind procedure))
((signature (list-sort! < lis))
 (source (srfi 132))
 (kind procedure))
((signature (list-stable-sort! < lis))
 (source (srfi 132))
 (kind procedure))
((signature (vector-sort < v))
 (signature (vector-sort < v start))
 (signature (vector-sort < v start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-stable-sort < v))
 (signature (vector-stable-sort < v start))
 (signature (vector-stable-sort < v start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-sort! < v))
 (signature (vector-sort! < v start))
 (signature (vector-sort! < v start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-stable-sort! < v))
 (signature (vector-stable-sort! < v start))
 (signature (vector-stable-sort! < v start end))
 (source (srfi 132))
 (kind procedure))
((signature (list-merge < lis1 lis2))
 (source (srfi 132))
 (kind procedure))
((signature (list-merge! < lis1 lis2))
 (source (srfi 132))
 (kind procedure))
((signature (vector-merge < v1 v2))
 (signature (vector-merge < v1 v2 start1))
 (signature (vector-merge < v1 v2 start1 end1))
 (signature (vector-merge < v1 v2 start1 end1 start2))
 (signature (vector-merge < v1 v2 start1 end1 start2 end2))
 (source (srfi 132))
 (kind procedure))
((signature (vector-merge! < to from1 from2))
 (signature (vector-merge! < to from1 from2 start))
 (signature (vector-merge! < to from1 from2 start start1))
 (signature (vector-merge! < to from1 from2 start start1 end1))
 (signature (vector-merge! < to from1 from2 start start1 end1 start2))
 (source (srfi 132))
 (kind procedure))
((signature (list-delete-neighbor-dups = lis))
 (source (srfi 132))
 (kind procedure))
((signature (list-delete-neighbor-dups! = lis))
 (source (srfi 132))
 (kind procedure))
((signature (vector-delete-neighbor-dups = v))
 (signature (vector-delete-neighbor-dups = v start))
 (signature (vector-delete-neighbor-dups = v start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-delete-neighbor-dups! = v))
 (signature (vector-delete-neighbor-dups! = v start))
 (signature (vector-delete-neighbor-dups! = v start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-find-median < v knil))
 (signature (vector-find-median < v knil mean))
 (source (srfi 132))
 (kind procedure))
((signature (vector-find-median! < v knil))
 (signature (vector-find-median! < v knil mean))
 (source (srfi 132))
 (kind procedure))
((signature (vector-select! < v k))
 (signature (vector-select! < v k start))
 (signature (vector-select! < v k start end))
 (source (srfi 132))
 (kind procedure))
((signature (vector-separate! < v k))
 (signature (vector-separate! < v k start))
 (signature (vector-separate! < v k start end))
 (source (srfi 132))
 (kind procedure))
((signature (floor/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (floor-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (floor-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (ceiling/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (ceiling-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (ceiling-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (truncate/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (truncate-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (truncate-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (round/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (round-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (round-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (euclidean/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (euclidean-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (euclidean-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (euclidean-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (balanced/ numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (balanced-quotient numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature (balanced-remainder numerator denominator))
 (source (srfi 141))
 (kind procedure))
((signature fx-width)
 (source (srfi 143))
 (kind constant))
((signature fx-greatest)
 (source (srfi 143))
 (kind constant))
((signature fx-least)
 (source (srfi 143))
 (kind constant))
((signature (fixnum? obj))
 (source (srfi 143))
 (kind procedure))
((signature (fx=? i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fx<? i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fx>? i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fx<=? i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fx>=? i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fxzero? i))
 (source (srfi 143))
 (kind procedure))
((signature (fxpositive? i))
 (source (srfi 143))
 (kind procedure))
((signature (fxnegative? i))
 (source (srfi 143))
 (kind procedure))
((signature (fxodd? i))
 (source (srfi 143))
 (kind procedure))
((signature (fxeven? i))
 (source (srfi 143))
 (kind procedure))
((signature (fxmax i j ...))
 (source (srfi 143))
 (kind procedure))
((signature (fxmin i j ...))
 (source (srfi 143))
 (kind procedure))
((signature (fx+ i j))
 (source (srfi 143))
 (kind procedure))
((signature (fx- i j))
 (source (srfi 143))
 (kind procedure))
((signature (fxneg i))
 (source (srfi 143))
 (kind procedure))
((signature (fx* i j))
 (source (srfi 143))
 (kind procedure))
((signature (fxquotient i j))
 (source (srfi 143))
 (kind procedure))
((signature (fxremainder i j))
 (source (srfi 143))
 (kind procedure))
((signature (fxabs i))
 (source (srfi 143))
 (kind procedure))
((signature (fxsquare i))
 (source (srfi 143))
 (kind procedure))
((signature (fxsqrt i))
 (source (srfi 143))
 (kind procedure))
((signature (fx+/carry i j k))
 (source (srfi 143))
 (kind procedure))
((signature (fx-/carry i j k))
 (source (srfi 143))
 (kind procedure))
((signature (fx*/carry i j k))
 (source (srfi 143))
 (kind procedure))
((signature (fxnot i))
 (source (srfi 143))
 (kind procedure))
((signature (fxand i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fxior i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fxxor i ...))
 (source (srfi 143))
 (kind procedure))
((signature (fxarithmetic-shift i count))
 (source (srfi 143))
 (kind procedure))
((signature (fxarithmetic-shift-left i count))
 (source (srfi 143))
 (kind procedure))
((signature (fxarithmetic-shift-right i count))
 (source (srfi 143))
 (kind procedure))
((signature (fxbit-count i))
 (source (srfi 143))
 (kind procedure))
((signature (fxlength i))
 (source (srfi 143))
 (kind procedure))
((signature (fxif mask i j))
 (source (srfi 143))
 (kind procedure))
((signature (fxbit-set? index i))
 (source (srfi 143))
 (kind procedure))
((signature (fxcopy-bit index i boolean))
 (source (srfi 143))
 (kind procedure))
((signature (fxfirst-set-bit i))
 (source (srfi 143))
 (kind procedure))
((signature (fxbit-field i start end))
 (source (srfi 143))
 (kind procedure))
((signature (fxbit-field-rotate i count start end))
 (source (srfi 143))
 (kind procedure))
((signature (fxbit-field-reverse i start end))
 (source (srfi 143))
 (kind procedure))
((signature (assume obj message ...))
 (source (srfi 145))
 (kind syntax))
((signature (bitwise-not i))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-and i ...))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-ior i ...))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-xor i ...))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-eqv i ...))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-eqv (bitwise-eqv a b) c))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-nand i j))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-nor i j))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-andc1 i j))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-andc2 i j))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-orc1 i j))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-orc2 i j))
 (source (srfi 151))
 (kind procedure))
((signature (arithmetic-shift i count))
 (source (srfi 151))
 (kind procedure))
((signature (bit-count i))
 (source (srfi 151))
 (kind procedure))
((signature (integer-length i))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-if mask i j))
 (source (srfi 151))
 (kind procedure))
((signature (bit-set? index i))
 (source (srfi 151))
 (kind procedure))
((signature (copy-bit index i boolean))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-copy-bit dest index source))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-replace-same dest source index (+ index 1)))
 (source (srfi 151))
 (kind procedure))
((signature (bit-swap index1 index2 i))
 (source (srfi 151))
 (kind procedure))
((signature (any-bit-set? test-bits i))
 (source (srfi 151))
 (kind procedure))
((signature (every-bit-set? test-bits i))
 (source (srfi 151))
 (kind procedure))
((signature (first-set-bit i))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-any? i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-every? i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-clear i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-set i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-replace dest source start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-replace-same dest source start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-rotate i count start end))
 (source (srfi 151))
 (kind procedure))
((signature (bit-field-reverse i start end))
 (source (srfi 151))
 (kind procedure))
((signature (bits->list i))
 (signature  (bits->list i len))
 (source (srfi 151))
 (kind procedure))
((signature (bits->vector i))
(signature (bits->vector i len))
 (source (srfi 151))
 (kind procedure))
((signature (list->bits list))
 (source (srfi 151))
 (kind procedure))
((signature (vector->bits vector))
 (source (srfi 151))
 (kind procedure))
((signature (bits bool ...))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-fold proc seed i))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-for-each proc i))
 (source (srfi 151))
 (kind procedure))
((signature (bitwise-unfold stop? mapper successor seed))
 (source (srfi 151))
 (kind procedure))
((signature (make-bitwise-generator i))
 (source (srfi 151))
 (kind procedure))
((signature (syntax-rules ellipsis-identifier (literal-identifier ...)
			  (pattern template)
			  ...))
 (source (srfi 46))
 (kind syntax))
((signature (implementation-name))
 (source (srfi 112))
 (kind procedure))
((signature (implementation-version))
 (source (srfi 112))
 (kind procedure))
((signature (cpu-architecture))
 (source (srfi 112))
 (kind procedure))
((signature (machine-name))
 (source (srfi 112))
 (kind procedure))
((signature (os-name))
 (source (srfi 112))
 (kind procedure))
((signature (os-version))
 (source (srfi 112))
 (kind procedure))
((signature (regexp re) (returns regexp))
 (source (srfi 115))
 (kind procedure))
((signature (rx sre ...) (returns regexp))
 (source (srfi 115))
 (kind procedure))
((signature (regexp->sre re) (returns sre))
 (source (srfi 115))
 (kind procedure))
((signature (char-set->sre char-set) (returns sre))
 (source (srfi 115))
 (kind procedure))
((signature (valid-sre? obj) (returns boolean))
 (source (srfi 115))
 (kind procedure))
((signature (regexp? obj) (returns boolean))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-matches re str) (returns (or regexp-match #f)))
 (signature (regexp-matches re str start) (returns (or regexp-match #f)))
 (signature (regexp-matches re str start end) (returns (or regexp-match #f)))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-matches? re str) (returns boolean?))
 (signature (regexp-matches? re str start) (returns boolean?))
 (signature (regexp-matches? re str start end) (returns boolean?))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-search re str) (returns (or regexp-match #f)))
 (signature (regexp-search re str start) (returns (or regexp-match #f)))
 (signature (regexp-search re str start end) (returns (or regexp-match #f)))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-fold re kons knil str) (returns obj))
 (signature (regexp-fold re kons knil str finish start) (returns obj))
 (signature (regexp-fold re kons knil str finish start end) (returns obj))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-extract re str) (returns list))
 (signature (regexp-extract re str start) (returns list))
 (signature (regexp-extract re str start end) (returns list))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-split re str) (returns list))
 (signature (regexp-split re str start) (returns list))
 (signature (regexp-split re str start end) (returns list))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-partition re str) (returns list))
 (signature (regexp-partition re str start) (returns list))
 (signature (regexp-partition re str start end) (returns list))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-replace re str subst) (returns string))
 (signature (regexp-replace re str subst start)  (returns string))
 (signature (regexp-replace re str subst start end) (returns string))
 (signature (regexp-replace re str subst start end count) (returns string))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-replace-all re str subst) (returns string))
 (signature (regexp-replace-all re str subst start) (returns string))
 (signature (regexp-replace-all re str subst start end) (returns string))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match? obj) (returns boolean))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match-count regexp-match) (returns integer))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match-submatch regexp-match field) (returns (or string #f)))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match-submatch-start regexp-match field) (returns (or integer #f)))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match-submatch-end regexp-match field) (returns (or integer #f)))
 (source (srfi 115))
 (kind procedure))
((signature (regexp-match->list regexp-match) (returns list))
 (source (srfi 115))
 (kind procedure))
((signature (ipair a d) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (ilist object ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (xipair d a) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (ipair* elt1 elt2 ...) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (make-ilist n) (returns ilist))
 (signature (make-ilist n fill) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ilist-tabulate n init-proc) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ilist-copy dilist) (returns dilist))
 (source (srfi 116))
 (kind procedure))
((signature (iiota count) (returns ilist))
 (signature (iiota count start step) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (proper-ilist? x) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (ilist? x) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (dotted-ilist? x) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (ipair? object) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (null-ilist? ilist) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (not-ipair? x) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (ilist= elt= ilist1 ...) (returns boolean))
 (source (srfi 116))
 (kind procedure))
((signature (icar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icadar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icddar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaaaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaaadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaadar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaaddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icadaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icadadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icaddar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icadddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdaaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdaadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdadar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdaddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icddaar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icddadr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icdddar ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (icddddr ipair) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ilist-ref ilist i) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ifirst ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (isecond ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ithird ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ifourth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ififth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (isixth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (iseventh ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ieighth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ininth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (itenth ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (icar+icdr ipair) (returns x y))
 (source (srfi 116))
 (kind procedure))
((signature (itake x i) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (idrop x i) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (ilist-tail x i) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (itake-right dilist i) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (idrop-right dilist i) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (isplit-at  x i) (returns ilist object))
 (source (srfi 116))
 (kind procedure))
((signature (ilast ipair) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (last-ipair ipair) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (ilength ilist) (returns integer))
 (source (srfi 116))
 (kind procedure))
((signature (iappend ilist1 ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iconcatenate ilist-of-ilists) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ireverse ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iappend-reverse rev-head tail) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (izip ilist1 ilist2 ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunzip1 ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunzip2 ilist) (returns ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunzip3 ilist) (returns ilist ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunzip4 ilist) (returns ilist ilist ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunzip5 ilist) (returns ilist ilist ilist ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (icount pred ilist1 ilist2 ...) (returns integer))
 (source (srfi 116))
 (kind procedure))
((signature (ifold kons knil ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ifold-right kons knil ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ipair-fold kons knil ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ipair-fold-right kons knil ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ireduce f ridentity ilist) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ireduce-right f ridentity ilist) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (iunfold p f g seed) (returns ilist))
 (signature (iunfold p f g seed tail-gen) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iunfold-right p f g seed) (returns ilist))
 (signature (iunfold-right p f g seed tail) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (imap proc ilist1 ilist2 ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ifor-each proc ilist1 ilist2 ...) (returns unspecified))
 (source (srfi 116))
 (kind procedure))
((signature (iappend-map f ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (imap-in-order f ilist1 ilist2 ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ipair-for-each f ilist1 ilist2 ...) (returns unspecific))
 (source (srfi 116))
 (kind procedure))
((signature (ifilter-map f ilist1 ilist2 ...) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ifilter pred ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ipartition pred ilist) (returns ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iremove pred ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ifind pred ilist) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ifind-tail pred ilist) (returns ipair or false))
 (source (srfi 116))
 (kind procedure))
((signature (itake-while  pred ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (idrop-while pred ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ispan  pred ilist) (returns ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (ibreak  pred ilist) (returns ilist ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iany pred ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ievery pred ilist1 ilist2 ...) (returns value))
 (source (srfi 116))
 (kind procedure))
((signature (ilist-index pred ilist1 ilist2 ...) (returns integer or false))
 (source (srfi 116))
 (kind procedure))
((signature (imember x ilist) (returns ilist))
 (signature (imember x ilist =) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (imemq x ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (imemv x ilist) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (idelete x ilist) (returns ilist))
 (signature (idelete x ilist =) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (idelete-duplicates ilist) (returns ilist))
 (signature (idelete-duplicates ilist =) (returns ilist))
 (source (srfi 116))
 (kind procedure))
((signature (iassoc key ialist) (returns ipair or #f))
 (signature (iassoc key ialist =) (returns ipair or #f))
 (source (srfi 116))
 (kind procedure))
((signature (iassq key ialist) (returns ipair or #f))
 (source (srfi 116))
 (kind procedure))
((signature (iassv key ialist) (returns ipair or #f))
 (source (srfi 116))
 (kind procedure))
((signature (ialist-cons key datum ialist) (returns ialist))
 (source (srfi 116))
 (kind procedure))
((signature (ialist-delete key ialist) (returns ialist))
 (signature (ialist-delete key ialist =) (returns ialist))
 (source (srfi 116))
 (kind procedure))
((signature (replace-icar ipair object) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (replace-icdr ipair object) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (pair->ipair pair) (returns ipair))
 (source (srfi 116))
 (kind procedure))
((signature (ipair->pair ipair) (returns pair))
 (source (srfi 116))
 (kind procedure))
((signature (list->ilist flist) (returns dilist))
 (source (srfi 116))
 (kind procedure))
((signature (ilist->list dilist) (returns flist))
 (source (srfi 116))
 (kind procedure))
((signature (tree->itree object) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (itree->tree object) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (gtree->itree object) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (gtree->tree object) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature (iapply procedure object ... ilist) (returns object))
 (source (srfi 116))
 (kind procedure))
((signature ipair-comparator)
 (source (srfi 116))
 (kind procedure))
((signature ilist-comparator)
 (source (srfi 116))
 (kind procedure))
((signature (make-ilist-comparator comparator) (returns comparator))
 (source (srfi 116))
 (kind procedure))
((signature (make-improper-ilist-comparator comparator) (returns comparator))
 (source (srfi 116))
 (kind procedure))
((signature (make-icar-comparator comparator) (returns comparator))
 (source (srfi 116))
 (kind procedure))
((signature (make-icdr-comparator comparator) (returns comparator))
 (source (srfi 116))
 (kind procedure))
((signature (ephemeron? object))
 (source (srfi 124))
 (kind procedure))
((signature (make-ephemeron key datum))
 (source (srfi 124))
 (kind procedure))
((signature (ephemeron-broken? ephemeron))
 (source (srfi 124))
 (kind procedure))
((signature (ephemeron-key ephemeron))
 (source (srfi 124))
 (kind procedure))
((signature (ephemeron-datum ephemeron))
 (source (srfi 124))
 (kind procedure))
((signature (reference-barrier key))
 (source (srfi 124))
 (kind procedure))
((signature (string-cursor? obj) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-start s) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-end s) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-next s cursor) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-prev s cursor) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-forward s cursor nchars) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-back s cursor nchars) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor=? cursor1 cursor2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor<? cursor1 cursor2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor>? cursor1 cursor2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor<=? cursor1 cursor2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor>=? cursor1 cursor2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor-diff s start end) (returns nchars))
 (source (srfi 130))
 (kind procedure))
((signature (string-cursor->index s cursor) (returns index))
 (source (srfi 130))
 (kind procedure))
((signature (string-index->cursor s index) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-null? s) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-every pred s) (returns value))
 (signature (string-every pred s start)) (returns value)
 (signature (string-every pred s start end)) (returns value)
 (source (srfi 130))
 (kind procedure))
((signature (string-any pred s) (returns value))
 (string-any pred s start) (returns value)
 (string-any pred s start end) (returns value)
 (source (srfi 130))
 (kind procedure))
((signature (string-tabulate proc len) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-unfold stop? mapper successor seed) (returns string))
 (string-unfold stop? mapper successor seed base) (returns string)
 (string-unfold stop? mapper successor seed base make-final) (returns string)
 (source (srfi 130))
 (kind procedure))
((signature (string-unfold-right stop? mapper successor seed) (returns string))
 (string-unfold-right stop? mapper successor seed base) (returns string)
 (string-unfold-right stop? mapper successor seed base make-final) (returns string)
 (source (srfi 130))
 (kind procedure))
((signature (string->list/cursors s) (returns char-list))
 (string->list/cursors s start) (returns char-list)
 (string->list/cursors s start end) (returns char-list)
 (source (srfi 130))
 (kind procedure))
((signature (string->vector/cursors s) (returns char-vector))
 (string->vector/cursors s start) (returns char-vector)
 (string->vector/cursors s start end) (returns char-vector)
 (source (srfi 130))
 (kind procedure))
((signature (reverse-list->string char-list) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-join string-list) (returns string))
 (string-join string-list delimiter) (returns string)
 (string-join string-list delimiter grammar) (returns string)
 (source (srfi 130))
 (kind procedure))
((signature (string-ref/cursor s cursor) (returns char))
 (source (srfi 130))
 (kind procedure))
((signature (substring/cursors s start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-copy/cursors s) (returns string))
 (string-copy/cursors s start) (returns string)
 (string-copy/cursors s start end) (returns string)
 (source (srfi 130))
 (kind procedure))
((signature (string-take s nchars) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-drop s nchars) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-take-right s nchars) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-drop-right s nchars) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-pad s len) (returns string))
 (signature (string-pad s len char) (returns string))
 (signature (string-pad s len char start) (returns string))
 (signature (string-pad s len char start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-pad-right s len) (returns string))
 (signature (string-pad-right s len char) (returns string))
 (signature (string-pad-right s len char start) (returns string))
 (signature (string-pad-right s len char start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-trim s) (returns string))
 (signature (string-trim s pred) (returns string))
 (signature (string-trim s pred start) (returns string))
 (signature (string-trim s pred start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-trim-right s) (returns string))
 (signature (string-trim-right s pred) (returns string))
 (signature (string-trim-right s pred start) (returns string))
 (signature (string-trim-right s pred start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-trim-both s) (returns string))
 (signature (string-trim-both s pred) (returns string))
 (signature (string-trim-both s pred start) (returns string))
 (signature (string-trim-both s pred start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-prefix-length s1 s2) (returns integer))
 (signature (string-prefix-length s1 s2 start1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2) (returns integer))
 (signature (string-prefix-length s1 s2 start1 end1 start2 end2) (returns integer))
 (source (srfi 130))
 (kind procedure))
((signature (string-prefix? s1 s2) (returns boolean))
 (signature (string-prefix? s1 s2 start1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2) (returns boolean))
 (signature (string-prefix? s1 s2 start1 end1 start2 end2) (returns boolean))
 (source (srfi 130))
 (kind procedure))
((signature (string-index s pred) (returns cursor))
 (signature (string-index s pred start) (returns cursor))
 (signature (string-index s pred start end) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-index-right s pred) (returns cursor))
 (signature (string-index-right s pred start) (returns cursor))
 (signature (string-index-right s pred start end) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-skip s pred) (returns cursor))
 (signature (string-skip s pred start) (returns cursor))
 (signature (string-skip s pred start end) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-skip-right s pred) (returns cursor))
 (signature (string-skip-right s pred start) (returns cursor))
 (signature (string-skip-right s pred start end) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-contains s1 s2) (returns cursor))
 (signature (string-contains s1 s2 start1) (returns cursor))
 (signature (string-contains s1 s2 start1 end1) (returns cursor))
 (signature (string-contains s1 s2 start1 end1 start2) (returns cursor))
 (signature (string-contains s1 s2 start1 end1 start2 end2) (returns cursor))
 (source (srfi 130))
 (kind procedure))
((signature (string-reverse s (returns string)))
 (signature (string-reverse s start) (returns string))
 (signature (string-reverse s start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-concatenate string-list) (returns string))
 (signature (string-concatenate-reverse string-list) (returns string))
 (signature (string-concatenate-reverse string-list final-string) (returns string))
 (signature (string-concatenate-reverse string-list final-string end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-fold kons knil s) (returns value))
 (signature (string-fold kons knil s start) (returns value))
 (signature (string-fold kons knil s start end) (returns value))
 (source (srfi 130))
 (kind procedure))
((signature (string-fold-right kons knil s) (returns value))
 (signature (string-fold-right kons knil s start) (returns value))
 (signature (string-fold-right kons knil s start end) (returns value))
 (source (srfi 130))
 (kind procedure))
((signature (string-for-each-cursor proc s) (returns unspecified))
 (signature (string-for-each-cursor proc s start) (returns unspecified))
 (signature (string-for-each-cursor proc s start end) (returns unspecified))
 (source (srfi 130))
 (kind procedure))
((signature (string-replicate s from to) (returns string))
 (signature (string-replicate s from to start) (returns string))
 (signature (string-replicate s from to start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-count s pred) (returns integer))
 (signature (string-count s pred start) (returns integer))
 (signature (string-count s pred start end) (returns integer))
 (source (srfi 130))
 (kind procedure))
((signature (string-replace s1 s2 start1 end1) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2) (returns string))
 (signature (string-replace s1 s2 start1 end1 start2 end2) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-split s delimiter) (returns list))
 (signature (string-split s delimiter grammar) (returns list))
 (signature (string-split s delimiter grammar limit) (returns list))
 (signature (string-split s delimiter grammar limit start) (returns list))
 (signature (string-split s delimiter grammar limit start end) (returns list))
 (source (srfi 130))
 (kind procedure))
((signature (string-filter pred s start) (returns string))
 (signature (string-filter pred s start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (string-remove pred s) (returns string))
 (signature (string-remove pred s start) (returns string))
 (signature (string-remove pred s start end) (returns string))
 (source (srfi 130))
 (kind procedure))
((signature (ideque? x))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-empty? ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque= elt= ideque ...))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-any pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-every pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-front ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-back ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-remove-front ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-remove-back ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-add-front ideque obj))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-add-back ideque obj))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-ref ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-take ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-take-right ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-drop ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-drop-right ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-split-at ideque n))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-length ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-append ideque ...))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-reverse ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-count pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-zip ideque1 ideque2 ...))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-map proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-filter-map proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-for-each proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-for-each-right proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-fold proc nil ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-fold-right proc nil ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-append-map proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-filter pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-remove pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-partition proc ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-find pred ideque))
 (signature (ideque-find pred ideque failure))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-find-right pred ideque))
 (signature (ideque-find-right pred ideque failure))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-take-while pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-take-while-right pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-drop-while pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-drop-while-right pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-span pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (ideque-break pred ideque))
 (source (srfi 134))
 (kind procedure))
((signature (list->ideque list))
 (source (srfi 134))
 (kind procedure))
((signature (ideque->list ideque))
 (source (srfi 134))
 (kind procedure))
((signature (generator->ideque generator))
 (source (srfi 134))
 (kind procedure))
((signature (ideque->generator ideque))
 (source (srfi 134))
 (kind procedure))
((signature (array? obj))
 (source (srfi 47))
 (kind procedure))
((signature (equal? obj1 obj2))
 (source (srfi 47))
 (kind procedure))
((signature (make-array prototype k1 k2 ...))
 (source (srfi 47))
 (kind procedure))
((signature (ac64 z))
 (source (srfi 47))
 (kind procedure))
((signature (ac64))
 (source (srfi 47))
 (kind procedure))
((signature (ac32 z))
 (source (srfi 47))
 (kind procedure))
((signature (ac32))
 (source (srfi 47))
 (kind procedure))
((signature (ar64 x))
 (source (srfi 47))
 (kind procedure))
((signature (ar64))
 (source (srfi 47))
 (kind procedure))
((signature (ar32 x))
 (source (srfi 47))
 (kind procedure))
((signature (ar32))
 (source (srfi 47))
 (kind procedure))
((signature (as64 n))
 (source (srfi 47))
 (kind procedure))
((signature (as64))
 (source (srfi 47))
 (kind procedure))
((signature (as32 n))
 (source (srfi 47))
 (kind procedure))
((signature (as32))
 (source (srfi 47))
 (kind procedure))
((signature (as16 n))
 (source (srfi 47))
 (kind procedure))
((signature (as16))
 (source (srfi 47))
 (kind procedure))
((signature (as8 n))
 (source (srfi 47))
 (kind procedure))
((signature (as8))
 (source (srfi 47))
 (kind procedure))
((signature (au64 k))
 (source (srfi 47))
 (kind procedure))
((signature (au64))
 (source (srfi 47))
 (kind procedure))
((signature (au32 k))
 (source (srfi 47))
 (kind procedure))
((signature (au32))
 (source (srfi 47))
 (kind procedure))
((signature (au16 k))
 (source (srfi 47))
 (kind procedure))
((signature (au16))
 (source (srfi 47))
 (kind procedure))
((signature (au8 k))
 (source (srfi 47))
 (kind procedure))
((signature (au8))
 (source (srfi 47))
 (kind procedure))
((signature (at1 bool))
 (source (srfi 47))
 (kind procedure))
((signature (at1))
 (source (srfi 47))
 (kind procedure))
((signature (make-shared-array array mapper k1 k2 ...))
 (source (srfi 47))
 (kind procedure))
((signature (array-rank obj))
 (source (srfi 47))
 (kind procedure))
((signature (array-dimensions array))
 (source (srfi 47))
 (kind procedure))
((signature (array-in-bounds? array index1 index2 ...))
 (source (srfi 47))
 (kind procedure))
((signature (array-ref array index1 index2 ...))
 (source (srfi 47))
 (kind procedure))
((signature (array-set! array obj index1 index2 ...))
 (source (srfi 47))
 (kind procedure))
((signature (cat object option ...))
 (source (srfi 54))
 (kind procedure))
((signature (define-record-type type-clause constructor-clause predicate-clause field-clause ...))
 (signature (define-record-type type-clause constructor-clause))
 (signature (define-record-type type-clause))
 (source (srfi 57))
 (kind syntax))
((signature (define-record-scheme scheme-clause))
 (signature (define-record-scheme scheme-clause deconstructor-clause))
 (signature (define-record-scheme scheme-clause deconstructor-clause predicate-clause field-clause ...))
 (source (srfi 57))
 (kind syntax))
((signature (mu expr ...))
 (source (srfi 86))
 (kind procedure))
((signature (nu expr ... exprn))
 (source (srfi 86))
 (kind procedure))
((signature (alet  (binding-spec ...) body ...))
 (source (srfi 86))
 (kind syntax))
((signature (alet*  (binding-spec ...) body ...))
 (source (srfi 86))
 (kind syntax))
((signature (software-type))
 (source (srfi 96))
 (kind procedure))
((signature (scheme-implementation-type))
 (source (srfi 96))
 (kind procedure))
((signature (scheme-implementation-version))
 (source (srfi 96))
 (kind procedure))
((signature (scheme-implementation-home-page))
 (source (srfi 96))
 (kind procedure))
((signature (scheme-file-suffix))
 (source (srfi 96))
 (kind procedure))
((signature most-positive-fixnum)
 (source (srfi 96))
 (kind constant))
((signature char-code-limit)
 (source (srfi 96))
 (kind constant))
((signature (with-load-pathname path thunk))
 (source (srfi 96))
 (kind procedure))
((signature (tmpnam))
 (source (srfi 96))
 (kind procedure))
((signature (file-exists? filename))
 (source (srfi 96))
 (kind procedure))
((signature (delete-file filename))
 (source (srfi 96))
 (kind procedure))
((signature (open-file filename modes))
 (source (srfi 96))
 (kind procedure))
((signature (port? obj))
 (source (srfi 96))
 (kind procedure))
((signature (close-port port))
 (source (srfi 96))
 (kind procedure))
((signature (call-with-open-ports proc ports ...))
 (source (srfi 96))
 (kind procedure))
((signature (call-with-open-ports ports ... proc))
 (source (srfi 96))
 (kind procedure))
((signature (current-error-port))
 (source (srfi 96))
 (kind procedure))
((signature (force-output))
 (source (srfi 96))
 (kind procedure))
((signature (force-output port))
 (source (srfi 96))
 (kind procedure))
((signature (file-position port))
 (signature (file-position port k))
 (source (srfi 96))
 (kind procedure))
((signature (output-port-width))
 (signature (output-port-width port))
 (source (srfi 96))
 (kind procedure))
((signature (output-port-height))
 (signature (output-port-height port))
 (source (srfi 96))
 (kind procedure))
((signature (defmacro name lambda-list form ...))
 (source (srfi 96))
 (kind syntax))
((signature (gentemp))
 (source (srfi 96))
 (kind procedure))
((signature (defmacro:eval e))
 (source (srfi 96))
 (kind procedure))
((signature (defmacro:load filename))
 (source (srfi 96))
 (kind procedure))
((signature (macroexpand form))
 (source (srfi 96))
 (kind procedure))
((signature (defmacro:expand* e))
 (source (srfi 96))
 (kind procedure))
((signature (macro:expand sexpression))
 (source (srfi 96))
 (kind procedure))
((signature (macro:eval sexpression))
 (source (srfi 96))
 (kind procedure))
((signature (macro:load filename))
 (source (srfi 96))
 (kind procedure))
((signature (slib:load-source name))
 (source (srfi 96))
 (kind procedure))
((signature (slib:load-compiled name))
 (source (srfi 96))
 (kind procedure))
((signature (slib:load name))
 (source (srfi 96))
 (kind procedure))
((signature (slib:eval obj))
 (source (srfi 96))
 (kind procedure))
((signature (slib:eval-load filename eval))
 (source (srfi 96))
 (kind procedure))
((signature (slib:warn arg1 arg2 ...))
 (source (srfi 96))
 (kind procedure))
((signature (slib:error arg1 arg2 ...))
 (source (srfi 96))
 (kind procedure))
((signature (slib:exit n))
 (source (srfi 96))
 (kind procedure))
((signature (slib:exit))
 (source (srfi 96))
 (kind procedure))
((signature (browse-url url))
 (source (srfi 96))
 (kind procedure))
((signature (getenv name))
 (source (srfi 96))
 (kind procedure))
((signature (system command-string))
 (source (srfi 96))
 (kind procedure))
((signature (program-arguments))
 (source (srfi 96))
 (kind procedure))
((signature (identity x))
 (source (srfi 96))
 (kind procedure))
((signature (expt n k -->))
 (source (srfi 96))
 (kind procedure))
((signature slib:tab)
 (source (srfi 96))
 (kind constant))
((signature slib:form-feed)
 (source (srfi 96))
 (kind constant))
((signature (make-exchanger obj))
 (source (srfi 96))
 (kind procedure))
((signature t)
 (source (srfi 96))
 (kind constant))
((signature nil)
 (source (srfi 96))
 (kind constant))
((signature (last-pair l))
 (source (srfi 96))
 (kind procedure))
((signature (make-client-socket node service)
	    (returns socket))
 (signature (make-client-socket node service ai-family)
	    (returns socket))
 (signature (make-client-socket node service ai-family ai-socktype)
	    (returns socket))
 (signature (make-client-socket node service ai-family ai-socktype ai-flags)
	    (returns socket))
 (signature (make-client-socket node service ai-family ai-socktype ai-flags ai-protocol)
	    (returns socket))
 (source (srfi 106))
 (kind procedure))
((signature (make-server-socket service)
	    (returns socket))
 (signature (make-server-socket service ai-family)
	    (returns socket))
 (signature (make-server-socket service ai-family ai-socktype)
	    (returns socket))
 (signature (make-server-socket service ai-family ai-socktype ai-protocol)
	    (returns socket))
 (source (srfi 106))
 (kind procedure))
((signature (socket? object) (returns boolean))
 (source (srfi 106))
 (kind procedure))
((signature (socket-accept socket) (returns socket))
 (source (srfi 106))
 (kind procedure))
((signature (socket-send socket bv) (returns size))
 (signature (socket-send socket bv flags) (returns size))
 (source (srfi 106))
 (kind procedure))
((signature (socket-recv socket size) (returns bv))
 (signature (socket-recv socket size flags) (returns bv))
 (source (srfi 106))
 (kind procedure))
((signature (socket-shutdown socket how) (returns (unspecified)))
 (source (srfi 106))
 (kind procedure))
((signature (socket-close socket) (returns (unspecified)))
 (source (srfi 106))
 (kind procedure))
((signature (socket-input-port socket) (returns binary-input-port))
 (source (srfi 106))
 (kind procedure))
((signature (socket-output-port socket) (returns binary-output-port))
 (source (srfi 106))
 (kind procedure))
((signature (call-with-socket socket proc) (returns object))
 (source (srfi 106))
 (kind procedure))
((signature (address-family name) (returns address-family))
 (source (srfi 106))
 (kind procedure))
((signature (address-info names ...) (returns address-info))
 (source (srfi 106))
 (kind procedure))
((signature (socket-domain name) (returns socket-domain))
 (source (srfi 106))
 (kind procedure))
((signature (ip-protocol name) (returns ip-protocol))
 (source (srfi 106))
 (kind procedure))
((signature (message-type names ...) (returns message-type))
 (source (srfi 106))
 (kind procedure))
((signature (shutdown-method names ...) (returns shutdown-method))
 (source (srfi 106))
 (kind procedure))
((signature (socket-merge-flags flags ...) (returns new-flags))
 (source (srfi 106))
 (kind procedure))
((signature (socket-purge-flags base-flag flags ...) (returns new-flags))
 (source (srfi 106))
 (kind procedure))
((signature (comparator? obj))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-comparison-procedure? comparator))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-hash-function? comparator))
 (source (srfi 114))
 (kind procedure))
((signature boolean-comparator)
 (source (srfi 114))
 (kind constant))
((signature char-comparator)
 (source (srfi 114))
 (kind constant))
((signature char-ci-comparator)
 (source (srfi 114))
 (kind constant))
((signature string-comparator)
 (source (srfi 114))
 (kind constant))
((signature string-ci-comparator)
 (source (srfi 114))
 (kind constant))
((signature symbol-comparator)
 (source (srfi 114))
 (kind constant))
((signature exact-integer-comparator)
 (source (srfi 114))
 (kind constant))
((signature integer-comparator)
 (source (srfi 114))
 (kind constant))
((signature rational-comparator)
 (source (srfi 114))
 (kind constant))
((signature real-comparator)
 (source (srfi 114))
 (kind constant))
((signature complex-comparator)
 (source (srfi 114))
 (kind constant))
((signature number-comparator)
 (source (srfi 114))
 (kind constant))
((signature pair-comparator)
 (source (srfi 114))
 (kind constant))
((signature list-comparator)
 (source (srfi 114))
 (kind constant))
((signature vector-comparator)
 (source (srfi 114))
 (kind constant))
((signature bytevector-comparator)
 (source (srfi 114))
 (kind constant))
((signature default-comparator)
 (source (srfi 114))
 (kind constant))
((signature (make-comparator type-test equality compare hash))
 (source (srfi 114))
 (kind procedure))
((signature (make-inexact-real-comparator epsilon rounding nan-handling))
 (source (srfi 114))
 (kind procedure))
((signature (make-list-comparator element-comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-vector-comparator element-comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-bytevector-comparator element-comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-listwise-comparator type-test element-comparator empty? head tail))
 (source (srfi 114))
 (kind procedure))
((signature (make-vectorwise-comparator type-test element-comparator length ref))
 (source (srfi 114))
 (kind procedure))
((signature (make-car-comparator comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-cdr-comparator comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-pair-comparator car-comparator cdr-comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-improper-list-comparator element-comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-selecting-comparator comparator1 comparator2 ...))
 (source (srfi 114))
 (kind procedure))
((signature (make-refining-comparator comparator1 comparator2 ...))
 (source (srfi 114))
 (kind procedure))
((signature (make-reverse-comparator comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make-debug-comparator comparator))
 (source (srfi 114))
 (kind procedure))
((signature eq-comparator)
 (source (srfi 114))
 (kind constant))
((signature eqv-comparator)
 (source (srfi 114))
 (kind constant))
((signature equal-comparator)
 (source (srfi 114))
 (kind constant))
((signature (comparator-type-test-procedure comparator))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-equality-predicate comparator))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-comparison-procedure comparator))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-hash-function comparator))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-test-type comparator obj))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-check-type comparator obj))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-equal? comparator obj1 obj2))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-compare comparator obj1 obj2))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-hash comparator obj))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison< lt-pred))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison> gt-pred))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison<= le-pred))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison>= ge-pred))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison=/< eq-pred lt-pred))
 (source (srfi 114))
 (kind procedure))
((signature (make-comparison=/> eq-pred gt-pred))
 (source (srfi 114))
 (kind procedure))
((signature (if3 expr less equal greater))
 (source (srfi 114))
 (kind syntax))
((signature (if=? expr consequent))
 (signature (if=? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (if? expr consequent))
 (signature (if? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (if>? expr consequent))
 (signature (if>? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (if<=? expr consequent))
 (signature (if<=? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (if>=? expr consequent))
 (signature (if>=? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (if-not=? expr consequent))
 (signature (if-not=? expr consequent alternate))
 (source (srfi 114))
 (kind syntax))
((signature (=? comparator object1 object2 object3 ...))
 (source (srfi 114))
 (kind procedure))
((signature (<? comparator object1 object2 object3 ...))
 (source (srfi 114))
 (kind procedure))
((signature (>? comparator object1 object2 object3 ...))
 (source (srfi 114))
 (kind procedure))
((signature (<=? comparator object1 object2 object3 ...))
 (source (srfi 114))
 (kind procedure))
((signature (>=? comparator object1 object2 object3 ...))
 (source (srfi 114))
 (kind procedure))
((signature (make=? comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make<?  comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make>? comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make<=? comparator))
 (source (srfi 114))
 (kind procedure))
((signature (make>=? comparator))
 (source (srfi 114))
 (kind procedure))
((signature (in-open-interval? obj1 obj2 obj3))
 (signature (in-open-interval? comparator obj1 obj2 obj3))
 (source (srfi 114))
 (kind procedure))
((signature (in-closed-interval? obj1 obj2 obj3))
 (signature (in-closed-interval? comparator obj1 obj2 obj3))
 (source (srfi 114))
 (kind procedure))
((signature (in-open-closed-interval? obj1 obj2 obj3))
 (signature (in-open-closed-interval? comparator obj1 obj2 obj3))
 (source (srfi 114))
 (kind procedure))
((signature (in-closed-open-interval? obj1 obj2 obj3))
 (signature (in-closed-open-interval? comparator obj1 obj2 obj3))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-min comparator object1 object2 ...))
 (source (srfi 114))
 (kind procedure))
((signature (comparator-max comparator object1 object2 ...))
 (source (srfi 114))
 (kind procedure))
((signature (make-eq-hashtable))
 (signature (make-eq-hashtable capacity))
 (signature (make-eq-hashtable capacity weakness))
 (source (srfi 126))
 (kind procedure))
((signature (make-eqv-hashtable))
 (signature (make-eqv-hashtable capacity))
 (signature (make-eqv-hashtable capacity weakness))
 (source (srfi 126))
 (kind procedure))
((signature (make-hashtable hash equiv))
 (signature (make-hashtable hash equiv capacity))
 (signature (make-hashtable hash equiv capacity weakness))
 (source (srfi 126))
 (kind procedure))
((signature (alist->eq-hashtable alist))
 (signature (alist->eq-hashtable capacity alist))
 (signature (alist->eq-hashtable capacity weakness alist))
 (source (srfi 126))
 (kind procedure))
((signature (alist->eqv-hashtable alist))
 (signature (alist->eqv-hashtable capacity alist))
 (signature (alist->eqv-hashtable capacity weakness alist))
 (source (srfi 126))
 (kind procedure))
((signature (alist->hashtable hash equiv alist))
 (signature (alist->hashtable hash equiv capacity alist))
 (signature (alist->hashtable hash equiv capacity weakness alist))
 (source (srfi 126))
 (kind procedure))
((signature (weakness weakness-symbol))
 (source (srfi 126))
 (kind syntax))
((signature (hashtable? obj))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-size hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-ref hashtable key))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-ref hashtable key default))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-set! hashtable key obj))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-delete! hashtable key))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-contains? hashtable key))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-lookup hashtable key))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-update! hashtable key proc))
 (signature (hashtable-update! hashtable key proc default))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-intern! hashtable key default-proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-copy hashtable))
 (signature (hashtable-copy hashtable mutable))
 (signature (hashtable-copy hashtable mutable weakness))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-clear! hashtable))
 (signature (hashtable-clear! hashtable capacity))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-empty-copy hashtable))
 (signature (hashtable-empty-copy hashtable capacity))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-keys hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-values hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-entries hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-key-list hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-value-list hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-entry-lists hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-walk hashtable proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-update-all! hashtable proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-prune! hashtable proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-merge! hashtable-dest hashtable-source))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-sum hashtable init proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-map->lset hashtable proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-find hashtable proc))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-empty? hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-pop! hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-inc! hashtable key))
 (signature (hashtable-inc! hashtable key number))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-dec! hashtable key))
 (signature (hashtable-dec! hashtable key number))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-equivalence-function hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-hash-function hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-weakness hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hashtable-mutable? hashtable))
 (source (srfi 126))
 (kind procedure))
((signature (hash-salt))
 (source (srfi 126))
 (kind syntax))
((signature (equal-hash obj))
 (source (srfi 126))
 (kind procedure))
((signature (string-hash string))
 (source (srfi 126))
 (kind procedure))
((signature (string-ci-hash string))
 (source (srfi 126))
 (kind procedure))
((signature (symbol-hash symbol))
 (source (srfi 126))
 (kind procedure))
((signature (text? obj) (returns boolean))
 (source (srfi 135))
 (kind procedure))
((signature (textual? obj) (returns boolean))
 (source (srfi 135))
 (kind procedure))
((signature (textual-null? text) (returns boolean))
 (source (srfi 135))
 (kind procedure))
((signature (make-text len char) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (text char ...) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (text-tabulate proc len) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (text-unfold stop? mapper successor seed) (returns text))
 (signature (text-unfold stop? mapper successor seed base) (returns text))
 (signature (text-unfold stop? mapper successor seed base make-final) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (text-unfold-right stop? mapper successor seed) (returns text))
 (signature (text-unfold-right stop? mapper successor seed base) (returns text))
 (signature (text-unfold-right stop? mapper successor seed base make-final) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (reverse-list->text char-list) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (text-length text) (returns len))
 (source (srfi 135))
 (kind procedure))
((signature (text-ref text idx) (returns char))
 (source (srfi 135))
 (kind procedure))
((signature (textual-copy textual) (returns text))
 (signature (textual-copy textual start) (returns text))
 (signature (textual-copy textual start end) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-replace textual1 textual2 start1 end1) (returns text))
 (signature (textual-replace textual1 textual2 start1 end1 start2) (returns text))
 (signature (textual-replace textual1 textual2 start1 end1 start2 end2) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual=? textual1 textual2 textual3 ...) (returns boolean))
 (source (srfi 135))
 (kind procedure))
((signature (textual-ci=? textual1 textual2 textual3 ...) (returns boolean))
 (source (srfi 135))
 (kind procedure))
((signature (textual-append textual ...) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-concatenate textual-list) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-join textual-list) (returns text))
 (signature (textual-join textual-list delimiter) (returns text))
 (signature (textual-join textual-list delimiter grammar) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-map proc textual1 textual2 ...) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-for-each proc textual1 textual2 ...) (returns unspecified))
 (source (srfi 135))
 (kind procedure))
((signature (textual-map-index proc textual) (returns text))
 (signature (textual-map-index proc textual start) (returns text))
 (signature (textual-map-index proc textual start end) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-for-each-index proc textual) (returns unspecified))
 (signature (textual-for-each-index proc textual start) (returns unspecified))
 (signature (textual-for-each-index proc textual start end) (returns unspecified))
 (source (srfi 135))
 (kind procedure))
((signature (textual-count textual pred) (returns integer))
 (signature (textual-count textual pred start) (returns integer))
 (signature (textual-count textual pred start end) (returns integer))
 (source (srfi 135))
 (kind procedure))
((signature (textual-replicate textual from to) (returns text))
 (signature (textual-replicate textual from to start) (returns text))
 (signature (textual-replicate textual from to start end) (returns text))
 (source (srfi 135))
 (kind procedure))
((signature (textual-split textual delimiter) (returns list))
 (signature (textual-split textual delimiter grammar) (returns list))
 (signature (textual-split textual delimiter grammar limit) (returns list))
 (signature (textual-split textual delimiter grammar limit start) (returns list))
 (signature (textual-split textual delimiter grammar limit start end) (returns list))
 (source (srfi 135))
 (kind procedure))
((signature (bitwise-not i))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-and i ...))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-ior i ...))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-xor i ...))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-eqv i ...))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-nand i j))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-nor i j))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-andc1 i j))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-andc2 i j))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-orc1 i j))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-orc2 i j))
 (source (srfi 142))
 (kind procedure))
((signature (arithmetic-shift i count))
 (source (srfi 142))
 (kind procedure))
((signature (bit-count i))
 (source (srfi 142))
 (kind procedure))
((signature (integer-length i))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-if mask i j))
 (source (srfi 142))
 (kind procedure))
((signature (bit-set? index i))
 (source (srfi 142))
 (kind procedure))
((signature (copy-bit index i boolean))
 (source (srfi 142))
 (kind procedure))
((signature (bit-swap index1 index2 i))
 (source (srfi 142))
 (kind procedure))
((signature (any-bit-set? test-bits i))
 (source (srfi 142))
 (kind procedure))
((signature (every-bit-set? test-bits i))
 (source (srfi 142))
 (kind procedure))
((signature (first-set-bit i))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field i start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-any? i start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-every? i start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-clear i start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-set i start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-replace dst src start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-replace-same dst src start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-rotate i count start end))
 (source (srfi 142))
 (kind procedure))
((signature (bit-field-reverse i start end))
 (source (srfi 142))
 (kind procedure))
((signature (integer->list i))
 (signature (integer->list i len))
 (source (srfi 142))
 (kind procedure))
((signature (integer->vector i))
 (signature (integer->vector i len))
 (source (srfi 142))
 (kind procedure))
((signature (list->integer list))
 (source (srfi 142))
 (kind procedure))
((signature (vector->integer list))
 (source (srfi 142))
 (kind procedure))
((signature (bits bool ...))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-fold proc seed i))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-for-each proc i))
 (source (srfi 142))
 (kind procedure))
((signature (bitwise-unfold stop? mapper successor seed))
 (source (srfi 142))
 (kind procedure))
((signature (make-bitwise-generator i))
 (source (srfi 142))
 (kind procedure))
((signature fl-e)
 (source (srfi 144))
 (kind constant))
((signature fl-1/e)
 (source (srfi 144))
 (kind constant))
((signature fl-e-2)
 (source (srfi 144))
 (kind constant))
((signature fl-e-pi/4)
 (source (srfi 144))
 (kind constant))
((signature fl-log2-e)
 (source (srfi 144))
 (kind constant))
((signature fl-log10-e)
 (source (srfi 144))
 (kind constant))
((signature fl-log-2)
 (source (srfi 144))
 (kind constant))
((signature fl-1/log-2)
 (source (srfi 144))
 (kind constant))
((signature fl-log-3)
 (source (srfi 144))
 (kind constant))
((signature fl-log-pi)
 (source (srfi 144))
 (kind constant))
((signature fl-log-10)
 (source (srfi 144))
 (kind constant))
((signature fl-1/log-10)
 (source (srfi 144))
 (kind constant))
((signature fl-pi)
 (source (srfi 144))
 (kind constant))
((signature fl-1/pi)
 (source (srfi 144))
 (kind constant))
((signature fl-2pi)
 (source (srfi 144))
 (kind constant))
((signature fl-pi/2)
 (source (srfi 144))
 (kind constant))
((signature fl-pi/4)
 (source (srfi 144))
 (kind constant))
((signature fl-pi-squared)
 (source (srfi 144))
 (kind constant))
((signature fl-degree)
 (source (srfi 144))
 (kind constant))
((signature fl-2/pi)
 (source (srfi 144))
 (kind constant))
((signature fl-2/sqrt-pi)
 (source (srfi 144))
 (kind constant))
((signature fl-sqrt-2)
 (source (srfi 144))
 (kind constant))
((signature fl-sqrt-3)
 (source (srfi 144))
 (kind constant))
((signature fl-sqrt-5)
 (source (srfi 144))
 (kind constant))
((signature fl-sqrt-10)
 (source (srfi 144))
 (kind constant))
((signature fl-1/sqrt-2)
 (source (srfi 144))
 (kind constant))
((signature fl-cbrt-2)
 (source (srfi 144))
 (kind constant))
((signature fl-cbrt-3)
 (source (srfi 144))
 (kind constant))
((signature fl-4thrt-2)
 (source (srfi 144))
 (kind constant))
((signature fl-phi)
 (source (srfi 144))
 (kind constant))
((signature fl-log-phi)
 (source (srfi 144))
 (kind constant))
((signature fl-1/log-phi)
 (source (srfi 144))
 (kind constant))
((signature fl-euler)
 (source (srfi 144))
 (kind constant))
((signature fl-e-euler)
 (source (srfi 144))
 (kind constant))
((signature fl-sin-1)
 (source (srfi 144))
 (kind constant))
((signature fl-cos-1)
 (source (srfi 144))
 (kind constant))
((signature fl-gamma-1/2)
 (source (srfi 144))
 (kind constant))
((signature fl-gamma-1/3)
 (source (srfi 144))
 (kind constant))
((signature fl-gamma-2/3)
 (source (srfi 144))
 (kind constant))
((signature fl-greatest)
 (source (srfi 144))
 (kind constant))
((signature fl-least)
 (source (srfi 144))
 (kind constant))
((signature fl-epsilon)
 (source (srfi 144))
 (kind constant))
((signature fl-fast-fl+*)
 (source (srfi 144))
 (kind constant))
((signature fl-integer-exponent-zero)
 (source (srfi 144))
 (kind constant))
((signature fl-integer-exponent-nan)
 (source (srfi 144))
 (kind constant))
((signature (flonum number))
 (source (srfi 144))
 (kind procedure))
((signature (fladjacent x y))
 (source (srfi 144))
 (kind procedure))
((signature (flcopysign x y))
 (source (srfi 144))
 (kind procedure))
((signature (make-flonum x n))
 (source (srfi 144))
 (kind procedure))
((signature (flinteger-fraction x))
 (source (srfi 144))
 (kind procedure))
((signature (flexponent x))
 (source (srfi 144))
 (kind procedure))
((signature (flinteger-exponent x))
 (source (srfi 144))
 (kind procedure))
((signature (flnormalized-fraction-exponent x))
 (source (srfi 144))
 (kind procedure))
((signature (flsign-bit x))
 (source (srfi 144))
 (kind procedure))
((signature (flonum? obj))
 (source (srfi 144))
 (kind procedure))
((signature (fl=? x y z ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl<? x y z ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl>? x y z ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl<=? x y z ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl>=? x y z ...))
 (source (srfi 144))
 (kind procedure))
((signature (flunordered? x y))
 (source (srfi 144))
 (kind procedure))
((signature (flinteger? x))
 (source (srfi 144))
 (kind procedure))
((signature (flzero? x))
 (source (srfi 144))
 (kind procedure))
((signature (flpositive? x))
 (source (srfi 144))
 (kind procedure))
((signature (flnegative? x))
 (source (srfi 144))
 (kind procedure))
((signature (flodd? x))
 (source (srfi 144))
 (kind procedure))
((signature (fleven? x))
 (source (srfi 144))
 (kind procedure))
((signature (flfinite? x))
 (source (srfi 144))
 (kind procedure))
((signature (flinfinite? x))
 (source (srfi 144))
 (kind procedure))
((signature (flnan? x))
 (source (srfi 144))
 (kind procedure))
((signature (flnormalized? x))
 (source (srfi 144))
 (kind procedure))
((signature (fldenormalized? x))
 (source (srfi 144))
 (kind procedure))
((signature (flmax x ...))
 (source (srfi 144))
 (kind procedure))
((signature (flmin x ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl+ x ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl* x ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl+* x y z))
 (source (srfi 144))
 (kind procedure))
((signature (fl- x y ...))
 (source (srfi 144))
 (kind procedure))
((signature (fl/ x y ...))
 (source (srfi 144))
 (kind procedure))
((signature (flabs x))
 (source (srfi 144))
 (kind procedure))
((signature (flabsdiff x y))
 (source (srfi 144))
 (kind procedure))
((signature (flposdiff x y))
 (source (srfi 144))
 (kind procedure))
((signature (flsgn x))
 (source (srfi 144))
 (kind procedure))
((signature (flnumerator x))
 (source (srfi 144))
 (kind procedure))
((signature (fldenominator x))
 (source (srfi 144))
 (kind procedure))
((signature (flfloor x))
 (source (srfi 144))
 (kind procedure))
((signature (flceiling x))
 (source (srfi 144))
 (kind procedure))
((signature (flround x))
 (source (srfi 144))
 (kind procedure))
((signature (fltruncate x))
 (source (srfi 144))
 (kind procedure))
((signature (flexp x))
 (source (srfi 144))
 (kind procedure))
((signature (flexp2 x))
 (source (srfi 144))
 (kind procedure))
((signature (flexp-1 x))
 (source (srfi 144))
 (kind procedure))
((signature (flsquare x))
 (source (srfi 144))
 (kind procedure))
((signature (flsqrt x))
 (source (srfi 144))
 (kind procedure))
((signature (flcbrt x))
 (source (srfi 144))
 (kind procedure))
((signature (flhypot x y))
 (source (srfi 144))
 (kind procedure))
((signature (flexpt x y))
 (source (srfi 144))
 (kind procedure))
((signature (fllog x))
 (source (srfi 144))
 (kind procedure))
((signature (fllog1+ x))
 (source (srfi 144))
 (kind procedure))
((signature (fllog2 x))
 (source (srfi 144))
 (kind procedure))
((signature (fllog10 x))
 (source (srfi 144))
 (kind procedure))
((signature (make-fllog-base x))
 (source (srfi 144))
 (kind procedure))
((signature (flsin x))
 (source (srfi 144))
 (kind procedure))
((signature (flcos x))
 (source (srfi 144))
 (kind procedure))
((signature (fltan x))
 (source (srfi 144))
 (kind procedure))
((signature (flasin x))
 (source (srfi 144))
 (kind procedure))
((signature (flacos x))
 (source (srfi 144))
 (kind procedure))
((signature (flatan x))
 (signature (flatan y x))
 (source (srfi 144))
 (kind procedure))
((signature (flsinh x))
 (source (srfi 144))
 (kind procedure))
((signature (flcosh x))
 (source (srfi 144))
 (kind procedure))
((signature (fltanh x))
 (source (srfi 144))
 (kind procedure))
((signature (flasinh x))
 (source (srfi 144))
 (kind procedure))
((signature (flacosh x))
 (source (srfi 144))
 (kind procedure))
((signature (flatanh x))
 (source (srfi 144))
 (kind procedure))
((signature (flquotient x y))
 (source (srfi 144))
 (kind procedure))
((signature (flremainder x y))
 (source (srfi 144))
 (kind procedure))
((signature (flremquo x y))
 (source (srfi 144))
 (kind procedure))
((signature (flgamma x))
 (source (srfi 144))
 (kind procedure))
((signature (flloggamma x))
 (source (srfi 144))
 (kind procedure))
((signature (flfirst-bessel n x))
 (source (srfi 144))
 (kind procedure))
((signature (flsecond-bessel n x))
 (source (srfi 144))
 (kind procedure))
((signature (flerf x))
 (source (srfi 144))
 (kind procedure))
((signature (flerfc x))
 (source (srfi 144))
 (kind procedure))
((signature (string? obj) (returns boolean))
 (source (srfi 152))
 (kind procedure))
((signature (string-null? string) (returns boolean))
 (source (srfi 152))
 (kind procedure))
((signature (make-string len char) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string char ...) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-tabulate proc len) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-unfold stop? mapper successor seed base) (returns string))
 (signature (string-unfold stop? mapper successor seed base make-final) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-unfold-right stop? mapper successor seed base) (returns string))
 (signature (string-unfold-right stop? mapper successor seed base make-final) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (reverse-list->string char-list) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-length string) (returns len))
 (source (srfi 152))
 (kind procedure))
((signature (string-ref string idx) (returns char))
 (source (srfi 152))
 (kind procedure))
((signature (string-replace string1 string2 start1 end1) (returns string))
 (signature (string-replace string1 string2 start1 end1 start2) (returns string))
 (signature (string-replace string1 string2 start1 end1 start2 end2) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string=? string1 string2 string3 ...) (returns boolean))
 (source (srfi 152))
 (kind procedure))
((signature (string-ci=? string1 string2 string3 ...) (returns boolean))
 (source (srfi 152))
 (kind procedure))
((signature (string-append string ...) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-concatenate string-list) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-join string-list) (returns string))
 (signature (string-join string-list delimiter) (returns string))
 (signature (string-join string-list delimiter grammar) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-map proc string1 string2 ...) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-for-each proc string1 string2 ...) (returns unspecified))
 (source (srfi 152))
 (kind procedure))
((signature (string-count string pred) (returns integer))
 (signature (string-count string pred start) (returns integer))
 (signature (string-count string pred start end) (returns integer))
 (source (srfi 152))
 (kind procedure))
((signature (string-replicate string from to) (returns string))
 (signature (string-replicate string from to start) (returns string))
 (signature (string-replicate string from to start end) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (string-segment string k) (returns list))
 (source (srfi 152))
 (kind procedure))
((signature (string-split string delimiter) (returns list))
 (signature (string-split string delimiter grammar) (returns list))
 (signature (string-split string delimiter grammar limit) (returns list))
 (signature (string-split string delimiter grammar limit start) (returns list))
 (signature (string-split string delimiter grammar limit start end) (returns list))
 (source (srfi 152))
 (kind procedure))
((signature (read-string k) (returns string))
 (signature (read-string k port) (returns string))
 (source (srfi 152))
 (kind procedure))
((signature (write-string string) (returns unspecified))
 (signature (write-string string port) (returns unspecified))
 (signature (write-string string port start) (returns unspecified))
 (signature (write-string string port start end) (returns unspecified))
 (source (srfi 152))
 (kind procedure))
((signature (string-set! string k char) (returns unspecified))
 (source (srfi 152))
 (kind procedure))
((signature (string-fill! string fill) (returns unspecified))
 (signature (string-fill! string fill start) (returns unspecified))
 (signature (string-fill! string fill start end) (returns unspecified))
 (source (srfi 152))
 (kind procedure))
((signature (string-copy! to at from) (returns unspecified))
 (signature (string-copy! to at from start) (returns unspecified))
 (signature (string-copy! to at from start end) (returns unspecified))
 (source (srfi 152))
 (kind procedure))
((signature (generator arg ...))
 (source (srfi 158))
 (kind procedure))
((signature (circular-generator arg1 arg2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (make-iota-generator count))
 (signature (make-iota-generator count start))
 (signature (make-iota-generator count start step))
 (source (srfi 158))
 (kind procedure))
((signature (make-range-generator start))
 (signature (make-range-generator start end))
 (signature (make-range-generator start end  step))
 (source (srfi 158))
 (kind procedure))
((signature (make-coroutine-generator proc))
 (source (srfi 158))
 (kind procedure))
((signature (list->generator lis))
 (source (srfi 158))
 (kind procedure))
((signature (vector->generator vec))
 (signature (vector->generator vec start))
 (signature (vector->generator vec start end))
 (source (srfi 158))
 (kind procedure))
((signature (reverse-vector->generator vec))
 (signature (reverse-vector->generator vec start))
 (signature (reverse-vector->generator vec start end))
 (source (srfi 158))
 (kind procedure))
((signature (string->generator str))
 (signature (string->generator str start))
 (signature (string->generator str start end))
 (source (srfi 158))
 (kind procedure))
((signature (bytevector->generator bytevector))
 (signature (bytevector->generator bytevector start))
 (signature (bytevector->generator bytevector start end))
 (source (srfi 158))
 (kind procedure))
((signature (make-for-each-generator for-each obj))
 (source (srfi 158))
 (kind procedure))
((signature (make-unfold-generator stop? mapper successor seed))
 (source (srfi 158))
 (kind procedure))
((signature (gcons* item ... gen))
 (source (srfi 158))
 (kind procedure))
((signature (gappend gen ...))
 (source (srfi 158))
 (kind procedure))
((signature (gflatten gen))
 (source (srfi 158))
 (kind procedure))
((signature (ggroup gen k))
 (signature (ggroup gen k padding))
 (source (srfi 158))
 (kind procedure))
((signature (gmerge less-than gen1 gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (gmap proc gen1 gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (gcombine proc seed gen gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (gfilter pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (gremove pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (gstate-filter proc seed gen))
 (source (srfi 158))
 (kind procedure))
((signature (gtake gen k))
 (signature (gtake gen k padding))
 (source (srfi 158))
 (kind procedure))
((signature (gdrop gen k))
 (source (srfi 158))
 (kind procedure))
((signature (gtake-while pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (gdrop-while pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (gdelete item gen))
 (signature (gdelete item gen =))
 (source (srfi 158))
 (kind procedure))
((signature (gdelete-neighbor-dups gen))
 (signature (gdelete-neighbor-dups gen =))
 (source (srfi 158))
 (kind procedure))
((signature (gindex value-gen index-gen))
 (source (srfi 158))
 (kind procedure))
((signature (gselect value-gen truth-gen))
 (source (srfi 158))
 (kind procedure))
((signature (generator->list generator))
 (signature (generator->list generator k))
 (source (srfi 158))
 (kind procedure))
((signature (generator->reverse-list generator))
 (signature (generator->reverse-list generator k))
 (source (srfi 158))
 (kind procedure))
((signature (generator->vector generator))
 (signature (generator->vector generator k))
 (source (srfi 158))
 (kind procedure))
((signature (generator->vector! vector at generator))
 (source (srfi 158))
 (kind procedure))
((signature (generator->string generator))
 (signature (generator->string generator k))
 (source (srfi 158))
 (kind procedure))
((signature (generator-fold proc seed gen1 gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (generator-for-each proc gen gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (generator-map->list proc gen gen2 ...))
 (source (srfi 158))
 (kind procedure))
((signature (generator-find pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (generator-count pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (generator-any pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (generator-every pred gen))
 (source (srfi 158))
 (kind procedure))
((signature (generator-unfold gen unfold arg ...))
 (source (srfi 158))
 (kind procedure))
((signature (make-accumulator kons knil finalizer))
 (source (srfi 158))
 (kind procedure))
((signature (count-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (list-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (reverse-list-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (vector-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (reverse-vector-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (vector-accumulator! vector at))
 (source (srfi 158))
 (kind procedure))
((signature (string-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (bytevector-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (bytevector-accumulator! bytevector at))
 (source (srfi 158))
 (kind procedure))
((signature (sum-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (product-accumulator))
 (source (srfi 158))
 (kind procedure))
((signature (rest-values caller rest-list))
 (signature (rest-values caller rest-list args-number-limit default ...))
 (signature (rest-values rest-list))
 (signature (rest-values rest-list args-number-limit default ...))
 (source (srfi 51))
 (kind procedure))
((signature (expt z1 z2))
 (source (srfi 70))
 (kind procedure))
((signature (sqrt x))
 (source (srfi 70))
 (kind procedure))
((signature (exact->inexact z))
 (source (srfi 70))
 (kind procedure))
((signature (inexact->exact z))
 (source (srfi 70))
 (kind procedure))
((signature (exact-round x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-ceiling x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-floor x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-truncate x))
 (source (srfi 70))
 (kind procedure))
((signature (number? obj))
 (source (srfi 70))
 (kind procedure))
((signature (complex? obj))
 (source (srfi 70))
 (kind procedure))
((signature (real? obj))
 (source (srfi 70))
 (kind procedure))
((signature (rational? obj))
 (source (srfi 70))
 (kind procedure))
((signature (integer? obj))
 (source (srfi 70))
 (kind procedure))
((signature (exact? z))
 (source (srfi 70))
 (kind procedure))
((signature (inexact? z))
 (source (srfi 70))
 (kind procedure))
((signature (= z1 z2 z3))
 (source (srfi 70))
 (kind procedure))
((signature (< x1 x2 x3))
 (source (srfi 70))
 (kind procedure))
((signature (> x1 x2 x3))
 (source (srfi 70))
 (kind procedure))
((signature (<= x1 x2 x3))
 (source (srfi 70))
 (kind procedure))
((signature (>= x1 x2 x3))
 (source (srfi 70))
 (kind procedure))
((signature (finite? z))
 (source (srfi 70))
 (kind procedure))
((signature (infinite? z))
 (source (srfi 70))
 (kind procedure))
((signature (zero? z))
 (source (srfi 70))
 (kind procedure))
((signature (positive? x))
 (source (srfi 70))
 (kind procedure))
((signature (negative? x))
 (source (srfi 70))
 (kind procedure))
((signature (odd? n))
 (source (srfi 70))
 (kind procedure))
((signature (even? n))
 (source (srfi 70))
 (kind procedure))
((signature (max x1 x2 ...))
 (source (srfi 70))
 (kind procedure))
((signature (min x1 x2 ...))
 (source (srfi 70))
 (kind procedure))
((signature (+ x1 ...))
 (source (srfi 70))
 (kind procedure))
((signature (* x1 ...))
 (source (srfi 70))
 (kind procedure))
((signature (- z1 z2))
 (signature (- z))
 (signature (- z1 z2 ...))
 (source (srfi 70))
 (kind procedure))
((signature (/ z1 z2))
 (signature (/ z))
 (signature (/ z1 z2 ...))
 (source (srfi 70))
 (kind procedure))
((signature (abs x))
 (source (srfi 70))
 (kind procedure))
((signature (quotient x1 x2))
 (source (srfi 70))
 (kind procedure))
((signature (remainder x1 x2))
 (source (srfi 70))
 (kind procedure))
((signature (modulo x1 x2))
 (source (srfi 70))
 (kind procedure))
((signature (gcd r1 ...))
 (source (srfi 70))
 (kind procedure))
((signature (lcm r1 ...))
 (source (srfi 70))
 (kind procedure))
((signature (floor x))
 (source (srfi 70))
 (kind procedure))
((signature (ceiling x))
 (source (srfi 70))
 (kind procedure))
((signature (truncate x))
 (source (srfi 70))
 (kind procedure))
((signature (round x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-floor x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-ceiling x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-truncate x))
 (source (srfi 70))
 (kind procedure))
((signature (exact-round x))
 (source (srfi 70))
 (kind procedure))
((signature (rationalize x y))
 (source (srfi 70))
 (kind procedure))
((signature (exp z))
 (source (srfi 70))
 (kind procedure))
((signature (log z))
 (source (srfi 70))
 (kind procedure))
((signature (sin z))
 (source (srfi 70))
 (kind procedure))
((signature (cos z))
 (source (srfi 70))
 (kind procedure))
((signature (tan z))
 (source (srfi 70))
 (kind procedure))
((signature (asin z))
 (source (srfi 70))
 (kind procedure))
((signature (acos z))
 (source (srfi 70))
 (kind procedure))
((signature (atan z))
 (signature (atan y x))
 (source (srfi 70))
 (kind procedure))
((signature (sqrt z))
 (source (srfi 70))
 (kind procedure))
((signature (expt z1 z2))
 (source (srfi 70))
 (kind procedure))
((signature (make-rectangular x1 x2))
 (source (srfi 70))
 (kind procedure))
((signature (make-polar x3 x4))
 (source (srfi 70))
 (kind procedure))
((signature (real-part z))
 (source (srfi 70))
 (kind procedure))
((signature (imag-part z))
 (source (srfi 70))
 (kind procedure))
((signature (magnitude z))
 (source (srfi 70))
 (kind procedure))
((signature (angle z))
 (source (srfi 70))
 (kind procedure))
((signature (string->number string))
 (signature (string->number string radix))
 (source (srfi 70))
 (kind procedure))
((signature (define* variable expression))
 (signature (define* (variable extended-def-formals) body))
 (source (srfi 89))
 (kind syntax))
((signature (lambda* extended-formals body))
 (source (srfi 89))
 (kind syntax))
((signature (define-lambda-object group-spec field-spec))
 (source (srfi 100))
 (kind syntax))
((signature (string-append! string value ...))
 (source (srfi 118))
 (kind procedure))
((signature (string-replace! dst dst-start dst-end src))
 (signature (string-replace! dst dst-start dst-end src src-start))
 (signature (string-replace! dst dst-start dst-end src src-start src-end))
 (source (srfi 118))
 (kind procedure))
((signature (ref object field))
 (signature (ref object field default))
 (source (srfi 123))
 (kind procedure))
((signature (ref* object field field* ...))
 (source (srfi 123))
 (kind procedure))
((signature (~ object field field* ...))
 (source (srfi 123))
 (kind procedure))
((signature (register-getter-with-setter! type getter sparse?))
 (source (srfi 123))
 (kind procedure))